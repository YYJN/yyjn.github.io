<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wushuang’blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-03-17T11:18:42.921Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Wu Shuang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>丘奇和图灵</title>
    <link href="http://yoursite.com/2016/03/17/%E4%B8%98%E5%A5%87%E5%92%8C%E5%9B%BE%E7%81%B5/"/>
    <id>http://yoursite.com/2016/03/17/丘奇和图灵/</id>
    <published>2016-03-17T11:09:59.000Z</published>
    <updated>2016-03-17T11:18:42.921Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/images/Alonzo_Church.jpg&quot; alt=&quot;&quot;&gt; &lt;img src=&quot;http://www.yinwang.org/images/Alan_Turing.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;丘奇（Alonzo Church）和图灵（Alan Turing）是两位对计算机科学具有最大影响力的人物，然而他们却具有非常对立的观点和相差很多的名气。在我长达16年的计算机科学生涯中，总是感觉到自己的思想反反复复的徘徊于这两个“阵营”之间。丘奇代表了“逻辑”和“语言”，而图灵代表着“物理”和“机器”。在前面的8年中，我对丘奇一无所知，而在后面的8年中，我却很少再听到图灵的名字。他们的观点谁对谁错，是一个无法回答的问题。完全投靠丘奇，或者完全投靠图灵，貌似都是错误的做法。这是一种非常难说清楚的，矛盾的感觉，但是今天我试图把自己的感悟简要的介绍一下。&lt;/p&gt;
&lt;h3 id=&quot;丘奇与图灵之争&quot;&gt;&lt;a href=&quot;#丘奇与图灵之争&quot; class=&quot;headerlink&quot; title=&quot;丘奇与图灵之争&quot;&gt;&lt;/a&gt;丘奇与图灵之争&lt;/h3&gt;&lt;p&gt;想必世界上所有的计算机学生都知道图灵的大名和事迹，因为美国计算机器学会（ACM）每年都会颁发“图灵奖”，它被誉为计算机科学的最高荣誉。大部分的计算机学生都会在某门课程（比如“计算理论”）学习“图灵机”的原理。然而，有多少人知道丘奇是什么人，他做出了什么贡献，他与图灵是什么样的关系呢？我想恐怕不到一半的人吧。&lt;/p&gt;
&lt;p&gt;如果你查一下&lt;a href=&quot;http://www.genealogy.math.ndsu.nodak.edu/id.php?id=8014&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;数学家谱图&lt;/a&gt;，就会发现丘奇其实是图灵的博士导师。然而从 Andrew Hodges 所著的《&lt;a href=&quot;http://www.turing.org.uk/bio/part3.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;图灵传&lt;/a&gt;》，你却可以看到图灵的心目中仿佛并没有这个导师，仿佛自己的“全新发明”应得的名气，被丘奇抢走了一样（注意作者的用词：robbed）。事实到底是怎样的，恐怕谁也说不清楚。我只能说，貌似计算机科学从诞生之日开始就充满了各种“宗教斗争”。&lt;/p&gt;
&lt;p&gt;虽然现在图灵更加有名，然而在现实的程序设计中，却是丘奇的理论在起着绝大部分的作用。据我的经验，丘奇的理论让很多事情变得简单，而图灵的机器却过度的复杂。丘奇所发明的 lambda calculus 以及后续的工作，是几乎一切程序语言的理论基础。而根据老一辈的计算机工程师们的描述，最早的计算机构架也没有受到图灵的启发，那是一些电机工程师完全独立的工作。然而有趣的是，继承了丘奇衣钵的计算机科学家们拿到的那个大奖，仍然被叫做“图灵奖”。我粗略的算了一下，在迄今所有的图灵奖之中，程序语言的研究者占了近三分之一。&lt;/p&gt;
&lt;h3 id=&quot;从图灵机到-lambda-calculus&quot;&gt;&lt;a href=&quot;#从图灵机到-lambda-calculus&quot; class=&quot;headerlink&quot; title=&quot;从图灵机到 lambda calculus&quot;&gt;&lt;/a&gt;从图灵机到 lambda calculus&lt;/h3&gt;&lt;p&gt;图灵机永远的停留在了理论的领域，绝大多数被用在“计算理论”（Theory of Computation）中。计算理论其实包括两个主要概念：“可计算性理论”（computability）和“复杂度理论”(complexity）。这两个概念在通常的计算理论书籍（比如 Sipser 的经典教材）里，都是用图灵机来叙述的。在学习计算理论的时候，绝大多数的计算机学生恐怕都会为图灵机头痛好一阵子。&lt;/p&gt;
&lt;p&gt;然而在做了研究生“计算理论”课程一个学期的 TA 之后我却发现，其实几乎所有计算理论的原理，都可以用 lambda calculus，或者程序语言和解释器的原理来描述。所谓“通用图灵机”（Universal Turing Machine），其实就是一个可以解释自己的解释器，叫做“元解释器”（meta-circular interpreter）。在 Dan Friedman 的 B621 程序语言理论课程中，我最后的项目就是一个 &lt;a href=&quot;https://github.com/yinwang0/old-toys/blob/master/meta-interp.ss&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;meta-circular interpreter&lt;/a&gt;。这个解释器能够完全的解释它自己，而且可以任意的嵌套（也就是说用它自己来解释它自己，再来解释它自己……）。然而我的“元解释器”却是基于 lambda calculus 的，所以我后来发现了一种方法，可以完全的用 lambda calculus 来解释计算理论里面几乎所有的定理。&lt;/p&gt;
&lt;p&gt;我为这个发现写了两篇博文：《&lt;a href=&quot;http://yinwang0.wordpress.com/2012/03/22/reducibility&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;A Reformulation of Reducibility&lt;/a&gt;》和《&lt;a href=&quot;http://yinwang0.wordpress.com/2012/10/25/halting&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Undecidability Proof of Halting Problem without Diagonalization&lt;/a&gt;》。我把 Sipser 的&lt;a href=&quot;http://www.amazon.com/dp/113318779X&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;计算理论课本&lt;/a&gt;里面的几乎整个一章的证明都用我自己的这种方式改写了一遍，然后讲给上课的学生。因为这种表示方法比起通常的“图灵机+自然语言”的方式简单和精确，所以收到了相当好的效果，好些学生对我说有一种恍然大悟的感觉。&lt;/p&gt;
&lt;p&gt;我把这一发现告诉了我当时的导师 Amr Sabry。他笑了，说这个他早就知道了。他推荐我去看一本书，叫做《&lt;a href=&quot;http://www.diku.dk/~neil/Comp2book.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Computability and Complexity from a Programming Perspective&lt;/a&gt;》，作者是大名鼎鼎的 Neil Jones (他也是“&lt;a href=&quot;http://www.itu.dk/~sestoft/pebook/pebook.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Partial Evaluation&lt;/a&gt;”这一重要概念的提出者）。这本书不是用图灵机，而是一种近似于 Pascal，却又带有 lambda calculus 的一些特征的语言（叫做 “WHILE 语言”）来描述计算理论。用这种语言，Jones 不但轻松的证明了所有经典的计算理论定理，而且能够证明一些使用图灵机不能证明的定理。&lt;br&gt;我曾经一直不明白，为什么可以如此简单的解释清楚的事情，计算理论需要使用图灵机，而且叙述也非常的繁复和含糊。由于这些证明都出于资深的计算理论家们之手，让我不得不怀疑自己的想法里面是不是缺了点什么。可是在看到了 Jones 教授的这本书之后，我倍感欣慰。原来一切本来就是这么的简单！&lt;/p&gt;
&lt;p&gt;后来从 CMU 的教授 Robert Harper 的一篇博文《&lt;a href=&quot;http://existentialtype.wordpress.com/2011/03/16/languages-and-machines&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Languages and Machines&lt;/a&gt;》中，我也发现 Harper 跟我具有类似的观点，甚至更加极端一些。他强烈的支持使用 lambda calculus，反对图灵机和其他一切机器作为计算理论的基础。&lt;/p&gt;
&lt;h3 id=&quot;从-lambda-calculus-到电子线路&quot;&gt;&lt;a href=&quot;#从-lambda-calculus-到电子线路&quot; class=&quot;headerlink&quot; title=&quot;从 lambda calculus 到电子线路&quot;&gt;&lt;/a&gt;从 lambda calculus 到电子线路&lt;/h3&gt;&lt;p&gt;当我在 2012 年的 POPL 第一次见到 Neil Jones 的时候，他跟我解释了许多的问题。当我问到他这本书的时候，他对我说：“我不推荐我的书给你，因为大部分的人都觉得 lambda calculus 难以理解。”Lambda calculus 难以理解？我怎么不觉得呢？我觉得图灵机麻烦多了。然后我才发现，由于经过了这么多年的研究之后，自己对 lambda calculus 的理解程度已经到了深入骨髓的地步，所以我已经全然不知新手对它是什么样的感觉。原来“简单”这个词，在具有不同经历的人头脑里，有着完全不同的含义。&lt;/p&gt;
&lt;p&gt;所以其实 Jones 教授说的没错，lambda calculus 也许对于大部分人来说不合适，因为对于它没有一个好的入门指南。Lambda calculus 出自逻辑学家之手，而逻辑学家们最在行的，就是把很简单的“程序”用天书一样的公式表示出来。这难怪老一辈的逻辑学家们，因为他们创造那些概念的时候，计算机还不存在。但是如果现在还用那一堆符号，恐怕就有点落伍了。大部分人在看到 beta-reduction, alpha-conversion, eta-conversion, … 这大堆的公式的时候，就已经头痛难忍了，怎么还有可能利用它来理解计算理论呢？&lt;/p&gt;
&lt;p&gt;其实那一堆符号所表示的东西，终究超越不了现实里的物体和变化，最多不过再幻想一下“多种未来”或者“时间机器”。有了计算机之后，这些符号公式，其实都可以用数据结构和程序语言来表示。所以 lambda calculus 在我的头脑里真的很简单。每一个 lambda 其实就像是一个电路模块。它从电线端子得到输入，然后输出一个结果。你把那些电线叫什么名字根本不重要，重要的是同一根电线的名字必须“一致”，这就是所谓的“alpha-conversion”的原理…… 不在这里多说了，如果你想深入的了解我心目中的 lambda calculus，也许可以看看我的另一篇博文《&lt;a href=&quot;http://www.yinwang.org/blog-cn/2012/08/01/interpreter&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;怎样写一个解释器&lt;/a&gt;》，看看这个关于类型推导的&lt;a href=&quot;http://www.tudou.com/programs/view/GU9GtDuWSMk&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;幻灯片&lt;/a&gt;的开头，或者进一步，看看如何推导出 &lt;a href=&quot;http://yinwang0.wordpress.com/2012/04/09/reinvent-y&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Y combinator&lt;/a&gt;，或者看看《&lt;a href=&quot;http://yinwang0.wordpress.com/2012/09/16/what-is-a-program&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;What is a program?&lt;/a&gt;》。你也可以看看 Matthias Felleisen 和 Matthew Flatt 的《&lt;a href=&quot;http://www.cs.utah.edu/~mflatt/past-courses/cs7520/public_html/s06/notes.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Programming Languages and Lambda Calculi&lt;/a&gt;》。&lt;/p&gt;
&lt;p&gt;所以，也许你看到了在我的头脑里面并存着丘奇和图灵的影子。我觉得丘奇的 lambda calculus 是比图灵机简单而强大的描述工具，然而我却又感染到了图灵对于“物理”和“机器”的执着。我觉得逻辑学家们对 lambda calculus 的解释过于复杂，而通过把它理解为物理的“电路元件”，让我对 lambda calculus 做出了更加简单的解释，把它与“现实世界”联系在了一起。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/images/lambda-inside.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;所以到最后，丘奇和图灵这两种看似矛盾的思想，在我的脑海里得到了和谐的统一。这些精髓的思想帮助我解决了许多的问题。感谢你们，计算机科学的两位鼻祖。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/images/Alonzo_Church.jpg&quot; alt=&quot;&quot;&gt; &lt;img src=&quot;http://www.yinwang.org/images/Alan_Turing.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;
    
    </summary>
    
    
      <category term="转摘" scheme="http://yoursite.com/tags/%E8%BD%AC%E6%91%98/"/>
    
  </entry>
  
  <entry>
    <title>PyDiff - Python 结构化程序比较工具</title>
    <link href="http://yoursite.com/2016/03/17/PyDiff%20-%20Python%20%E7%BB%93%E6%9E%84%E5%8C%96%E7%A8%8B%E5%BA%8F%E6%AF%94%E8%BE%83%E5%B7%A5%E5%85%B7/"/>
    <id>http://yoursite.com/2016/03/17/PyDiff - Python 结构化程序比较工具/</id>
    <published>2016-03-17T11:04:36.000Z</published>
    <updated>2016-03-17T11:07:59.373Z</updated>
    
    <content type="html">&lt;p&gt;在之前的一篇博文里，我介绍了 &lt;a href=&quot;http://www.yinwang.org/blog-cn/2013/04/21/ydiff-%E7%BB%93%E6%9E%84%E5%8C%96%E7%9A%84%E7%A8%8B%E5%BA%8F%E6%AF%94%E8%BE%83/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ydiff&lt;/a&gt;，一个通用的结构化程序比较工具。其实在设计 ydiff 之前，这个工具是用 Python 实现的，并且只处理 Python 程序。在设计了 ydiff 之后，我发现其实我不想费很多精力来写 Python 的 parser，所以对 Python 的支持就日渐疏忽了。后来我把那块代码放在了 ydiff 的 repo 里面（叫做 pydiff.py），然而几乎没有人注意到它。&lt;/p&gt;
&lt;p&gt;现在我发现 Python 其实是一个挺重要而且有趣的语言。说它重要是因为它简单而且在某种程度上是优雅的，所以有很多人用它。说它有趣是因为它的一些设计其实比起很多更加“严谨”的语言要来得合理。语言的设计不只要有逻辑的严谨和效率，而且需要有“易用性”（usability）。Python 在易用性上面是做的比较好的。最近仔细看了一下 &lt;a href=&quot;http://www.python.org/dev/peps/pep-0008/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PEP 8&lt;/a&gt; (Python 的 “Style Guide”），发现它有很多地方比起 Java, Scheme, Haskell 都有让程序更加“易读”的特点。&lt;/p&gt;
&lt;p&gt;所以，现在我为这个 Python 的结构化比较程序重新建立了它自己的 GitHub 项目。你可以在这里得到它的代码： &lt;a href=&quot;http://github.com/yinwang0/pydiff&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/yinwang0/pydiff&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;对比大型文件的时候可能速度会成一定的问题。不过我打算以后对算法做一个比较大的改进。如果发现 bug 请在 GitHub 中向我报告。谢谢。&lt;/p&gt;
&lt;h3 id=&quot;Demo&quot;&gt;&lt;a href=&quot;#Demo&quot; class=&quot;headerlink&quot; title=&quot;Demo&quot;&gt;&lt;/a&gt;Demo&lt;/h3&gt;&lt;p&gt;你可以在下面的窗口中看到 PyDiff 的输出结果，是 PyDiff 对比它自己的代码（我最近两天对它的修改）。&lt;/p&gt;
&lt;p&gt;&lt;iframe width=&quot;100%&quot; height=&quot;540&quot; src=&quot;http://www.yinwang.org/resources/pydiff1-pydiff2.html&quot;&gt;&lt;/iframe&gt;&lt;br&gt;(&lt;a href=&quot;http://www.yinwang.org/resources/pydiff1-pydiff2.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;单独浏览&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;上面的界面有如下特点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;红色表示“删除”，绿色表示“插入”，白色表示“移动”或者没有变化，蓝色表示有小幅度“修改”。&lt;/li&gt;
&lt;li&gt;左右窗口同步滚动。&lt;/li&gt;
&lt;li&gt;点击白色方框，就可以依据框里的变量进行对齐。&lt;/li&gt;
&lt;li&gt;点击之后，左右窗口根据对齐的变量重新“耦合”，同步滚动。&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在之前的一篇博文里，我介绍了 &lt;a href=&quot;http://www.yinwang.org/blog-cn/2013/04/21/ydiff-%E7%BB%93%E6%9E%84%E5%8C%96%E7%9A%84%E7%A8%8B%E5%BA%8F%E6%AF%94%E
    
    </summary>
    
    
      <category term="转摘, ydiff" scheme="http://yoursite.com/tags/%E8%BD%AC%E6%91%98-ydiff/"/>
    
  </entry>
  
  <entry>
    <title>原因与证明</title>
    <link href="http://yoursite.com/2016/03/17/%E5%8E%9F%E5%9B%A0%E4%B8%8E%E8%AF%81%E6%98%8E/"/>
    <id>http://yoursite.com/2016/03/17/原因与证明/</id>
    <published>2016-03-17T11:02:10.000Z</published>
    <updated>2016-03-17T11:02:56.579Z</updated>
    
    <content type="html">&lt;h3 id=&quot;证明&quot;&gt;&lt;a href=&quot;#证明&quot; class=&quot;headerlink&quot; title=&quot;证明&quot;&gt;&lt;/a&gt;证明&lt;/h3&gt;&lt;p&gt;我在 Cornell 的时候经常遇到这样的问题，那就是教授们一上课就在黑板上写长篇的“定理证明”，全体同学认认真真在下面抄笔记，就连只有十来个人的小课也是那样。有些写字速度慢的人就不得不带上小型录音机，把教授的课全都录下来，要不就是之后去借别人的笔记来抄。&lt;/p&gt;
&lt;p&gt;有一次某知名教授照着讲义，背对着学生，在黑板上写了大半节课，写下好几板的证明，证明的是 simply typed lambda calculus （STLC）的 strong normalization 特性（SN）。刚写完就到下课时间了，他回过头来喘了一口气，说：“Any questions？”没有人啃声，于是他说：“很好！下课！”&lt;/p&gt;
&lt;p&gt;几天后我问他，你证明了 STLC 有这个特性，然而你却没有告诉我它“为什么”有这个特性。他神气的看了我一眼：“你不懂吗？”我说：“你的证明我看懂了大部分，可是一个东西具有如此的性质，并不是因为你证明了它。这性质是它天生就有的，不管你是否能证明它。我想知道的是什么让 STLC 具有这个性质，而不只是证明它。”他说：“你问这样的问题有什么意义吗？你需要非常聪明，并且需要经过大量的努力才能想出这样的证明。”&lt;/p&gt;
&lt;h3 id=&quot;原因&quot;&gt;&lt;a href=&quot;#原因&quot; class=&quot;headerlink&quot; title=&quot;原因&quot;&gt;&lt;/a&gt;原因&lt;/h3&gt;&lt;p&gt;两年之后，我在 Indiana 上了另外一堂程序语言理论课。教授是我之前的导师 Amr Sabry。他上课从来不带讲义，貌似也没有准备，漫不经心的，却每次都能讲清楚问题的关键。于是有一天他也开始讲 STLC 的 SN 特性。他说，我不想写下这个证明让你们抄，我只告诉你们大概怎么去想。SN 的意思就是程序肯定会“终止”。所有会终止的程序，都会有一个“特征值”会随着程序的运行而减小。你需要做的就是找到 STLC 的“特征值”是什么。接着他就开始在黑板上画一个图……&lt;/p&gt;
&lt;p&gt;过了一段时间，我不仅学会了这个“证明”，而且知道了 STLC 具有如此特性的“原因”。&lt;/p&gt;
&lt;h3 id=&quot;证明与原因的区别&quot;&gt;&lt;a href=&quot;#证明与原因的区别&quot; class=&quot;headerlink&quot; title=&quot;证明与原因的区别&quot;&gt;&lt;/a&gt;证明与原因的区别&lt;/h3&gt;&lt;p&gt;从以上的故事，以及你的亲身经历中，你也许注意到了大部分的教育过分的重视了“证明”，却忽略了比证明更重要的东西——“原因”。&lt;/p&gt;
&lt;p&gt;原因往往比证明来得更加简单，更加深刻，但却更难发现。对于一个事实往往有多种多样的证明，然而导致这个事实的原因却往往只有一个。如果你只知道证明却不知道原因，那你往往就被囚禁于别人制造的理论里面，无法自拔。你能证明一个事物具有某种特性，然而你却没有能力改变它。你无法对它加入新的，好的特性，也无法去掉一个不好的特性。你也无法发明新的理论。有能力发明新的事物和理论的人，他们往往不仅知道“证明”，而且知道“原因”。&lt;/p&gt;
&lt;p&gt;打个比方。证明与原因的区别，就像是犯罪的证据与它的原因的区别。证据并不是导致犯罪的原因。有了证据可以帮助你把罪犯绳之以法，可是如果你找不到他犯罪的原因，你就没法防止同样的犯罪现象再次发生。&lt;/p&gt;
&lt;p&gt;古人说的“知其然”与“知其所以然”的区别，也就是同样的道理吧。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;证明&quot;&gt;&lt;a href=&quot;#证明&quot; class=&quot;headerlink&quot; title=&quot;证明&quot;&gt;&lt;/a&gt;证明&lt;/h3&gt;&lt;p&gt;我在 Cornell 的时候经常遇到这样的问题，那就是教授们一上课就在黑板上写长篇的“定理证明”，全体同学认认真真在下面抄笔记，就连只有十来
    
    </summary>
    
    
      <category term="转摘" scheme="http://yoursite.com/tags/%E8%BD%AC%E6%91%98/"/>
    
  </entry>
  
  <entry>
    <title>ydiff - 结构化的程序比较</title>
    <link href="http://yoursite.com/2016/03/17/ydiff%20-%20%E7%BB%93%E6%9E%84%E5%8C%96%E7%9A%84%E7%A8%8B%E5%BA%8F%E6%AF%94%E8%BE%83/"/>
    <id>http://yoursite.com/2016/03/17/ydiff - 结构化的程序比较/</id>
    <published>2016-03-17T09:41:40.000Z</published>
    <updated>2016-03-17T10:55:47.049Z</updated>
    
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/yinwang0/ydiff&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ydiff&lt;/a&gt; 是我的一个开源项目，用以探索一种全新的程序比较以及版本控制系统。&lt;/p&gt;
&lt;p&gt;也许我根本不应该给它起名叫“ydiff”，让人感觉它只不过是对 diff 的微小改进。然而，ydiff 跟 diff 是有本质区别的。它们的区别在于，diff 只是对程序进行基于“文本”的对比，它根本不对程序进行 parse。而 ydiff 含有完整的针对程序语言的 parser，在得到了 AST 之后，才对 AST 进行“结构化的比较”。&lt;/p&gt;
&lt;p&gt;这种结构化的程序比较，不但可以避免文件里的“空白字符”引起的肤浅区别，而且可以根据程序的结构，进行更加有意义的对比。比如，ydiff 不会认为字符串 “1000” 和数字 1000 的区别只是多了一对引号。ydiff 在比较函数的时候，首先寻找名字相同的函数，而不只是对相同位置的函数进行无谓的对比。&lt;/p&gt;
&lt;p&gt;ydiff 含有 C++, JavaScript 和 Lisp 的 parser。这些 parser，包括用于支持这些 parser 的库代码，都是我自己完成的。ydiff 不含有任何第三方代码。ydiff 的 parser 技术不依赖于任何第三方工具（比如 ANTLR 或者 YACC）。&lt;/p&gt;
&lt;h3 id=&quot;界面&quot;&gt;&lt;a href=&quot;#界面&quot; class=&quot;headerlink&quot; title=&quot;界面&quot;&gt;&lt;/a&gt;界面&lt;/h3&gt;&lt;p&gt;跟普通 diff 程序的输出不一样，ydiff 生成美观的含有 JavaScript 的 HTML 文件，可以直接使用浏览器浏览，并且可以嵌入其它网页，比如像下面这样：&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;540&quot; src=&quot;http://www.yinwang.org/resources/mk1-mk2.html&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href=&quot;http://www.yinwang.org/resources/mk1-mk2.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;单独浏览&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上面的界面有如下特点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;红色表示“删除”，绿色表示“插入”，白色表示“移动”或者没有变化&lt;/li&gt;
&lt;li&gt;左右窗口同步滚动&lt;/li&gt;
&lt;li&gt;点击白色方框，就可以依据框里的变量进行对齐&lt;/li&gt;
&lt;li&gt;点击之后，左右窗口根据对齐的变量重新“耦合”，同步滚动&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;技术&quot;&gt;&lt;a href=&quot;#技术&quot; class=&quot;headerlink&quot; title=&quot;技术&quot;&gt;&lt;/a&gt;技术&lt;/h3&gt;&lt;p&gt;ydiff 里面含有一些比较独特的技术。&lt;/p&gt;
&lt;h3 id=&quot;强大而简单的-parser-combinator-library&quot;&gt;&lt;a href=&quot;#强大而简单的-parser-combinator-library&quot; class=&quot;headerlink&quot; title=&quot;强大而简单的 parser combinator library&quot;&gt;&lt;/a&gt;强大而简单的 parser combinator library&lt;/h3&gt;&lt;p&gt;一般编译器的 parser 都使用像 YACC 和 ANTLR 一样的 parser generator。这种方法虽然可行，但是它有一个很大的问题，就是你需要使用另外一种语言和另外一个工具，这样就多了一层“语义”。当你的 parser 出了问题的时候，你不能使用已有的编程工具进行调试，而只能依靠这种 parser 工具所提供的信息。这就是为什么人们都觉得 parser 很难写。有一家叫 EDG 的公司，专门销售 C++ 的 parser 代码。你可以由此看出 parser 的技术是多么的复杂和混乱。&lt;/p&gt;
&lt;p&gt;由于这个原因，很多人的 parser 都是自己手写的。可是手写 parser 相当的费事，而且不模块化。所以函数式语言的社区就出现了 Parsec 这样的“parser combinator library”。它的原理是，每一个 parser 都是一个函数，它接受一个字符串，输出一种特定的 AST 结构。比如你可以写出一个很简单的 parser，它只能从字符串里提取一个变量，或者一个数字。由于函数式语言可以把函数作为数据，这种小的 parser 可以被一些叫做 parser combinator 的“高阶函数”作为输入，然后把它们“组合”在一起，形成更大的 parser。当所有这些 parser 组合在一起，它们就可以拥有分析整个程序文本的威力，就像“组合金刚大力神”一样。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/images/devastator_tf2.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;我的 parser 库就是受到了 Parsec 的启发。然而我的库在某种程度上比 parsec 还好用。它不但更加简单灵活，而且能够检测并且报告“左递归”的位置。这是 Parsec 没有的功能。另外，我的 parser 库里面含有很方便的宏，使得写 parser 就像写 BNF 范式一样简单，但却又不需要使用像 YACC 一样的麻烦的工具。&lt;/p&gt;
&lt;p&gt;比如，C++ 函数的 parser 是这样定义的：&lt;br&gt;&lt;figure class=&quot;highlight scheme&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;::=&lt;/span&gt; $function-definition &lt;span class=&quot;symbol&quot;&gt;&#39;function&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     (&lt;span class=&quot;name&quot;&gt;@or&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;@...&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;@?&lt;/span&gt; $modifiers) $type&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                (&lt;span class=&quot;name&quot;&gt;@=&lt;/span&gt; &lt;span class=&quot;symbol&quot;&gt;&#39;name&lt;/span&gt; $identifier ) $formal-parameter-list)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          (&lt;span class=&quot;name&quot;&gt;@...&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;@=&lt;/span&gt; &lt;span class=&quot;symbol&quot;&gt;&#39;name&lt;/span&gt; $identifier ) $formal-parameter-list))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     (&lt;span class=&quot;name&quot;&gt;@?&lt;/span&gt; $initializer)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     $function-body)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在创造了这个库之后，我在一天之内写出了一个 JavaScript 的 parser。两天之后，在这个 JS parser 基础上，又写出了一个 C++ 的 parser。两天之内写出 C++ 的 parser 对于很多人来说都是不可思议的事情，但我没有感觉这有什么难度。大部分的人只不过高估了问题的难度，不然就是把问题复杂化了。&lt;/p&gt;
&lt;p&gt;最后的 C++ parser 只有 600 行代码（不包括空行），而 JS 的 parser 只有 470 行代码。最令人惊奇的事情是，Lisp (S-expression) 的 parser 只有 11 行代码，以至于我可以把它完整的贴在这里：&lt;/p&gt;
&lt;figure class=&quot;highlight scheme&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;::&lt;/span&gt; $open&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     (&lt;span class=&quot;name&quot;&gt;@or&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;@~&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;(&quot;&lt;/span&gt;) (&lt;span class=&quot;name&quot;&gt;@~&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;[&quot;&lt;/span&gt;)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;::&lt;/span&gt; $close&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     (&lt;span class=&quot;name&quot;&gt;@or&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;@~&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;)&quot;&lt;/span&gt;) (&lt;span class=&quot;name&quot;&gt;@~&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;]&quot;&lt;/span&gt;)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;::&lt;/span&gt; $non-parens&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     (&lt;span class=&quot;name&quot;&gt;@and&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;@!&lt;/span&gt; $open) (&lt;span class=&quot;name&quot;&gt;@!&lt;/span&gt; $close)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;::=&lt;/span&gt; $parens &lt;span class=&quot;symbol&quot;&gt;&#39;sexp&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     (&lt;span class=&quot;name&quot;&gt;@seq&lt;/span&gt; $open (&lt;span class=&quot;name&quot;&gt;@*&lt;/span&gt; $sexp) $close))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;::&lt;/span&gt; $sexp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (&lt;span class=&quot;name&quot;&gt;@+&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;@or&lt;/span&gt; $parens $non-parens)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;::&lt;/span&gt; $program $sexp)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;精确的探测“代码移动”&quot;&gt;&lt;a href=&quot;#精确的探测“代码移动”&quot; class=&quot;headerlink&quot; title=&quot;精确的探测“代码移动”&quot;&gt;&lt;/a&gt;精确的探测“代码移动”&lt;/h3&gt;&lt;p&gt;不管你在任何位置剪切了一段代码到另外一个地方，ydiff 都能准确的探测到这个动作。比如在上面的代码里面，你也许发现了函数 unify 的主体被移动到了另一个叫做 unify-good 的函数里面。ydiff 能够精确地显示出这个事实：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/images/unify-ydiff.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;这种对于代码移动的检测，可以让人找到很长时间段内对代码的一切修改。为此我做了一个实验，我用 ydiff 对比了 V8 编译器的一个文件相距两年的变化，得到了直观可读的结果。如果你用普通的 diff 来对比它们，恐怕不会看出很多有用的信息，因为这个文件里的有些函数被切分成了好几个小的“帮助函数”。ydiff 能够准确的找到这些被切分的代码所在的位置。 比如我轻而易举的看到，Shell::Initialize 这个函数被切分成了如下一些函数：&lt;/p&gt;
&lt;figure class=&quot;highlight autohotkey&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;Shell::&lt;/span&gt;Initialize&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;Shell::&lt;/span&gt;CreateGlobalTemplate&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;Shell::&lt;/span&gt;RenewEvaluationContext&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;Shell::&lt;/span&gt;InstallUtilityScript&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你可以在以下的 ydiff 输出中直观的看到这个事实（搜索 Shell::Initialize 然后就可以点击每一行，看它们到什么地方去了）：&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;540&quot; src=&quot;http://www.yinwang.org/resources/d8-3404-d8-8424.html&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;(&lt;a href=&quot;http://www.yinwang.org/resources/d8-3404-d8-8424.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;单独浏览&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;这里有一个可能的改进之处，就是让这种代码移动的现象被更加直接的显示出来，而不需要用户挨个的点击这些代码。&lt;/p&gt;
&lt;h3 id=&quot;未来&quot;&gt;&lt;a href=&quot;#未来&quot; class=&quot;headerlink&quot; title=&quot;未来&quot;&gt;&lt;/a&gt;未来&lt;/h3&gt;&lt;p&gt;ydiff 只是一个开端，我希望由它的启发，形成出一种全新的“版本控制系统”。这种系统将从本质上超越现有的基于文本的版本控制系统。关于这系统的细节，我已经在一篇英文博文中有基本的描述。&lt;/p&gt;
&lt;h3 id=&quot;源代码&quot;&gt;&lt;a href=&quot;#源代码&quot; class=&quot;headerlink&quot; title=&quot;源代码&quot;&gt;&lt;/a&gt;源代码&lt;/h3&gt;&lt;p&gt;ydiff 是完全开源的项目，它可以从我的 GitHub 免费获得。&lt;br&gt;&lt;a href=&quot;https://github.com/yinwang0/ydiff&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/yinwang0/ydiff&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/yinwang0/ydiff&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ydiff&lt;/a&gt; 是我的一个开源项目，用以探索一种全新的程序比较以及版本控制系统。&lt;/p&gt;
&lt;p&gt;也许我根本不应该给它起名
    
    </summary>
    
      <category term="ydiff" scheme="http://yoursite.com/categories/ydiff/"/>
    
    
      <category term="转摘" scheme="http://yoursite.com/tags/%E8%BD%AC%E6%91%98/"/>
    
  </entry>
  
  <entry>
    <title>混合开发笔记</title>
    <link href="http://yoursite.com/2016/03/17/%E6%B7%B7%E5%90%88%E5%BC%80%E5%8F%91/"/>
    <id>http://yoursite.com/2016/03/17/混合开发/</id>
    <published>2016-03-17T02:59:03.000Z</published>
    <updated>2016-03-17T12:40:30.574Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;/images/mixed.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;h5和android的混合开发（前端代码）：&quot;&gt;&lt;a href=&quot;#h5和android的混合开发（前端代码）：&quot; class=&quot;headerlink&quot; title=&quot;h5和android的混合开发（前端代码）：&quot;&gt;&lt;/a&gt;h5和android的混合开发（前端代码）：&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;script type=&lt;span class=&quot;string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  console.log(&quot;我是token：&quot;+req.session.accessToken)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//	var accessToken=&quot;15242ed7d2a359547fb286f5b5cb44274470060b6c694399b023893cb6cbb762d11ca0c3ccfb49f4b03e857389b40da7d333fa48d7f3b8cbc6afee53d707220d&quot;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; jsonObject=&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;userInfo&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;9&quot;&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;accessToken&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;15242ed7d2a359547fb286f5b5cb44274470060b6c694399b023893cb6cbb762d11ca0c3ccfb49f4b03e857389b40da7d333fa48d7f3b8cbc6afee53d707220d&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;syncLogin&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;jsonObject&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/*app native未登录，H5端登录后同步userInfo到native实现自动登录 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		 &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;JsBridge&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//		 	JsBridge.toast(&#39;测试一下而已&#39;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			JsBridge.syncLogin(jsonObject);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		 &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	syncLogin(jsonObject);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;checkNativeLogin&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		JsBridge.checkNativeLogin();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//		var userInfo=JSON.parse(JsBridge.checkNativeLogin());&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; userInfo=JsBridge.checkNativeLogin();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//		JsBridge.toast(userInfo.userInfo.userId);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//		JsBridge.toast(userInfo.userInfo.userId);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	checkNativeLogin();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;h5和object-c的混合开发（前端代码）：&quot;&gt;&lt;a href=&quot;#h5和object-c的混合开发（前端代码）：&quot; class=&quot;headerlink&quot; title=&quot;h5和object-c的混合开发（前端代码）：&quot;&gt;&lt;/a&gt;h5和object-c的混合开发（前端代码）：&lt;/h3&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;http-equiv&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;content-type&quot;&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;content=&quot;text&lt;/span&gt;/&lt;span class=&quot;attr&quot;&gt;html&lt;/span&gt;;&lt;span class=&quot;attr&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;utf-8&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;js调用oc&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text/javaScript&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;/* 调用本地带参数的方法 */&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;testFunction1&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;cmd,parameter1&lt;/span&gt;)&lt;/span&gt;&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.location=&lt;span class=&quot;string&quot;&gt;&quot;objc://&quot;&lt;/span&gt;+cmd+&lt;span class=&quot;string&quot;&gt;&quot;:/&quot;&lt;/span&gt;+parameter1; &lt;span class=&quot;comment&quot;&gt;//cmd代表objective-c中的的方法名，parameter1自然就是参数了  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;/* 调用本地不带参数的方法 */&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;testFunction2&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;cmd&lt;/span&gt;)&lt;/span&gt;&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.location=&lt;span class=&quot;string&quot;&gt;&quot;objc://&quot;&lt;/span&gt;+cmd; &lt;span class=&quot;comment&quot;&gt;//cmd代表objective-c中的的方法名  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text1&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;点击这里1&quot;&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;onclick=&quot;testFunction1(&#39;printLog:&#39;,&#39;str&#39;)&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;调用本地带参数的方法&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text2&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;点击这里2&quot;&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;onclick=&quot;testFunction2(&#39;testFunc&#39;)&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;调用本地不带参数的方法&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/mixed.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;h5和android的混合开发（前端代码）：&quot;&gt;&lt;a href=&quot;#h5和android的混合开发（前端代码）：&quot; class=&quot;headerlink&quot; title=&quot;h5和a
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="混合开发" scheme="http://yoursite.com/tags/%E6%B7%B7%E5%90%88%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>思念的极致·其四</title>
    <link href="http://yoursite.com/2016/03/16/%E6%80%9D%E5%BF%B5%E7%9A%84%E6%9E%81%E8%87%B4%C2%B7%E5%85%B6%E5%9B%9B/"/>
    <id>http://yoursite.com/2016/03/16/思念的极致·其四/</id>
    <published>2016-03-16T13:10:48.000Z</published>
    <updated>2016-03-16T13:19:54.684Z</updated>
    
    <content type="html">&lt;p&gt;有人说，陪伴，是最长情的告白。&lt;/p&gt;
&lt;p&gt;那么我觉得，等待，或许就是最极致的思念了吧。&lt;/p&gt;
&lt;p&gt;前几天我看了部关于思念与等待的动画短片，虽然故事简单，却感人肺腑。看到这题，觉得与主题十分契合，我就来跟大家聊聊这部动画吧。&lt;/p&gt;
&lt;p&gt;片名《父与女》，豆瓣得分9.2分，并获得了第73届奥斯卡金像奖最佳动画短片奖。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic3.zhimg.com/5c53ffb338300d348b6748a4d7fb8ae6_b.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;故事的开头，是一对父女于秋日的傍晚，在林间小路骑着单车。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-5f639aec2abff3fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;他们来到了岸边，父亲将要渡河。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-acec02c3a779a2c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-aa689a1848bcbc1b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;br&gt;似乎预感到了什么，父亲又折了回来，抱起了自己的小女儿。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-a876104527890d8e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;最后，父亲还是乘着小船离开了，只剩女儿呆呆地望着他远去的身影。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-349cec47a237c933.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-02a6b3e51420f094.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;没想到，这一望，就是一辈子。&lt;/p&gt;
&lt;p&gt;父亲再也没有回来。可是女孩依旧每天来到岸边，等待着她的父亲。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-0ce6655e9e3126cb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-99e5eb771c537e9a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;小女孩长大了，成了婷婷而立的少女。她依旧每天来到岸边，父亲的自行车也依旧停靠在树下，就像刚离开时的那样。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-21d667af284a39f6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-991bb578a4d5a28f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;不知道过了多久，父亲的自行车已经消失不见，女孩也长大成了青年。她依旧像小时候那样，每天来到岸边，等待着她的父亲。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-27f4469cdf22d3ea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-20a94aa80ffd47f3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;就算与闺蜜出游，路过的时候，也依旧会驻足。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-804a455435bdcbc5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-4ee11c1afabe6a39.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;不知过了多久，女孩终于找到了心上人。她不再自己一个人骑车，而是由她的男友骑车带着她。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-b154978927f5f2a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;女孩并没有告诉男友关于她父亲的事，他们经过岸边的时候，没有停下来，但她依然会转头瞭望。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-781c5274db830951.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;她结了婚，有了一双儿女。这次，他们一家四口骑车来到河岸边游玩。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-9ff23459efbe6d68.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;丈夫望着河面百无聊赖，儿女在河边嬉戏。而她却伫立在岸上，眺望着远方，就像小时候那样。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-1e2f43d1e7334ce9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-44f09746a2fc2512.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;时光飞梭，女孩再也不年轻了，但却依然会每天来岸边等待父亲。虽然，她知道永远等不到了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-31992e557f986b3c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;也许是时间太久了，她发现，不知道什么时候，河流已经干涸，化为了滩涂。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-6a16dd51f3d28cd5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-2c4c626c058fce82.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;又过了很多年，女孩已经垂垂老矣，老到都骑不了车了。于是她推着自行车，像往常一样，来到岸边。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-29ca5cfe0b3063ca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;她想把自行车停在岸边，可是自行车也老了，甚至都立不起来。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-f0ebdbb4120357b5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-bf9cfe923c3e2259.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;沧海桑田。当初的河流，如今已成了草原。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-7ab50d8deda70516.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;于是，她决定穿过草丛去寻找父亲。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-b3d0bdf69b22d6ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在草丛的中央，她发现了一艘沉船。那正是她父亲的小船。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-f78496c76c44108f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-509e5e81355e4263.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;她缓缓地走过去，抚摸着小船，轻轻地躺在小船里，就像当初躺在父亲的臂弯中一样。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-be5f8656dea9f451.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在生命的最后时刻，她似乎听见了自己父亲的呼唤。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-25f1c256bef0e1b4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;她起身向那前方奔去。她欢快地跑着，越变越年轻，越变越小。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-92d47153616c3350.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-77242f266af9e8b7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-a0b96a5a8c5f7dcf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;终于，她见到了自己的父亲。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-41d99c51dd5232a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;这个等待了一辈子的女孩，终于等到了那个久违的，温暖的怀抱。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-d32c677651cd227a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;影片结束了，但我的心情却久久不能平复。&lt;/p&gt;
&lt;p&gt;虽然很残酷，但我们都知道，女孩最后所见，只是她垂死之时的幻觉。她父亲早在最初就已沉船身亡，她此后一生的等待都是徒劳无功的。&lt;/p&gt;
&lt;p&gt;也许，女孩也深知这一点。但她却选择相信父亲还活着，终有一天会回来。并日复一日，年复一年地去岸边守望。&lt;/p&gt;
&lt;p&gt;影片打动我们的，也正是这种思念的力量。之所以这种力量能够打动我们，是因为我们每个人，一定都有一个一直思念的人。&lt;/p&gt;
&lt;p&gt;此刻远在大洋彼岸求学的我，又何尝不思念父母呢。&lt;/p&gt;
&lt;p&gt;最后，摘录豆瓣的一句精彩短评：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-17c83da7eb7a9c5e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;这，大概就是思念的极致了吧。&lt;/p&gt;
&lt;p&gt;作者：Pein融&lt;br&gt;链接：&lt;a href=&quot;https://www.zhihu.com/question/31914864/answer/88492843&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.zhihu.com/question/31914864/answer/88492843&lt;/a&gt;&lt;br&gt;来源：知乎&lt;br&gt;著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;有人说，陪伴，是最长情的告白。&lt;/p&gt;
&lt;p&gt;那么我觉得，等待，或许就是最极致的思念了吧。&lt;/p&gt;
&lt;p&gt;前几天我看了部关于思念与等待的动画短片，虽然故事简单，却感人肺腑。看到这题，觉得与主题十分契合，我就来跟大家聊聊这部动画吧。&lt;/p&gt;
&lt;p&gt;片名《父与女》，豆瓣得分9.
    
    </summary>
    
      <category term="情感" scheme="http://yoursite.com/categories/%E6%83%85%E6%84%9F/"/>
    
    
      <category term="情感" scheme="http://yoursite.com/tags/%E6%83%85%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>思念的极致·其三</title>
    <link href="http://yoursite.com/2016/03/16/%E6%80%9D%E5%BF%B5%E7%9A%84%E6%9E%81%E8%87%B4%C2%B7%E5%85%B6%E4%B8%89/"/>
    <id>http://yoursite.com/2016/03/16/思念的极致·其三/</id>
    <published>2016-03-16T13:10:15.000Z</published>
    <updated>2016-03-16T13:15:24.250Z</updated>
    
    <content type="html">&lt;p&gt;包子是部门新来的实习生。&lt;/p&gt;
&lt;p&gt;他是个奇怪的人。&lt;/p&gt;
&lt;p&gt;他有两部手机，一部是像模像样的智能机，另一部是过时到收废品的人也不会正眼瞧一眼的板砖诺基亚，样子与下面这张图片很像：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-7d2c5241b94c868b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;工作实习上的电话来往，包子都会用那个正常的智能机。但这部满身划痕的诺基亚，他一直都放在办公桌上，也不见落灰，想必是天天都会拿起来用吧。&lt;/p&gt;
&lt;p&gt;包子和我的工位是紧挨着的，虽然不在同一个项目组，我们还算熟识。&lt;/p&gt;
&lt;p&gt;我从未见过他用这部破手机打过电话，但他似乎对这手机十分爱惜。有一次午休，保洁阿姨进屋打扫，清理到包子的工位时，看到了这部诺基亚，也许是怕被别人顺手牵羊，便把这手机塞到了座位侧边的抽屉里。&lt;/p&gt;
&lt;p&gt;包子吃完午饭回来，只扫了一眼桌面，便发现手机不见了踪影。他顿时急得不知所措，把桌面上堆放整齐的文件扔得到处都是。我指了指抽屉，他猛地拉开，见到手机还在，便长出了一口气，随后抱歉地朝我笑笑。&lt;/p&gt;
&lt;p&gt;说实话，面对一群牛气冲天的客户们介绍自家公司产品时，包子都没这么紧张过。他这样失态，我还是头一次见。&lt;/p&gt;
&lt;p&gt;这手机对他来说，一定意义非凡吧。我这样猜测着。&lt;/p&gt;
&lt;p&gt;一个月之后的某天周五，部门聚餐，有几个人喝得烂醉，还嚷嚷着要去KTV，我们也只好顺着他们。&lt;/p&gt;
&lt;p&gt;我和包子也喝了些酒，在别人鬼哭狼嚎的歌声中，我和他有一搭没一搭地聊着天。&lt;/p&gt;
&lt;p&gt;时间过得很快，已经将近半夜12点了。包子突然想起了什么，从背包中翻出了那部满是划痕的诺基亚，打开短信，熟练地输入一串手机号码，并在短信正文中写上“生日快乐”四个字，点了发送，便把手机紧紧攥住。&lt;/p&gt;
&lt;p&gt;“你女朋友？”我试探性地问道。&lt;/p&gt;
&lt;p&gt;“嗨，别提了，我的初恋，早就分手了。”包子满不在乎地摆摆手，眼睛却时不时瞟向这部残破的手机，似乎期待着回应。&lt;/p&gt;
&lt;p&gt;“你这手机可真是有些年头了啊。”我还不死心，想继续套他的话。&lt;/p&gt;
&lt;p&gt;“可不是嘛，到今天为止，整整8年，一天不多，一天不少，这是她过生日那天我送她的礼物，分手时她还给了我。”他继续攥着那部手机。&lt;/p&gt;
&lt;p&gt;“那你也真够痴情的，都8年了，还放不下。”我由衷佩服他。&lt;/p&gt;
&lt;p&gt;包子挠挠头，很不好意思地笑了笑：“分手时，我和她说，我的手机号永远都不会变，每年我都只在她过生日时给她发条祝福短信。除此之外，我绝不会打扰她的正常生活。”&lt;/p&gt;
&lt;p&gt;我暗地了朝他竖起了大拇指：有分寸，不纠缠，是个好样的。&lt;/p&gt;
&lt;p&gt;“那她有联系过你吗？”&lt;/p&gt;
&lt;p&gt;“从来没有过。”&lt;/p&gt;
&lt;p&gt;说这话时，包子的眼神黯淡了一下，随后又努力装作满不在乎的样子：“也许她连手机号都换了吧，我也只是留个念想，无所谓啦。”&lt;/p&gt;
&lt;p&gt;我一时不知该说些什么好，他轻描淡写的背后，不知隐藏了多少单相思的苦楚。&lt;/p&gt;
&lt;p&gt;我眼前浮现出很多画面，冰雪聪明、温柔淑婉、八面玲珑，抑或是出尘脱俗。总之，以他的形像和气质，能让他魂牵梦绕了8年的人，一定不会是凡夫俗子。&lt;/p&gt;
&lt;p&gt;我知道这样有些失礼，但还是忍不住问了他——&lt;/p&gt;
&lt;p&gt;“那女生一定很漂亮吧？”&lt;/p&gt;
&lt;p&gt;包子盯着手机，一动不动，像一尊石像。&lt;/p&gt;
&lt;p&gt;“我已经记不清她的样子了。”&lt;/p&gt;
&lt;p&gt;即便遗忘了一切，却仍然记得当初的那份执念。也许，这便是思念的极致吧。&lt;/p&gt;
&lt;p&gt;作者：ho Ec&lt;br&gt;链接：&lt;a href=&quot;https://www.zhihu.com/question/31914864/answer/88137759&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.zhihu.com/question/31914864/answer/88137759&lt;/a&gt;&lt;br&gt;来源：知乎&lt;br&gt;著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;包子是部门新来的实习生。&lt;/p&gt;
&lt;p&gt;他是个奇怪的人。&lt;/p&gt;
&lt;p&gt;他有两部手机，一部是像模像样的智能机，另一部是过时到收废品的人也不会正眼瞧一眼的板砖诺基亚，样子与下面这张图片很像：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jian
    
    </summary>
    
      <category term="情感" scheme="http://yoursite.com/categories/%E6%83%85%E6%84%9F/"/>
    
    
      <category term="情感" scheme="http://yoursite.com/tags/%E6%83%85%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>思念的极致·其二</title>
    <link href="http://yoursite.com/2016/03/16/%E6%80%9D%E5%BF%B5%E7%9A%84%E6%9E%81%E8%87%B4%C2%B7%E5%85%B6%E4%BA%8C/"/>
    <id>http://yoursite.com/2016/03/16/思念的极致·其二/</id>
    <published>2016-03-16T13:09:26.000Z</published>
    <updated>2016-03-16T13:14:17.119Z</updated>
    
    <content type="html">&lt;p&gt;近日，论坛中一位网友的发帖引来了无数人泪奔感动。帖子中写到该网友无意中点进了已故5年多的高中同学的QQ空间，却发现自2010年同学不幸离世至今5年多的时间里，同学母亲一直坚持不断地在儿子的QQ空间留言板上留言。&lt;/p&gt;
&lt;p&gt;看着留言板上的字字句句，发帖网友感触颇深，他说简直不敢想象这位母亲是如何度过这5年的日日夜夜。尽管QQ空间的主人已不在，但他的至亲还在深深的思念着他。楼主并没有提供该QQ空间地址，仅仅贴出了几张留言板的截图，众网友看完都心酸不已。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-33f33701bf945a79.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;母亲5年来坚持在已故孩子QQ空间留言 网友泪崩&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-14f6a5f19614cf33.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;母亲5年来坚持在已故孩子QQ空间留言 网友泪崩&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-77510b3a4e3d412d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;母亲5年来坚持在已故孩子QQ空间留言 网友泪崩&quot;&gt;&lt;/p&gt;
&lt;p&gt;从这些或长或短的留言中，母亲貌似坚强地与儿子闲话家常，却又有着忍不住的浓重思念喷薄而出。不少细心的网友发现，该母亲在QQ空间的留言很多都在凌晨时分，不禁心酸泪下，夜深人静的时刻这份伤痛和思念更加明显了吧。网友们感动于伟大的母爱，纷纷跟帖，深深的希望这位坚强的母亲好好保重身体。&lt;/p&gt;
&lt;p&gt;母爱的伟大勾起了很多人心底的思念，另一网友也说起高中同学意外去世后，逝者的姐姐也在帮弟弟维护着他的QQ空间，更新着搜集的照片。直到半年后也许是再也没了新的照片和动态，才以姐姐的口吻发出了最后一条说说：“谢谢大家这么久以来的关心，对不起，我要帮他关闭空间了。”旧日朋友再次泪奔。&lt;/p&gt;
&lt;p&gt;“大家一定要注意身体健康，让亲人放心。”更多为人子女的网友反思着提醒自己，也纷纷下决心说：“回家一定要多陪陪父母，对他们好点。”可怜天下父母心，祝愿天下所有的父母和亲人都平安健康，也希望所有人能珍惜我们生活的每一天。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://news.qq.com/a/20160227/028749.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;来源：→→&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;近日，论坛中一位网友的发帖引来了无数人泪奔感动。帖子中写到该网友无意中点进了已故5年多的高中同学的QQ空间，却发现自2010年同学不幸离世至今5年多的时间里，同学母亲一直坚持不断地在儿子的QQ空间留言板上留言。&lt;/p&gt;
&lt;p&gt;看着留言板上的字字句句，发帖网友感触颇深，他说简
    
    </summary>
    
      <category term="情感" scheme="http://yoursite.com/categories/%E6%83%85%E6%84%9F/"/>
    
    
      <category term="情感" scheme="http://yoursite.com/tags/%E6%83%85%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>思念的极致·其一</title>
    <link href="http://yoursite.com/2016/03/16/%E6%80%9D%E5%BF%B5%E7%9A%84%E6%9E%81%E8%87%B4%C2%B7%E5%85%B6%E4%B8%80/"/>
    <id>http://yoursite.com/2016/03/16/思念的极致·其一/</id>
    <published>2016-03-16T13:08:15.000Z</published>
    <updated>2016-03-16T13:08:23.108Z</updated>
    
    <content type="html">&lt;p&gt;我和朋友昨晚去喝酒，我的朋友腰缠万贯，开着豪车，日入斗金，身边美女不断，却在喝醉了之后蹲在路边的小树下哭的像个傻逼，他哭着说他想他妈，我想把他拉走，他却死死的抱着那棵树不放手，不停的喃喃自语：&lt;/p&gt;
&lt;p&gt;小时候我缠着我妈买玩具，一把玩具手枪要三块钱，我妈没有那么多钱，就哄着我说下次再来买，我不听拿着那把枪大哭大闹不肯走，我妈没办法，只能掏钱把玩具买了。我拿着玩具在前面欢天喜地的走着，从来没想过那是我家买菜种子的钱，我爸回去后问我妈怎么没把种子买回来，我妈就说钱不小心掉了，我爸就把我妈按在地上打了一顿。&lt;/p&gt;
&lt;p&gt;第二天，我看到我妈额头青肿，问我妈是怎么回事，我妈抱着我笑着说：没事儿，妈妈不小心撞到门了。&lt;/p&gt;
&lt;p&gt;我爸是个混蛋，一喝醉就喜欢打人，每次一看到我爸喝醉酒，我妈就连忙把我抱到房里锁上门，然后就听到我爸不停的踹着门，轰轰隆隆，成了我小时候挥之不去的噩梦，我发誓一定要出人头地，带我妈离开这个家。&lt;/p&gt;
&lt;p&gt;我妈没文化，长的也不好看，却是我心目中最好的妈妈，那时候别人都有电视机看，我们家穷买不起，我妈就陪我在外面看星星，给我讲一些小故事，我妈喜欢逗我开心，夏天的时候我妈就拿着竹扇给我驱赶蚊子，我问：为什么人家都有电视看我们没有？&lt;/p&gt;
&lt;p&gt;我妈说：电视机没什么稀奇的，我们没有电视，但整片星空都是我们的啊。&lt;/p&gt;
&lt;p&gt;我抬头一看，漫天星辰都在向我们眨眼睛。&lt;/p&gt;
&lt;p&gt;初中的时候去镇上读书，因为坐不起车，我妈就陪我走到镇上，从早上五点钟一直要走到七点半，冬天的时候又黑又冷，妈妈就紧紧的牵着我，我问：妈妈，你怕不怕？&lt;/p&gt;
&lt;p&gt;妈妈帮我把帽子戴好，笑着说：不怕，妈妈在陪你冒险。&lt;/p&gt;
&lt;p&gt;初二的时候我爸在外面欠了一屁股债，外面的人追债追到家里，我爸跑的不知所踪，所有债主都把矛头指向我妈，男人们倒还有分寸，只是质问我爸去哪了，几个女人怒气冲冲的扯着我妈的头发，不停的打着我妈的脸，我无比愤怒的拿着刀冲出去护着我妈，我浑身发抖的说：&lt;br&gt;别难为我妈，你们要钱就去找我爸，跟我妈没关系。&lt;/p&gt;
&lt;p&gt;一个胖女人说：你家欠钱还有理了？&lt;/p&gt;
&lt;p&gt;说完又要扯我妈的衣服，我吼了一声一刀劈过去，那胖女人一声惨叫，手臂被划出一道口子，她吓得脸色发白，估计没想到我这个小孩真的敢动手，几个男人夺下我的刀，然后搬了家里为数不多的几件家具后就走了。&lt;/p&gt;
&lt;p&gt;他们走后，房间空荡荡的，我们睡觉的床都被搬走了，我和我妈坐在地板上，我的眼泪就涌出来了，妈妈帮我擦眼泪，拍拍我的脸笑着说：儿子，别怕，还有妈妈呢。&lt;/p&gt;
&lt;p&gt;最绝望的时候，都是妈妈给我勇气。&lt;/p&gt;
&lt;p&gt;暑假的时候，妈妈到处去捡垃圾，我就拿着竹竿去钓龙虾，那时候龙虾到处都是，一个下午就能钓十几斤，吃不完的就拿去卖钱，每次提着一篓子龙虾回家的时候我妈都特自豪，夸我真是太厉害了。那个夏天我和我妈都长胖了，有时候去小卖部买雪糕吃，我伸出雪糕让我妈吃一口，她说她不吃，我却又喂到她口里，她就轻轻咬一口皱着眉头说不好吃，然后让我自己吃。我吃完了舔着雪糕棍的时候，我妈就冲着我笑。&lt;/p&gt;
&lt;p&gt;读高中的时候家里付不起学费，我妈就去娘家找舅舅姨娘借钱，我不知道过程有多艰难，但是每次我妈都能帮我把学费凑齐，开学的时候我妈会帮我把书皮包的整整齐齐，她说：儿子，别为学费发愁，缺钱了就跟妈说。&lt;/p&gt;
&lt;p&gt;我的成绩不错，一直都是年级前十名，奖状发了一大堆，家里墙壁根本贴不下，这是我妈最大的财富，只要家里来客人了我妈就指给客人看，无比的开心自豪。每次放假回家，我妈就在村口等我，回去了就给我做好吃的，家务活从来不让我接手，有一次我把家里的地扫干净了，我妈说：儿子，家里的活不用你干，有妈妈呢。&lt;/p&gt;
&lt;p&gt;我说：反正我回来了也没事，就帮您分担下呗。&lt;/p&gt;
&lt;p&gt;她说：没事就多休息多看书，你跟着妈妈没享什么福，不能再让你吃苦。&lt;/p&gt;
&lt;p&gt;其实吃苦也没什么，我觉得我妈太累了，地里的庄稼活就一大堆，还得出去打零工，高二的时候我爸突然回来了，看到我和我妈过的还行，居然没饿死，就开口找我妈要钱，我妈说没钱钱是留着给我上大学的。我爸又一次把拳头打在我妈身上，不管怎么打，我妈都没有给他一分钱。&lt;/p&gt;
&lt;p&gt;我回来后知道了这事，就当着全村人面和我爸打了一架，我爸已经老了，我把他打倒在地，旁边的一老人说：儿子打老爸，小心被雷劈啊。&lt;/p&gt;
&lt;p&gt;我丝毫不为所动，我对地上的那个混蛋冷冷的说：以后你再敢动我妈一根手指头，我就要你的命，我说到做到。&lt;/p&gt;
&lt;p&gt;后来警察来调解，我爸和我妈终于离了婚，那时候我只觉得一种解脱感，我没有一个好父亲，但是我有一个最好的母亲，我要带我妈过好日子。我努力的准备高考，终于去了一个不错的大学，选了个好就业的工作，每个星期五我妈都会走两个小时，就为了给我打一个五分钟的电话，我妈总是说她过的很好要我不用担心。有一个冬天，因为雪太大，我妈走路摔跤了，但还是坚持着走到电话亭给我打电话，就是因为那次，后来我妈的腿就一直有问题，走起路有点跛，但是那次在电话里我一点都没有听出来，我妈开心的说家里有电视了以后我回家就可以看电视了。&lt;/p&gt;
&lt;p&gt;也许是我太过迟钝，我居然没有从电话里听出一丝痛苦。&lt;/p&gt;
&lt;p&gt;毕业后我参加工作，去了离家千里的广州，因为那里工资会高一点，每个月赚的钱都打给我妈，我也没心情谈恋爱，我妈身体已经很不好了，却从来不告诉我，我给她买了个电话，她每次打电话都嘱咐我好好照顾自己快点找个女孩结婚。&lt;/p&gt;
&lt;p&gt;我说：我现在不考虑结婚，我想在城里给您买个房子。&lt;/p&gt;
&lt;p&gt;我妈呵斥我说：胡说，给我买什么房子，快点去谈恋爱结婚，我还想抱孙子呢。&lt;/p&gt;
&lt;p&gt;我不知道我妈为什么那么急切，几个月后我才得知，我妈那时候已经查出了绝症，但是却没让我知道，有一天晚上我陪客户喝酒，我妈给我打电话，她的声音很低沉，她问我在干嘛，我说：我在陪客户。&lt;/p&gt;
&lt;p&gt;我妈说：儿子，你要快点找个好女孩，让妈妈放心。&lt;/p&gt;
&lt;p&gt;我笑着说：您怎么突然变的这么急了？您以前不这样啊。&lt;/p&gt;
&lt;p&gt;我妈轻轻的说：我怕以后没人照顾你了，你以后要多注意身体，要学会自己照顾自己。&lt;/p&gt;
&lt;p&gt;我心里有股不好的预感，我问：您怎么了，是不是出什么事了？&lt;/p&gt;
&lt;p&gt;我妈在电话那边笑了两声，让我稍微安了下心，她说：没事，你少喝点酒，早点回去睡觉，对了，你从小跟着妈妈吃了那么多苦，心里后悔吗？&lt;/p&gt;
&lt;p&gt;我说：不后悔，我只后悔没早点让您过上好日子。&lt;/p&gt;
&lt;p&gt;我妈笑着说：别把自己活的太累了，妈妈以你为荣。&lt;/p&gt;
&lt;p&gt;我怎么也没能想到，这是我妈最后一次和我讲话，三天后，老家的电话打来，我接完电话就倒在地上，当着所有同事的面就崩溃了，火速坐了飞机回去，我妈走的时候骨瘦如柴，头发没一根黑丝，我抽了自己几个大嘴巴子，痛恨自己的后知后觉。&lt;/p&gt;
&lt;p&gt;我的妈妈虽然不漂亮，没有文化，也没什么能力，却总是在我最绝望的时候给我勇气，在生活的最低谷给我信心，让我能坚强热情的活在这世界上，她从来不要求我回报她什么，也从不会成为我的负担，离开世界之前留给我的最后一句话都是妈妈以你为荣。我现在有了钱，也&lt;br&gt;有了房子有了车，有了自己的公司和人脉，如果老天让我做个选择，拿出我所有的东西让我妈再多活一天，我都毫不犹豫的去换，我一定要抱着我妈笑着说一句：妈妈，你是世界上最好的母亲，我才应该以你为荣。&lt;br&gt;可惜，再也不可能了。&lt;/p&gt;
&lt;p&gt;长街上已经没有人了，他估计也醒酒了，他把自己的眼泪擦干净，摇摇晃晃的站起来。&lt;/p&gt;
&lt;p&gt;我说：没事儿吧，我送你回去吧？&lt;/p&gt;
&lt;p&gt;他笑笑说：没事儿，跟你说了那么多，你是不是挺烦的？&lt;/p&gt;
&lt;p&gt;我摇摇头，他抬起头看看天空，然后神色飞扬的说：你看，整片星空都是我的。&lt;/p&gt;
&lt;p&gt;满天星空在眨眼，那一瞬间，他淡然自若，我的眼眶却炙热了起来。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;来源&lt;a href=&quot;https://www.zhihu.com/question/31914864/answer/88571793&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;知乎（作者：Seasee Youl）&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;我和朋友昨晚去喝酒，我的朋友腰缠万贯，开着豪车，日入斗金，身边美女不断，却在喝醉了之后蹲在路边的小树下哭的像个傻逼，他哭着说他想他妈，我想把他拉走，他却死死的抱着那棵树不放手，不停的喃喃自语：&lt;/p&gt;
&lt;p&gt;小时候我缠着我妈买玩具，一把玩具手枪要三块钱，我妈没有那么多钱，就
    
    </summary>
    
      <category term="情感" scheme="http://yoursite.com/categories/%E6%83%85%E6%84%9F/"/>
    
    
      <category term="情感" scheme="http://yoursite.com/tags/%E6%83%85%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>JS判断客户端是否是iOS或者Android</title>
    <link href="http://yoursite.com/2016/03/16/JS%E5%88%A4%E6%96%AD%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%98%AF%E5%90%A6%E6%98%AFiOS%E6%88%96%E8%80%85Android/"/>
    <id>http://yoursite.com/2016/03/16/JS判断客户端是否是iOS或者Android/</id>
    <published>2016-03-16T11:37:19.000Z</published>
    <updated>2016-03-16T13:00:46.744Z</updated>
    
    <content type="html">&lt;p&gt;通过判断浏览器的userAgent，用正则来判断是否是ios和Android客户端。代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;script type=&lt;span class=&quot;string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; u = navigator.userAgent;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; isAndroid = u.indexOf(&lt;span class=&quot;string&quot;&gt;&#39;Android&#39;&lt;/span&gt;) &amp;gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt; || u.indexOf(&lt;span class=&quot;string&quot;&gt;&#39;Adr&#39;&lt;/span&gt;) &amp;gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//android终端&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; isiOS = !!u.match(&lt;span class=&quot;regexp&quot;&gt;/\(i[^;]+;( U;)? CPU.+Mac OS X/&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//ios终端&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(&lt;span class=&quot;string&quot;&gt;&#39;是否是Android：&#39;&lt;/span&gt;+isAndroid);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(&lt;span class=&quot;string&quot;&gt;&#39;是否是iOS：&#39;&lt;/span&gt;+isiOS);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以打开你的Android手机或者iphone扫描看看&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.caibaojian.com/uploads/2014/08/qrcode-7.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;下面一个比较全面的浏览器检查函数，提供更多的检查内容，你可以检查是否是移动端（Mobile）、ipad、iphone、微信、QQ等。&lt;/p&gt;
&lt;p&gt;第一种：来自HTTP://blog.baiwand.com/?post=176&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;script type=&lt;span class=&quot;string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//判断访问终端&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; browser=&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    versions:&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; u = navigator.userAgent, app = navigator.appVersion;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            trident: u.indexOf(&lt;span class=&quot;string&quot;&gt;&#39;Trident&#39;&lt;/span&gt;) &amp;gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;//IE内核&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            presto: u.indexOf(&lt;span class=&quot;string&quot;&gt;&#39;Presto&#39;&lt;/span&gt;) &amp;gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;//opera内核&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            webKit: u.indexOf(&lt;span class=&quot;string&quot;&gt;&#39;AppleWebKit&#39;&lt;/span&gt;) &amp;gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;//苹果、谷歌内核&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            gecko: u.indexOf(&lt;span class=&quot;string&quot;&gt;&#39;Gecko&#39;&lt;/span&gt;) &amp;gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt; &amp;amp;&amp;amp; u.indexOf(&lt;span class=&quot;string&quot;&gt;&#39;KHTML&#39;&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;,&lt;span class=&quot;comment&quot;&gt;//火狐内核&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mobile: !!u.match(&lt;span class=&quot;regexp&quot;&gt;/AppleWebKit.*Mobile.*/&lt;/span&gt;), &lt;span class=&quot;comment&quot;&gt;//是否为移动终端&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ios: !!u.match(&lt;span class=&quot;regexp&quot;&gt;/\(i[^;]+;( U;)? CPU.+Mac OS X/&lt;/span&gt;), &lt;span class=&quot;comment&quot;&gt;//ios终端&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            android: u.indexOf(&lt;span class=&quot;string&quot;&gt;&#39;Android&#39;&lt;/span&gt;) &amp;gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt; || u.indexOf(&lt;span class=&quot;string&quot;&gt;&#39;Adr&#39;&lt;/span&gt;) &amp;gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;//android终端&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            iPhone: u.indexOf(&lt;span class=&quot;string&quot;&gt;&#39;iPhone&#39;&lt;/span&gt;) &amp;gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt; , &lt;span class=&quot;comment&quot;&gt;//是否为iPhone或者QQHD浏览器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            iPad: u.indexOf(&lt;span class=&quot;string&quot;&gt;&#39;iPad&#39;&lt;/span&gt;) &amp;gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;//是否iPad&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            webApp: u.indexOf(&lt;span class=&quot;string&quot;&gt;&#39;Safari&#39;&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;//是否web应该程序，没有头部与底部&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            weixin: u.indexOf(&lt;span class=&quot;string&quot;&gt;&#39;MicroMessenger&#39;&lt;/span&gt;) &amp;gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;//是否微信 （2015-01-22新增）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            qq: u.match(&lt;span class=&quot;regexp&quot;&gt;/\sQQ/i&lt;/span&gt;) == &lt;span class=&quot;string&quot;&gt;&quot; qq&quot;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;//是否QQ&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    language:(navigator.browserLanguage || navigator.language).toLowerCase()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;&lt;span class=&quot;regexp&quot;&gt;/script&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;使用方法：&quot;&gt;&lt;a href=&quot;#使用方法：&quot; class=&quot;headerlink&quot; title=&quot;使用方法：&quot;&gt;&lt;/a&gt;使用方法：&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//判断是否IE内核&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(browser.versions.trident)&amp;#123; alert(&lt;span class=&quot;string&quot;&gt;&quot;is IE&quot;&lt;/span&gt;); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//判断是否webKit内核&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(browser.versions.webKit)&amp;#123; alert(&lt;span class=&quot;string&quot;&gt;&quot;is webKit&quot;&lt;/span&gt;); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//判断是否移动端&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(browser.versions.mobile||browser.versions.android||browser.versions.ios)&amp;#123; alert(&lt;span class=&quot;string&quot;&gt;&quot;移动端&quot;&lt;/span&gt;); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;检测浏览器语言&quot;&gt;&lt;a href=&quot;#检测浏览器语言&quot; class=&quot;headerlink&quot; title=&quot;检测浏览器语言&quot;&gt;&lt;/a&gt;检测浏览器语言&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;currentLang = navigator.language;   &lt;span class=&quot;comment&quot;&gt;//判断除IE外其他浏览器使用语言&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!currentLang)&amp;#123;&lt;span class=&quot;comment&quot;&gt;//判断IE浏览器使用语言&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    currentLang = navigator.browserLanguage;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(currentLang);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;第二种：来自&lt;a href=&quot;http://www.fufuok.com/JS-iphone-android.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.fufuok.com/JS-iphone-android.html&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;regexp&quot;&gt;/(iPhone|iPad|iPod|iOS)/i&lt;/span&gt;.test(navigator.userAgent)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//alert(navigator.userAgent);  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.location.href =&lt;span class=&quot;string&quot;&gt;&quot;iPhone.html&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;regexp&quot;&gt;/(Android)/i&lt;/span&gt;.test(navigator.userAgent)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//alert(navigator.userAgent); &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.location.href =&lt;span class=&quot;string&quot;&gt;&quot;Android.html&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.location.href =&lt;span class=&quot;string&quot;&gt;&quot;pc.html&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;http://caibaojian.com/browser-ios-or-android.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;转自&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;通过判断浏览器的userAgent，用正则来判断是否是ios和Android客户端。代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;
    
    </summary>
    
    
      <category term="检测终端类" scheme="http://yoursite.com/tags/%E6%A3%80%E6%B5%8B%E7%BB%88%E7%AB%AF%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>前端搜集</title>
    <link href="http://yoursite.com/2016/03/16/%E5%89%8D%E7%AB%AF%E6%90%9C%E9%9B%86/"/>
    <id>http://yoursite.com/2016/03/16/前端搜集/</id>
    <published>2016-03-16T06:53:28.000Z</published>
    <updated>2016-03-16T12:59:49.889Z</updated>
    
    <content type="html">&lt;h1 id=&quot;前端收集&quot;&gt;&lt;a href=&quot;#前端收集&quot; class=&quot;headerlink&quot; title=&quot;前端收集&quot;&gt;&lt;/a&gt;前端收集&lt;/h1&gt;&lt;p&gt;在前端路上摸索前行，在这里分享自己长期关注的前端开发相关的优秀网站、博客、以及活跃开发者。欢迎更新，以下各排名不分先后顺序。&lt;/p&gt;
&lt;p&gt;自己 RSS 长期订阅了一些IT 和技术相关博客，这里是我Feedly 输出的opml，可直接导入一些RSS 阅读器:&lt;br&gt;&lt;a href=&quot;https://github.com/foru17/luolei-dotfiles/blob/master/feedly.opml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/foru17/luolei-dotfiles/blob/master/feedly.opml&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;====&lt;/p&gt;
&lt;h4 id=&quot;前端收集图谱&quot;&gt;&lt;a href=&quot;#前端收集图谱&quot; class=&quot;headerlink&quot; title=&quot;前端收集图谱&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://get-set.cn/front-end-collect/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;前端收集图谱&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;此部分为&lt;a href=&quot;https://github.com/jikeytang&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@jikeytang &lt;/a&gt;贡献&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;clone &lt;a href=&quot;https://github.com/hjzheng/front-end-collect&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/hjzheng/front-end-collect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;cd front-end-collect&lt;/li&gt;
&lt;li&gt;bower install&lt;/li&gt;
&lt;li&gt;放入你喜欢的web容器,访问index.html即可&lt;/li&gt;
&lt;li&gt;你也直接可以访问: &lt;a href=&quot;http://get-set.cn/front-end-collect/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://get-set.cn/front-end-collect/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;支持Chrome, Firefox and IE10&amp;amp;11以上浏览器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/hjzheng/front-end-collect/master/img/front-end-chart.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;聚合-amp-amp-周报订阅&quot;&gt;&lt;a href=&quot;#聚合-amp-amp-周报订阅&quot; class=&quot;headerlink&quot; title=&quot;聚合&amp;amp;&amp;amp;周报订阅&quot;&gt;&lt;/a&gt;聚合&amp;amp;&amp;amp;周报订阅&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;订阅地址&lt;/th&gt;
&lt;th&gt;介绍&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;英文推送&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Html5 Weekly&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://html5weekly.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://html5weekly.com/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Html 技术类&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CSS Weekly&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://css-weekly.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://css-weekly.com/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Javascript Weekly&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://javascriptweekly.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://javascriptweekly.com/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;JS相关，同样有 html,css 和工具相关&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Web Design Weekly&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://web-design-weekly.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://web-design-weekly.com/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;设计、技术、技巧、工具聚合&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;UX Weekly&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://uxwkly.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://uxwkly.com/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;用户体验、网页设计推送&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Web Tools Weekly&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://webtoolsweekly.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://webtoolsweekly.com/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Js，工具推送&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RESPONSIVE DESIGN NEWSLETTER&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://responsivedesignweekly.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://responsivedesignweekly.com/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;每周推送一次响应式设计相关&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Tutorialzine&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://tutorialzine.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://tutorialzine.com/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;精品教程和资源推送&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Sidebar&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://sidebar.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://sidebar.io/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;每天、每半周、每周推送5条设计相关&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;The Hacker News Newsletter&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.hackernewsletter.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.hackernewsletter.com/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;HN 每周精选&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Design News&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://news.layervault.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://news.layervault.com/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;F2类资讯聚合&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Css Animations&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://cssanimation.rocks/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://cssanimation.rocks/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;关于CSS动画的订阅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HACKDESIGN&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://hackdesign.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://hackdesign.org/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;每周发布一个设计类课程&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;中文推送&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;稀土:掘金&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://gold.xitu.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://gold.xitu.io/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;国内十分用心的开发者技术分享、交流平台&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SegmentFault精选&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://segmentfault.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://segmentfault.com/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;国内开发者技术问答社区每周精选问答&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FE Weekly&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.feweekly.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.feweekly.com/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;每周一次，内容主要是英文的，不过有中文导读&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EchoJs_News&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.echojs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.echojs.com/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;每天推送若干好文，都是英文的，JS技术类&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;碼天狗週刊&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weekly.codetengu.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://weekly.codetengu.com/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;台湾的，一份開發者導向的IT 技術週刊，適合所有患有資訊焦慮症、氣血循環不順以及性受挫的軟體工程師們。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;前端资源分享 半月刊&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.hacke2.cn/monthly/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.hacke2.cn/monthly/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;每半月发布最新高质量的前端资源&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&quot;专业博客&quot;&gt;&lt;a href=&quot;#专业博客&quot; class=&quot;headerlink&quot; title=&quot;专业博客&quot;&gt;&lt;/a&gt;专业博客&lt;/h4&gt;&lt;p&gt;注:此处&lt;code&gt;活跃度&lt;/code&gt;为博客更新频率，&lt;code&gt;原创度&lt;/code&gt;指的是作者原创或者翻译的文章所占博文比例。请尊重原创，大量转载其他网站资讯的网站和聚合类网站不做推荐。&lt;/p&gt;
&lt;h6 id=&quot;中文博客&quot;&gt;&lt;a href=&quot;#中文博客&quot; class=&quot;headerlink&quot; title=&quot;中文博客&quot;&gt;&lt;/a&gt;中文博客&lt;/h6&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;活跃度&lt;/th&gt;
&lt;th&gt;原创度&lt;/th&gt;
&lt;th&gt;维护者&lt;/th&gt;
&lt;th&gt;其他&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://www.w3cplus.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;W3Cplus&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;★★★★★&lt;/td&gt;
&lt;td&gt;★★★★★&lt;/td&gt;
&lt;td&gt;携程 @大漠&lt;/td&gt;
&lt;td&gt;国内最优秀的前端博客，原创居多&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://www.w3cfuns.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;W3Cfuns&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;★★★★★&lt;/td&gt;
&lt;td&gt;★★★★☆&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.w3cfuns.com/misc.php?mod=faq&amp;amp;action=faq&amp;amp;id=1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;#&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;专注于web前端开发行业的综合性门户网站&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://www.qianduan.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;前端观察&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;★★★★☆&lt;/td&gt;
&lt;td&gt;★★★★☆&lt;/td&gt;
&lt;td&gt;腾讯 ISUX @神飞&lt;/td&gt;
&lt;td&gt;曾经最优秀，最近更新不频繁了&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://www.alloyteam.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;腾讯web前端 AlloyTeam 团队&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;★★★★&lt;/td&gt;
&lt;td&gt;★★★★&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://t.qq.com/AlloyTeam&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@腾讯AlloyTeam&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;来自于腾讯SNG(社交网络事业群)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://www.zhangxinxu.com/wordpress/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;张鑫旭-鑫空间-鑫生活&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;★★★★☆&lt;/td&gt;
&lt;td&gt;★★★★★&lt;/td&gt;
&lt;td&gt;张鑫旭&lt;/td&gt;
&lt;td&gt;重构很厉害，不少经典文章经验&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://www.36ria.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ria之家&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;★★★★☆&lt;/td&gt;
&lt;td&gt;★★★★☆&lt;/td&gt;
&lt;td&gt;淘宝 @明河&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://www.daqianduan.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;大前端&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;★★★★☆&lt;/td&gt;
&lt;td&gt;★★★★☆&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.cssforest.org/blog/index.php?s=about&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;#&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://www.cssforest.org/blog/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CSS森林&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;★★★★☆&lt;/td&gt;
&lt;td&gt;★★★★☆&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.cssforest.org/blog/index.php?s=about&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;关于&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://www.shejidaren.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;设计达人&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;★★★★☆&lt;/td&gt;
&lt;td&gt;★★★☆☆&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.cssforest.org/blog/index.php?s=about&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;#&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;更新较频繁，但转载也较多&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;阮一峰博客&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;★★★★☆&lt;/td&gt;
&lt;td&gt;★★★☆☆&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.ruanyifeng.com/about.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;#&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;牛人一个&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://beforweb.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Be For Web - 为网而生 - 原创译文博客&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;★★★★☆&lt;/td&gt;
&lt;td&gt;★★★★☆&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/c7210&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@C7210&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;关注移动应用及互联网产品、用户体验设计、前端开发&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h6 id=&quot;国外博客&quot;&gt;&lt;a href=&quot;#国外博客&quot; class=&quot;headerlink&quot; title=&quot;国外博客&quot;&gt;&lt;/a&gt;国外博客&lt;/h6&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;活跃度&lt;/th&gt;
&lt;th&gt;原创度&lt;/th&gt;
&lt;th&gt;维护者&lt;/th&gt;
&lt;th&gt;其他&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://www.smashingmagazine.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Smashing Magazine&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;★★★★★&lt;/td&gt;
&lt;td&gt;★★★★★&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;业界权威，web 设计很赞&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://hub.tutsplus.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Tuts&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;★★★★★&lt;/td&gt;
&lt;td&gt;★★★★★&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;国外知名开发者网站&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://www.developerdrive.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DeveloperDrive&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;★★★★★&lt;/td&gt;
&lt;td&gt;★★★★★&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;优质前端技术信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://css-tricks.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CSS-TRICKS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;★★★★★&lt;/td&gt;
&lt;td&gt;★★★★★&lt;/td&gt;
&lt;td&gt;Chris Coyier&lt;/td&gt;
&lt;td&gt;左边这位是大神&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://webdesignerwall.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Web Designer Wall&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;★★★★★&lt;/td&gt;
&lt;td&gt;★★★★★&lt;/td&gt;
&lt;td&gt;Nick La.&lt;/td&gt;
&lt;td&gt;优质 Html5,CSS3等教程&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://tutorialzine.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Tutorialzine&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;★★★★★&lt;/td&gt;
&lt;td&gt;★★★★★&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;大量 web 教程和资源&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://inspectelement.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Inspect Element&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;★★★★★&lt;/td&gt;
&lt;td&gt;★★★★★&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;CSS,wordpress 相关教程挺多&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://tympanus.net/codrops/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Codrops&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;★★★★★&lt;/td&gt;
&lt;td&gt;★★★★★&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;设计、交互、CSS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://www.onerutter.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Jake Rutter&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;★★★★★&lt;/td&gt;
&lt;td&gt;★★★★★&lt;/td&gt;
&lt;td&gt;Jake Rutter&lt;/td&gt;
&lt;td&gt;Jquery 作者，不解释了&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://www.paulirish.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Paul Irish&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;★★★★★&lt;/td&gt;
&lt;td&gt;★★★★★&lt;/td&gt;
&lt;td&gt;Paul Irish&lt;/td&gt;
&lt;td&gt;大神,Google Chrome团队,Yeoman&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://krasimirtsonev.com/blog&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Krasimir Tsonev&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;★★★★★&lt;/td&gt;
&lt;td&gt;★★★★★&lt;/td&gt;
&lt;td&gt;Krasimir Tsonev&lt;/td&gt;
&lt;td&gt;html5,ccs3,javascript&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://www.nczonline.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NCZOnline&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;★★★★★&lt;/td&gt;
&lt;td&gt;★★★★★&lt;/td&gt;
&lt;td&gt;Nicholas C. Zakas&lt;/td&gt;
&lt;td&gt;html5,ccs3,javascript&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://www.html5rocks.com/en/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HTML5 Rocks&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;★★★★★&lt;/td&gt;
&lt;td&gt;★★★★★&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;html5权威网站&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://alistapart.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;A List Apart&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;★★★★★&lt;/td&gt;
&lt;td&gt;★★★★★&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;可以改变世界的文章&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://hakim.se/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hakim&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;★★★★★&lt;/td&gt;
&lt;td&gt;★★★★★&lt;/td&gt;
&lt;td&gt;HAKIM EL HATTAB&lt;/td&gt;
&lt;td&gt;ccs3,javascript&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://dailyjs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DailyJS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;★★★★★&lt;/td&gt;
&lt;td&gt;★★★★★&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;javascript&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5 id=&quot;活跃微博&quot;&gt;&lt;a href=&quot;#活跃微博&quot; class=&quot;headerlink&quot; title=&quot;活跃微博&quot;&gt;&lt;/a&gt;活跃微博&lt;/h5&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ID&lt;/th&gt;
&lt;th&gt;公司&lt;/th&gt;
&lt;th&gt;简介&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/xitucircle&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@稀土圈&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;强烈推荐，分享一些技术文章和Github项目&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/w3cchina&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@w3c中国&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;万维网联盟中国办事处官方微博&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/javascriptdev&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@TheFrontEnd&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;JavaScript技术资讯、新闻、教程、深度文章。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/fekb&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@前端快爆&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;阿里巴巴&lt;/td&gt;
&lt;td&gt;有HTML5、CSS3、JS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://e.weibo.com/html5cn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@HTML5中国&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;中国www.html5cn.org官方微博&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&quot;开发者博客&quot;&gt;&lt;a href=&quot;#开发者博客&quot; class=&quot;headerlink&quot; title=&quot;开发者博客&quot;&gt;&lt;/a&gt;开发者博客&lt;/h4&gt;&lt;p&gt;微博微信流行后，明显感觉到写博客的人还是越来越少了，下面推荐的这些开发者属于在网上比较活跃的，或者博客积累了大量优质资源的。&lt;/p&gt;
&lt;h6 id=&quot;国内开发者&quot;&gt;&lt;a href=&quot;#国内开发者&quot; class=&quot;headerlink&quot; title=&quot;国内开发者&quot;&gt;&lt;/a&gt;国内开发者&lt;/h6&gt;&lt;p&gt;国内开发者一块欢迎大家 &lt;code&gt;Fork&lt;/code&gt;提交推荐，最好能推荐一些在前端界较活跃的的开发者。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ID&lt;/th&gt;
&lt;th&gt;博客&lt;/th&gt;
&lt;th&gt;微博&lt;/th&gt;
&lt;th&gt;Github&lt;/th&gt;
&lt;th&gt;Twitter&lt;/th&gt;
&lt;th&gt;公司&lt;/th&gt;
&lt;th&gt;关键字&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;阮一峰&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;阮一峰博客&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/ruanyf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@ruanyf&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://twitter.com/ruanyf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@ruanyf&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;上海金融学院国际金融学院&lt;/td&gt;
&lt;td&gt;教师，博客写作人，翻译人，《黑客与画家》的译者&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;老赵&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://blog.zhaojie.me/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.zhaojie.me/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/jeffz&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@老赵&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;&quot;&gt;#&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;摩根大通（香港）&lt;/td&gt;
&lt;td&gt;资深码农&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;玉伯&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://lifesinger.wordpress.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;岁月如歌&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/lifesinger&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@玉伯也叫射雕&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/lifesinger&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@lifesinger&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://twitter.com/lifesinger&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@lifesinger&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;支付宝&lt;/td&gt;
&lt;td&gt;大牛&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;kejun&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://hikejun.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://hikejun.com/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/kejunz&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@kejunz&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/kejun&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@kejunz&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;豆瓣&lt;/td&gt;
&lt;td&gt;前端大神&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;寒冬winter&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://winter-cn.cnblogs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;winter-cn&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/wintercn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@寒冬winter&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;左耳朵耗子&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://coolshell.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;酷壳&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/haoel&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@左耳朵耗子&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://twitter.com/haoel&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@haoel&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;淘宝&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fool2fish&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/fool2fish&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@fool2fish&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;支付宝&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;朴灵&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://html5ify.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Html5fiy&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/shyvo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@朴灵&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/JacksonTian&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JacksonTian&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;阿里巴巴&lt;/td&gt;
&lt;td&gt;《深入浅出Node.js》作者,大牛&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Cat Chen&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://catchen.biz/home.zh-CN.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;陈广琛&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/u/1640352230&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@CatChen&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/CatChen&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@CatChen&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://twitter.com/CatChen&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@CatChen&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Facebook&lt;/td&gt;
&lt;td&gt;大牛&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BYVod&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://www.byvoid.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Beyond the Void&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/byvoid&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@BYVoid&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/BYVoid&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@byvoid&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://twitter.com/byvoid&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@BYVoid&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Facebook 英国&lt;/td&gt;
&lt;td&gt;《Node.js 开发指南》作者,大牛&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;郭宇&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://blog.guoyu.me/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Einmal ist keinmal&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/137601206&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@郭宇&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/turingou&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@turingou&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://twitter.com/turingou&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@turingou&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;糗事百科,原支付宝&lt;/td&gt;
&lt;td&gt;Node.js&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;勾三股四&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/mx006&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@勾三股四&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;淘宝&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cnberg&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://cnberg.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;冰山一角&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/berg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@berg&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;@cnberg&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;&quot;&gt;@cnberg&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;百度&lt;/td&gt;
&lt;td&gt;骑行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;大猫&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://bigc.at&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;意淫笔记&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/daemao&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@daemao&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/Damao&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@Damao&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://twitter.com/13igcat&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@13igcat&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;腾讯&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.zhihu.com/people/13igcat&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;知乎&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hzlzh&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://zlz.im&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;自力博客&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/hzlzh&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@hzlzh&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://github.com/hzlzh&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@hzlzh&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://twitter.com/hzlzh&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@hzlzh&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;腾讯&lt;/td&gt;
&lt;td&gt;前端开发&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C7210&lt;/td&gt;
&lt;td&gt;beforweb.com/&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/c7210&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@C7210&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://twittercom/hzlzh&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@C7210&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://github.com/hzlzh&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@C7210&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;UX、交互设计师、视觉与前端&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;kejun&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://hikejun.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://hikejun.com/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/kejun&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;#&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://twittercom/kejun&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;#&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://github.com/hzlzh&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;#&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;腾讯&lt;/td&gt;
&lt;td&gt;前端开发&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;张鑫旭&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.zhangxinxu.com/wordpress/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;张鑫旭博客&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/zhangxinxu&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@张鑫旭&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/zhangxinxu&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@zhangxinxu&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://twitter.com/zhangxinxu&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@zhangxinxu&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;腾讯 上海 ISUX&lt;/td&gt;
&lt;td&gt;前端开发&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;lucifr&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://lucifr.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://lucifr.com/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/lucifr&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@lucifr&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://twittercom/lucifr&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@lucifr&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://github.com/lucifr&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@lucifr&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;Mac,ios&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;smallni&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.smallni.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.smallni.com/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/hzlzh&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;#&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://twitter.com/smallniding/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@Smallni&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://github.com/hzlzh&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;#&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;腾讯&lt;/td&gt;
&lt;td&gt;前端开发&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TQ&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://targetkiller.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://targetkiller.net/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/targetkiller&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@Piser-TQ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://twitter.com/tqtan/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@tqtan&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/targetkiller&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@targetkiller&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;腾讯 ISUX&lt;/td&gt;
&lt;td&gt;网页重构&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LOO2K&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://loo2k.com/blog/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;LOO2K&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/loo2k&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@LOO2K&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/loo2k&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;LOO2K&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://twitter.com/loo2k/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;LOO2K&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;墨筹网&lt;/td&gt;
&lt;td&gt;少年才俊&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;qiqiboy&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.qiqiboy.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;qiqiboy&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/qiqiboy&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@qiqiboy&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;金山网络 UX&lt;/td&gt;
&lt;td&gt;吐槽清理大师开发者&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;foru17&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://luolei.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;罗磊的独立博客&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/foru17&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@罗罗磊磊&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/foru17&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@foru17&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://twitter.com/foru17&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@foru17&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;打酱油的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;周爱民&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://blog.csdn.net/aimingoo/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;aimingoo专栏&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;支付宝&lt;/td&gt;
&lt;td&gt;JavaScript语言精髓与编程实践作者&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hax&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://hax.iteye.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hax的技术部落格&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;前端大牛&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;三生石上&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.cnblogs.com/sanshi&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;三生石上&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;js秘密花园译者&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;司徒正美&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.cnblogs.com/rubylouvre&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ruby’s Louvre&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;前端开发&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;叶小钗&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.cnblogs.com/yexiaochai&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;叶小钗&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;前端开发&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;聂微东&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.cnblogs.com/Darren_code/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Darren&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;百度移动云&lt;/td&gt;
&lt;td&gt;前端开发&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;当耐特&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.cnblogs.com/iamzhanglei/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iamzhanglei&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;HTML5实验室作者&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;教主&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.cnblogs.com/_franky&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;_frank&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;又一牛&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;typeof&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://typeof.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;typeof&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;又一牛&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Gray Zhang&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.cnblogs.com/GrayZhang&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gray Zhang&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;百度一牛&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;李松峰&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.cn-cuckoo.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;为之漫笔&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;高程2等书的译者&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;小鱼&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://sofish.de/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;sofish&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/sofish&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@sofish&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;饿了么前端Leader&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vilic&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://vilic.info/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;vilic&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;年轻一牛&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;彬Go&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://blog.bingo929.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;彬Go&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;人人网一牛&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PuterJam&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.pjhome.net&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PuterJam’s Blog&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;腾讯一牛&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;css森林&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.cssforest.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;cssforest&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;前端博客&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;99css&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.99css.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;99css&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/ytzong&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@ytzong&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;腾讯一牛&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;秦歌&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://dancewithnet.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Kaven&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://twitter.com/kavenyan&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@kavenyan&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;js语言精粹译者&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;linxz&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.linxz.de/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;linxz&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;css那些事儿的作者&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;米随随&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://s5s5.me/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;米随随&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;腾讯ISUX 一牛&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;飘飘&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://pufen.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;飘飘&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;腾讯一牛&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Along&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://jinlong.github.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Along’s Blog&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/newwave&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@newwave&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;Opera 欧朋一牛&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;安记&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.cssha.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;cssha&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/hanan321&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@hanan321&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/hanan198501&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hanan198501&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;去哪网一牛&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;余弦&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://evilcos.me/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;EVILCOS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/evilcos&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;余弦&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/evilcos&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;evilcos&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.knownsec.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;知道创宇&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;安全（黑客）、架构、团队的各种观点与分享&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://dbanotes.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;冯大辉&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;现在就职于丁香园 (&lt;a href=&quot;http://dxy.cn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://dxy.cn&lt;/a&gt;) ，担任技术团队负责人.&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;汤姆大叔&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.cnblogs.com/TomXu/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;汤姆大叔的博客&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;《深入理解Bootstrap》、《JavaScript启示录》、《JavaScript设计模式》等多本前端书籍翻译作者&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;屈光宇&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://imququ.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Jerry Qu的小站&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/jerryqu&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;屈光宇&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;奇虎360前端，对WEB性能研究很深入&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&quot;一些社区&quot;&gt;&lt;a href=&quot;#一些社区&quot; class=&quot;headerlink&quot; title=&quot;一些社区&quot;&gt;&lt;/a&gt;一些社区&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;地址&lt;/th&gt;
&lt;th&gt;介绍&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;V2EX&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://v2ex.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://v2ex.com/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;小众活跃社区&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;知乎&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.zhihu.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.zhihu.com/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;综合问答社区&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;前端乱炖&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.html-js.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.html-js.com/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;专业的前端知识平台&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;segmentfault&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://segmentfault.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://segmentfault.com/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;综合问答社区&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;果壳问答&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.guokr.com/ask/pending/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.guokr.com/ask/pending/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;综合问答社区&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ruby&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://ruby-china.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://ruby-china.org/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;同 V2EX 氛围类似，不局限于Ruby&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Node.js 中文社区&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://cnodejs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://cnodejs.org/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Node.js 国内最活跃的社区&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Code Wall&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://coderwall.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://coderwall.com/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;国外技术社区&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;前端乱炖&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.html-js.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.html-js.com/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;国内前端技术社区&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DIV.IO&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://div.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://div.io/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;国内前端技术社区&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;w3ctech&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.w3ctech.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.w3ctech.com/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;国内前端技术社区，常有一些线下活动发布&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5 id=&quot;企业官方博客&quot;&gt;&lt;a href=&quot;#企业官方博客&quot; class=&quot;headerlink&quot; title=&quot;企业官方博客&quot;&gt;&lt;/a&gt;企业官方博客&lt;/h5&gt;&lt;p&gt;在开头我的 Feedly 订阅 opml 文件里比较全面。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;公司&lt;/th&gt;
&lt;th&gt;部门&lt;/th&gt;
&lt;th&gt;活跃度&lt;/th&gt;
&lt;th&gt;简介&lt;/th&gt;
&lt;th&gt;微博&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://isux.tencent.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ISUX 社交用户体验设计&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;腾讯&lt;/td&gt;
&lt;td&gt;ISUX&lt;/td&gt;
&lt;td&gt;★★★★☆&lt;/td&gt;
&lt;td&gt;负责腾讯的社交网络相关产品的用户体验设计与研究。&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://cdc.tencent.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;腾讯 CDC&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;腾讯&lt;/td&gt;
&lt;td&gt;CDC&lt;/td&gt;
&lt;td&gt;★★★★☆&lt;/td&gt;
&lt;td&gt;简介&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://www.alloyteam.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;腾讯Web前端 Alloy 团队 Blog&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;腾讯&lt;/td&gt;
&lt;td&gt;SNG&lt;/td&gt;
&lt;td&gt;★★★★☆&lt;/td&gt;
&lt;td&gt;主要负责手机QQ、QQ互联、腾讯Q+、WebQQ项目的团队。&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/alloyteam&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;alloyteam&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://tid.tenpay.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TID-财付通设计中心&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;腾讯&lt;/td&gt;
&lt;td&gt;TID&lt;/td&gt;
&lt;td&gt;★★★★☆&lt;/td&gt;
&lt;td&gt;简介&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://mxd.tencent.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;腾讯MXD移动互联网设计中心&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;腾讯&lt;/td&gt;
&lt;td&gt;MXD&lt;/td&gt;
&lt;td&gt;★★★★☆&lt;/td&gt;
&lt;td&gt;简介&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://e.t.qq.com/tencent_mxd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@腾讯MXD&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://fed.renren.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;人人网FED Team&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;人人网&lt;/td&gt;
&lt;td&gt;FED&lt;/td&gt;
&lt;td&gt;★★★★☆&lt;/td&gt;
&lt;td&gt;简介&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://udc.weibo.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;微博UDC&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;新浪&lt;/td&gt;
&lt;td&gt;UDC&lt;/td&gt;
&lt;td&gt;★★★★☆&lt;/td&gt;
&lt;td&gt;简介&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/sudc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@微博UDC设计中心&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://ued.sina.com.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;新浪UED&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;新浪&lt;/td&gt;
&lt;td&gt;UED&lt;/td&gt;
&lt;td&gt;★★★★☆&lt;/td&gt;
&lt;td&gt;简介&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/sudc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;#&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://uedc.163.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;网易用户体验设计中心&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;网易&lt;/td&gt;
&lt;td&gt;UED&lt;/td&gt;
&lt;td&gt;★★★★☆&lt;/td&gt;
&lt;td&gt;简介&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/sudc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;#&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://www.aliued.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;阿里巴巴（中国站）用户体验设计部博客&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;阿里巴巴&lt;/td&gt;
&lt;td&gt;UED&lt;/td&gt;
&lt;td&gt;★★★★☆&lt;/td&gt;
&lt;td&gt;简介&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/aliued&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@Alibaba-UED&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://ued.ctrip.com/blog/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;携程UED-携程旅行前端开发团队&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;携程网&lt;/td&gt;
&lt;td&gt;UED&lt;/td&gt;
&lt;td&gt;★★★☆☆&lt;/td&gt;
&lt;td&gt;携程UED,携程前端开发团队,UED,Javascript,重构,ux&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://fex.baidu.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;百度FEX&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;百度&lt;/td&gt;
&lt;td&gt;FEX&lt;/td&gt;
&lt;td&gt;★★★★☆&lt;/td&gt;
&lt;td&gt;百度前端团队Blog,关注前端技术，还更重视全端及全栈的能力。&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://ued.taobao.org/blog/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;淘宝UED&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;淘宝网&lt;/td&gt;
&lt;td&gt;UED&lt;/td&gt;
&lt;td&gt;★★★★☆&lt;/td&gt;
&lt;td&gt;用户体验、交互设计、视觉设计、前端技术博客&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/taobaoued&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@淘宝UED&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;书籍&quot;&gt;&lt;a href=&quot;#书籍&quot; class=&quot;headerlink&quot; title=&quot;书籍&quot;&gt;&lt;/a&gt;书籍&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;作者&lt;/th&gt;
&lt;th&gt;价格&lt;/th&gt;
&lt;th&gt;出版社&lt;/th&gt;
&lt;th&gt;简评&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://book.douban.com/subject/3327829/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Web标准设计&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;刘杰（嗷嗷）&lt;/td&gt;
&lt;td&gt;RMB 60.00&lt;/td&gt;
&lt;td&gt;清华大学出版社&lt;/td&gt;
&lt;td&gt;基础入门&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://book.douban.com/subject/4914146/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;大巧不工 : Web前端设计修炼之道&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;赖定清 / 林坚&lt;/td&gt;
&lt;td&gt;RMB 59.00&lt;/td&gt;
&lt;td&gt;机械工业出版社&lt;/td&gt;
&lt;td&gt;适合入门，了解前端全局&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://book.douban.com/subject/3132277/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;高性能网站建设指南:前端工程师技能精髓&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Steve Souders&lt;/td&gt;
&lt;td&gt;RMB 35.00&lt;/td&gt;
&lt;td&gt;电子工业出版社&lt;/td&gt;
&lt;td&gt;能从原理层理解各种方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://book.douban.com/subject/4719162/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;高性能网站建设指南:Web开发者性能优化最佳实践&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Steve Souders&lt;/td&gt;
&lt;td&gt;RMB 49.80&lt;/td&gt;
&lt;td&gt;电子工业出版社&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://book.douban.com/subject/4124141/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Web站点优化 : Web站点优化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;金&lt;/td&gt;
&lt;td&gt;RMB 55.00&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://book.douban.com/subject/10789820/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Node.js开发指南&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;郭家寶&lt;/td&gt;
&lt;td&gt;RMB 45.00&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;作者很牛&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://book.douban.com/subject/10546125/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript高级程序设计&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Nicholas C. Zakas&lt;/td&gt;
&lt;td&gt;RMB 99.00&lt;/td&gt;
&lt;td&gt;人民邮电出版社&lt;/td&gt;
&lt;td&gt;适合没事就翻翻&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://book.douban.com/subject/2228378/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript权威指南&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;弗拉纳根&lt;/td&gt;
&lt;td&gt;RMB 109.00&lt;/td&gt;
&lt;td&gt;机械工业出版社&lt;/td&gt;
&lt;td&gt;犀牛书&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://book.douban.com/subject/3590768/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript语言精粹&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Douglas Crockford&lt;/td&gt;
&lt;td&gt;RMB 35.00&lt;/td&gt;
&lt;td&gt;电子工业出版社&lt;/td&gt;
&lt;td&gt;绝对经典，相信看完后，对Javascript这门语言有了重新认识，原来这个语言是这么的美丽！&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://book.douban.com/subject/25768396/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深入浅出node.js&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;朴灵&lt;/td&gt;
&lt;td&gt;RMB 69.00&lt;/td&gt;
&lt;td&gt;人民邮电出版社&lt;/td&gt;
&lt;td&gt;一本从前端通往全端的好书&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://book.douban.com/subject/3137282/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CSS开发王&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;张亚飞&lt;/td&gt;
&lt;td&gt;RMB 49.00&lt;/td&gt;
&lt;td&gt;电子工业出版社&lt;/td&gt;
&lt;td&gt;适合有一定基础后CSS进阶用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://book.douban.com/subject/6038371/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript DOM编程艺术&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Jeremy Keith /Jeffrey Sambells&lt;/td&gt;
&lt;td&gt;RMB 49.00&lt;/td&gt;
&lt;td&gt;人民邮电出版社&lt;/td&gt;
&lt;td&gt;适合Javascript入门看&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;=======&lt;/p&gt;
&lt;h4 id=&quot;线上的一些翻译版好书&quot;&gt;&lt;a href=&quot;#线上的一些翻译版好书&quot; class=&quot;headerlink&quot; title=&quot;线上的一些翻译版好书&quot;&gt;&lt;/a&gt;线上的一些翻译版好书&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;书名&lt;/th&gt;
&lt;th&gt;地址&lt;/th&gt;
&lt;th&gt;作者&lt;/th&gt;
&lt;th&gt;译者&lt;/th&gt;
&lt;th&gt;介绍&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;JavaScript秘密花园&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://bonsaiden.github.io/JavaScript-Garden/zh/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://bonsaiden.github.io/JavaScript-Garden/zh/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;伊沃·韦特泽尔&amp;amp;张易江&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://sanshi.me/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;三生石上&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;完整书籍，界面美观，有详细demo&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Material Design 中文版&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://design.1sters.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://design.1sters.com/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Google设计手册&lt;/td&gt;
&lt;td&gt;协同翻译&lt;/td&gt;
&lt;td&gt;Google I/O 2014 发布的 Material Design 官方手册的中文翻译&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;关于&quot;&gt;&lt;a href=&quot;#关于&quot; class=&quot;headerlink&quot; title=&quot;关于&quot;&gt;&lt;/a&gt;关于&lt;/h2&gt;&lt;p&gt;======&lt;/p&gt;
&lt;p&gt;本 repo 会 不断更新，感谢推荐和分享新资源的朋友。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前端收集&quot;&gt;&lt;a href=&quot;#前端收集&quot; class=&quot;headerlink&quot; title=&quot;前端收集&quot;&gt;&lt;/a&gt;前端收集&lt;/h1&gt;&lt;p&gt;在前端路上摸索前行，在这里分享自己长期关注的前端开发相关的优秀网站、博客、以及活跃开发者。欢迎更新，以下各排名不分先后顺序。
    
    </summary>
    
      <category term="前端搜集" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E6%90%9C%E9%9B%86/"/>
    
    
      <category term="前端搜集" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E6%90%9C%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>前端开发知识结构</title>
    <link href="http://yoursite.com/2016/03/16/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86%E7%BB%93%E6%9E%84/"/>
    <id>http://yoursite.com/2016/03/16/前端开发知识结构/</id>
    <published>2016-03-16T03:42:12.000Z</published>
    <updated>2016-03-16T03:42:33.191Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Frontend-Knowledge-Structure&quot;&gt;&lt;a href=&quot;#Frontend-Knowledge-Structure&quot; class=&quot;headerlink&quot; title=&quot;Frontend Knowledge Structure&quot;&gt;&lt;/a&gt;Frontend Knowledge Structure&lt;/h1&gt;&lt;h2 id=&quot;项目起源&quot;&gt;&lt;a href=&quot;#项目起源&quot; class=&quot;headerlink&quot; title=&quot;项目起源&quot;&gt;&lt;/a&gt;项目起源&lt;/h2&gt;&lt;p&gt;还记得@jayli 的这幅前端知识结构图么。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.github.com/JacksonTian/fks/master/figures/fks.jpg&quot; alt=&quot;前端知识结构&quot;&gt;&lt;/p&gt;
&lt;p&gt;图片的形式具有诸多的不便。缺失源图的我们，无法为此图贡献些什么，随着时间的迁移，或许有些技术点会发生改变，所以有了这个GitHub项目。我们可以通过协作的方式来共同维护这个项目。Git的历史记录也可以见证前端行业的一些变迁。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://html5ify.com/fks/fks_chart/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;可视化效果&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;前端开发知识结构&quot;&gt;&lt;a href=&quot;#前端开发知识结构&quot; class=&quot;headerlink&quot; title=&quot;前端开发知识结构&quot;&gt;&lt;/a&gt;前端开发知识结构&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;前端工程师&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;浏览器&lt;ul&gt;
&lt;li&gt;IE6/&lt;a href=&quot;http://www.microsoft.com/en-us/download/internet-explorer-7-details.aspx&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;7&lt;/a&gt;/&lt;a href=&quot;http://windows.microsoft.com/en-US/internet-explorer/downloads/ie-8&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;8&lt;/a&gt;/&lt;a href=&quot;http://windows.microsoft.com/en-US/internet-explorer/downloads/ie-9/worldwide-languages&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;9&lt;/a&gt;/&lt;a href=&quot;http://windows.microsoft.com/en-US/internet-explorer/ie-10-worldwide-languages&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;10&lt;/a&gt;/&lt;a href=&quot;http://windows.microsoft.com/en-US/internet-explorer/ie-11-worldwide-languages&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;11&lt;/a&gt; (Trident)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.mozilla.org/en-US/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Firefox&lt;/a&gt; (Gecko)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.google.com/chrome&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Chrome&lt;/a&gt;/&lt;a href=&quot;http://www.chromium.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Chromium&lt;/a&gt; (Blink)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.apple.com/safari/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Safari&lt;/a&gt; (WebKit)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.opera.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Opera&lt;/a&gt; (Blink)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;编程语言&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/JavaScript&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript&lt;/a&gt;/&lt;a href=&quot;http://nodejs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Node.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://coffeescript.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CoffeeScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.typescriptlang.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TypeScript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;切页面&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.w3.org/html/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HTML&lt;/a&gt;/&lt;a href=&quot;http://www.w3.org/TR/html5/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HTML5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.w3.org/Style/CSS/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CSS/CSS3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://sass-lang.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Sass&lt;/a&gt;/&lt;a href=&quot;http://lesscss.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;LESS&lt;/a&gt;/&lt;a href=&quot;http://learnboost.github.io/stylus/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Stylus&lt;/a&gt;/&lt;a href=&quot;https://github.com/postcss/postcss&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;postCSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.photoshop.com/products/photoshop&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PhotoShop&lt;/a&gt;/&lt;a href=&quot;http://www.getpaint.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Paint.net&lt;/a&gt;/&lt;a href=&quot;http://www.adobe.com/cn/products/fireworks.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Fireworks&lt;/a&gt;/&lt;a href=&quot;http://www.gimp.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GIMP&lt;/a&gt;/&lt;a href=&quot;http://bohemiancoding.com/sketch/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Sketch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;开发工具&lt;ul&gt;
&lt;li&gt;编辑器和IDE&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.vim.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;VIM&lt;/a&gt;/&lt;a href=&quot;http://www.sublimetext.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Sublime Text2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://notepad-plus-plus.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Notepad++&lt;/a&gt;/&lt;a href=&quot;http://www.editplus.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;EditPlus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jetbrains.com/webstorm/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WebStorm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.gnu.org/software/emacs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Emacs&lt;/a&gt;  &lt;a href=&quot;http://emacswiki.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;EmacsWiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://brackets.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Brackets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://atom.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Atom&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://limetext.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Lime Text&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://lighttable.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Light Table&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.codebox.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Codebox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://macromates.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TextMate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://neovim.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Neovim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.activestate.com/komodo-edit&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Komodo IDE / Edit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.eclipse.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Eclipse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.visualstudio.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Visual Studio&lt;/a&gt;/&lt;a href=&quot;https://code.visualstudio.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Visual Studio Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://netbeans.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NetBeans&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://c9.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cloud9 IDE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.dcloud.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HBuilder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://nuclide.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Nuclide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;调试工具&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://getfirebug.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Firebug&lt;/a&gt;/&lt;a href=&quot;https://addons.mozilla.org/en-US/firefox/addon/firecookie/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Firecookie&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://developer.yahoo.com/yslow/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;YSlow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.microsoft.com/en-us/download/details.aspx?id=18359&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;IEDeveloperToolbar&lt;/a&gt;/&lt;a href=&quot;http://www.my-debugbar.com/wiki/IETester/HomePage&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;IETester&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.fiddler2.com/fiddler2/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Fiddler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.chrome.com/devtools&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Chrome Dev Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.opera.com/dragonfly/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dragonfly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.debugbar.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DebugBar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Venkman&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Venkman&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;版本管理&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://git-scm.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Git&lt;/a&gt;/&lt;a href=&quot;http://subversion.apache.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SVN&lt;/a&gt;/&lt;a href=&quot;http://mercurial.selenic.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mercurial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Github&lt;/a&gt;/&lt;a href=&quot;https://about.gitlab.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitLab&lt;/a&gt;/&lt;a href=&quot;https://bitbucket.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bitbucket&lt;/a&gt;/&lt;a href=&quot;https://gitorious.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gitorious&lt;/a&gt;/&lt;a href=&quot;http://savannah.gnu.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GNU Savannah&lt;/a&gt;/&lt;a href=&quot;https://launchpad.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Launchpad&lt;/a&gt;/&lt;a href=&quot;http://sourceforge.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SourceForge&lt;/a&gt;/&lt;a href=&quot;http://www.collab.net/products/teamforge&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TeamForge&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;代码质量&lt;ul&gt;
&lt;li&gt;Coding style&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jslint.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JSLint&lt;/a&gt;/&lt;a href=&quot;http://www.jshint.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JSHint&lt;/a&gt;/&lt;a href=&quot;https://github.com/mdevils/node-jscs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jscs&lt;/a&gt;/&lt;a href=&quot;https://github.com/eslint/eslint&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ESLint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://csslint.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CSSLint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://validator.w3.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Markup Validation Service&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://validator.whatwg.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HTML Validators&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;单元测试&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://qunitjs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;QUnit&lt;/a&gt;/&lt;a href=&quot;http://jasmine.github.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Jasmine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://mochajs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mocha&lt;/a&gt;/&lt;a href=&quot;https://github.com/visionmedia/should.js/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Should&lt;/a&gt;/&lt;a href=&quot;http://chaijs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Chai&lt;/a&gt;/&lt;a href=&quot;https://github.com/LearnBoost/expect.js/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Expect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://unitjs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Unit JS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;自动化测试&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.seleniumhq.org/docs/03_webdriver.jsp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WebDriver&lt;/a&gt;/&lt;a href=&quot;https://github.com/angular/protractor&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Protractor&lt;/a&gt;/&lt;a href=&quot;https://github.com/karma-runner/karma&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Karma Runner&lt;/a&gt;/&lt;a href=&quot;http://sahi.co.in/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Sahi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://phantomjs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;phantomjs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://saucelabs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SourceLabs&lt;/a&gt;/&lt;a href=&quot;http://www.browserstack.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;BrowserStack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;前端库/框架&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://jquery.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jQuery&lt;/a&gt;/&lt;a href=&quot;http://underscorejs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Underscore&lt;/a&gt;/&lt;a href=&quot;http://mootools.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mootools&lt;/a&gt;/&lt;a href=&quot;http://www.prototypejs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Prototype.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://yuilibrary.com/projects/yui3/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;YUI3&lt;/a&gt;/&lt;a href=&quot;http://dojotoolkit.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dojo&lt;/a&gt;/&lt;a href=&quot;http://www.sencha.com/products/extjs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ExtJS&lt;/a&gt;/&lt;a href=&quot;http://docs.kissyui.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;KISSY&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://backbonejs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Backbone&lt;/a&gt;/&lt;a href=&quot;http://knockoutjs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;KnockoutJS&lt;/a&gt;/&lt;a href=&quot;http://emberjs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Emberjs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://angularjs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AngularJS&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/angularjs-batarang/ighdmehidhipcmcojjgiloacoafjmpfk&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Batarang&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://getbootstrap.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bootstrap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.semantic-ui.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Semantic UI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://juiceui.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Juice UI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://webatomsjs.neurospeech.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Web Atoms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.polymerchina.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Polymer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://dhtmlx.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dhtmlx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://qooxdoo.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;qooxdoo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://facebook.github.io/react/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://mozbrick.github.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Brick&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://cn.vuejs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;vue.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;前端标准/规范&lt;ul&gt;
&lt;li&gt;HTTP/1.1: RFCs 7230-7235&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://http2.github.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HTTP/2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ecma-international.org/publications/standards/Ecma-262.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ECMAScript3/5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ECMAScript6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.w3.org/TR/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;W3C: DOM/BOM/XHTML/XML/JSON/JSONP/…&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://wiki.commonjs.org/wiki/Modules/1.0&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CommonJS Modules&lt;/a&gt;/&lt;a href=&quot;https://github.com/amdjs/amdjs-api/wiki/AMD&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AMD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.w3.org/html/wg/drafts/html/master/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HTML5&lt;/a&gt;/&lt;a href=&quot;http://www.w3.org/Style/CSS/specs.en.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CSS3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://semanticweb.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Semantic Web&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://schema.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MicroData&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.w3.org/TR/rdfa-core/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RDFa&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.w3.org/WAI/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Web Accessibility&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.w3.org/TR/WAI-WEBCONTENT/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WCAG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.w3.org/TR/role-attribute/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Role Attribute&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.w3.org/TR/wai-aria/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WAI-ARIA&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;性能&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://jsperf.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JSPerf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://developer.yahoo.com/performance/rules.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;YSlow 35 rules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developers.google.com/speed/pagespeed/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PageSpeed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.httpwatch.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HTTPWatch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.compuware.com/application-performance-management/dynatrace-ajax-download.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DynaTrace’s Ajax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/5362856/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;高性能JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SEO&lt;/li&gt;
&lt;li&gt;编程知识储备&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;数据结构&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;OOP/AOP&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://net.tutsplus.com/tutorials/javascript-ajax/prototypes-in-javascript-what-you-need-to-know/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原型链&lt;/a&gt;/作用域链&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jibbering.com/faq/notes/closures/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;闭包&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://zh.wikipedia.org/wiki/%E7%BC%96%E7%A8%8B%E8%8C%83%E5%9E%8B&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;编程范型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://addyosmani.com/resources/essentialjsdesignpatterns/book/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;设计模式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://sanshi.me/articles/JavaScript-Garden-CN/html/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Javascript Tips&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;部署流程&lt;ul&gt;
&lt;li&gt;压缩合并&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://developer.yahoo.com/yui/compressor/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;YUI Compressor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developers.google.com/closure/compiler/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Google Clousure Complier&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mishoo/UglifyJS&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;UglifyJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/GoalSmashers/clean-css&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CleanCSS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;文档输出&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jsdoc3/jsdoc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JSDoc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/visionmedia/dox&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dox&lt;/a&gt;/&lt;a href=&quot;https://github.com/JacksonTian/doxmate&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Doxmate&lt;/a&gt;/&lt;a href=&quot;https://github.com/luozhihua/grunt-doxmate&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Grunt-Doxmate&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;项目构建工具&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.gnu.org/software/make/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;make&lt;/a&gt;/&lt;a href=&quot;http://ant.apache.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://code.google.com/p/gyp/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GYP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://gruntjs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Grunt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://gulpjs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gulp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://yeoman.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Yeoman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://fis.baidu.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FIS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/modulejs/modjs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mod&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;代码组织&lt;ul&gt;
&lt;li&gt;类库模块化&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.commonjs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CommonJS&lt;/a&gt;/AMD&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://yuilibrary.com/projects/yui3/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;YUI3模块&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://webpack.github.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;webpack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;业务逻辑模块化&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/twitter/bower&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;bower&lt;/a&gt;/&lt;a href=&quot;https://github.com/component/component&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;component&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;文件加载&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://labjs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;LABjs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://seajs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SeaJS&lt;/a&gt;/&lt;a href=&quot;http://requirejs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Require.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;模块化预处理器&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/substack/node-browserify&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Browserify&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;安全&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Cross-site_request_forgery&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CSRF&lt;/a&gt;/&lt;a href=&quot;http://en.wikipedia.org/wiki/Cross-site_scripting&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;XSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.w3.org/TR/CSP/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CSP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/Security/Same-origin_policy&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Same-origin policy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ADsafe/Caja/Sandbox&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;移动Web&lt;ul&gt;
&lt;li&gt;HTML5/CSS3&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://zh.wikipedia.org/wiki/%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;响应式网页设计&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://zeptojs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Zeptojs&lt;/a&gt;/&lt;a href=&quot;http://cubiq.org/iscroll&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iScroll&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;V5/&lt;a href=&quot;http://www.sencha.com/products/touch&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Sencha Touch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://phonegap.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PhoneGap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jquerymobile.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jQuery Mobile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.w3.org/Mobile/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;W3C Mobile Web Initiative&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://validator.w3.org/mobile/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;W3C mobileOK Checker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://openmobilealliance.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Open Mobile Alliance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://facebook.github.io/react-native/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React Native&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;前沿技术社区/会议&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://d2forum.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;D2&lt;/a&gt;/&lt;a href=&quot;http://www.webrebuild.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WebRebuild&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;NodeParty/&lt;a href=&quot;http://w3ctech.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;W3CTech&lt;/a&gt;/&lt;a href=&quot;http://www.html5dw.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HTML5梦工厂&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jsconf.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JSConf&lt;/a&gt;/&lt;a href=&quot;http://jsconf.cn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;沪JS(JSConf.cn)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;QCon/Velocity/SDCC&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jsconf.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JSConf&lt;/a&gt;/&lt;a href=&quot;http://www.nodeconf.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NodeConf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://cssconf.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CSSConf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;YDN/YUIConf&lt;/li&gt;
&lt;li&gt;HybridApp&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://whatwg.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WHATWG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://codepen.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;codepen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.w3cplus.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;w3cplus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cnodejs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CNode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;计算机知识储备&lt;ul&gt;
&lt;li&gt;编译原理&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;计算机网络&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://zh.wikipedia.org/wiki/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;操作系统&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;算法原理&lt;/li&gt;
&lt;li&gt;软件工程/软件测试原理&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.unicode.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Unicode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;软技能&lt;ul&gt;
&lt;li&gt;知识管理/总结分享&lt;/li&gt;
&lt;li&gt;沟通技巧/团队协作&lt;/li&gt;
&lt;li&gt;需求管理/PM&lt;/li&gt;
&lt;li&gt;交互设计/可用性/可访问性知识&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可视化&lt;ul&gt;
&lt;li&gt;SVG/Canvas/VML&lt;/li&gt;
&lt;li&gt;SVG: &lt;a href=&quot;http://d3js.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;D3&lt;/a&gt;/&lt;a href=&quot;http://raphaeljs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Raphaël&lt;/a&gt;/&lt;a href=&quot;http://snapsvg.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Snap.svg&lt;/a&gt;/&lt;a href=&quot;http://datavlab.org/datavjs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DataV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Canvas: &lt;a href=&quot;http://www.createjs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CreateJS&lt;/a&gt;/&lt;a href=&quot;http://kineticjs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;KineticJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/WebGL&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WebGL&lt;/a&gt;/&lt;a href=&quot;http://threejs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Three.JS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;后端工程师&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编程语言&lt;ul&gt;
&lt;li&gt;C/C++/Java/PHP/Ruby/Python/…&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;网页服务器&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://nginx.org/en/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Nginx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://httpd.apache.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Apache&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.lighttpd.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Lighttpd&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;数据库&lt;ul&gt;
&lt;li&gt;SQL&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.mysql.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MySQL&lt;/a&gt;/&lt;a href=&quot;http://www.postgresql.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PostgreSQL&lt;/a&gt;/&lt;a href=&quot;http://www.oracle.com/us/products/database/overview/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Oracle&lt;/a&gt;/&lt;a href=&quot;http://www-01.ibm.com/software/data/db2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DB2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.mongodb.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MongoDB&lt;/a&gt;/&lt;a href=&quot;http://couchdb.apache.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CouchDB&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;数据缓存&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://redis.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Redis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://memcached.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Memcached&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;文件缓存/代理&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.varnish-cache.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Varnish&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.squid-cache.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Squid&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;操作系统&lt;ul&gt;
&lt;li&gt;Unix/Linux/OS X/Windows&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;数据结构&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;前端书籍推荐&quot;&gt;&lt;a href=&quot;#前端书籍推荐&quot; class=&quot;headerlink&quot; title=&quot;前端书籍推荐&quot;&gt;&lt;/a&gt;前端书籍推荐&lt;/h2&gt;&lt;p&gt;★越少越简单,越适合入门,★多的要么是难度比较高,要么是比较适合在后面看,比如讲性能之类的书.&lt;/p&gt;
&lt;h3 id=&quot;CSS&quot;&gt;&lt;a href=&quot;#CSS&quot; class=&quot;headerlink&quot; title=&quot;CSS&quot;&gt;&lt;/a&gt;CSS&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.amazon.cn/Eric-Meyer-谈-CSS-迈耶/dp/B00170M84I/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Eric Meyer 谈 CSS（卷二）&lt;/a&gt;★★★&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/2308234/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CSS权威指南 （第3版）&lt;/a&gt;★★&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/4736167/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;精通CSS&lt;/a&gt;★★★&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/21338365/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HTML &amp;amp; CSS设计与构建网站&lt;/a&gt;★&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;JavaScript&quot;&gt;&lt;a href=&quot;#JavaScript&quot; class=&quot;headerlink&quot; title=&quot;JavaScript&quot;&gt;&lt;/a&gt;JavaScript&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/26433805/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript &amp;amp; jQuery交互式Web前端开发&lt;/a&gt;★&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/6038371/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript DOM编程艺术 （第2版）&lt;/a&gt;★&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/10546125/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript高级程序设计（第3版）&lt;/a&gt;★★&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/10792216/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;锋利的jQuery&lt;/a&gt;★★&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/5362856/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;高性能JavaScript&lt;/a&gt;★★★&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/3590768/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript语言精粹&lt;/a&gt;★★★&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/10549733/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript权威指南&lt;/a&gt;★★★&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/21792530/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;编写可维护的JavaScript&lt;/a&gt;★★★&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/3012828/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JAVASCRIPT语言精髓与编程实践&lt;/a&gt;★★★&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Effective-JavaScript-Specific-Software-Development/dp/0321812182&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Effective Javascript&lt;/a&gt;★★★&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/3176860/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Secrets of the JavaScript Ninja&lt;/a&gt;★★★&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/11506062/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript模式&lt;/a&gt;★★★&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/3329540/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript设计模式&lt;/a&gt;★★★★&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/10733304/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;基于MVC的JavaScript Web富应用开发&lt;/a&gt;★★★&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;性能实践&quot;&gt;&lt;a href=&quot;#性能实践&quot; class=&quot;headerlink&quot; title=&quot;性能实践&quot;&gt;&lt;/a&gt;性能实践&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/25891125/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Web性能实践日志&lt;/a&gt;★★★&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/25856314/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Web性能权威指南&lt;/a&gt;★★★&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;版本控制工具&quot;&gt;&lt;a href=&quot;#版本控制工具&quot; class=&quot;headerlink&quot; title=&quot;版本控制工具&quot;&gt;&lt;/a&gt;版本控制工具&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/4813786/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;版本控制之道 (git)&lt;/a&gt;★★&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://iissnan.com/progit/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Pro Git&lt;/a&gt;★★★&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/6526452/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Git权威指南&lt;/a&gt;★★★★&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;后端书籍推荐&quot;&gt;&lt;a href=&quot;#后端书籍推荐&quot; class=&quot;headerlink&quot; title=&quot;后端书籍推荐&quot;&gt;&lt;/a&gt;后端书籍推荐&lt;/h2&gt;&lt;h3 id=&quot;Linux管理&quot;&gt;&lt;a href=&quot;#Linux管理&quot; class=&quot;headerlink&quot; title=&quot;Linux管理&quot;&gt;&lt;/a&gt;Linux管理&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/3042029/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Linux 系统管理技术手册&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/4889838/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;鸟哥的 Linux 私房菜&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.thegeekstuff.com/linux-101-hacks-free-ebook-non-english/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Linux 101 Hacks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/3519360/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;UNIX Shell Scripting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/6806862/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Linux Command Line&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://oreilly.com/openbook/linag2/book/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Linux Network Administrator’s Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Linux编程&quot;&gt;&lt;a href=&quot;#Linux编程&quot; class=&quot;headerlink&quot; title=&quot;Linux编程&quot;&gt;&lt;/a&gt;Linux编程&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/4831448/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Linux程序设计&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/3907181/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Linux系统编程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/1788421/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Unix环境高级编程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/1467587/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Unix编程艺术&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/4292217/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Linux Programming Interface&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/3652388/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;程序员的自我修养&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/2287506/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深入理解Linux内核&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/1500149/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Unix网络编程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/1088054/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TCP/IP高级编程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;C-C&quot;&gt;&lt;a href=&quot;#C-C&quot; class=&quot;headerlink&quot; title=&quot;C/C++&quot;&gt;&lt;/a&gt;C/C++&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/4141733/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Linux C编程一站式学习&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/3012360/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;C和指针&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/2778632/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;C陷阱与缺陷&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/2377310/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;C专家编程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/2226913/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;C语言核心技术&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.google.com/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=1&amp;amp;ved=0CDEQFjAA&amp;amp;url=http%3A%2F%2Fblogimg.chinaunix.net%2Fblog%2Fupfile2%2F110210170023.pdf&amp;amp;ei=P95mUfrmNKKriALS04HAAw&amp;amp;usg=AFQjCNEzB88PnpfL0fRgJDkP3O9TlBPswA&amp;amp;sig2=isyd4ktsByNBMa5M9EPhRQ&amp;amp;bvm=bv.45107431,d.cGE&amp;amp;cad=rjt&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;彻底搞定C指针&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/21317828/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;征服C指针&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/1094797/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;C++编程思想&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/2116929/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;高质量程序设计指南—C/C++语言&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/1484262/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Inside the C++ Object Model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.stroustrup.com/Tour.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;A Tour of C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/The_C%2B%2B_Programming_Language&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The C++ Programming Language&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cppstdlib.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The C++ Standard Library - A Tutorial and Reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://webstore.ansi.org/RecordDetail.aspx?sku=INCITS%2fISO%2fIEC+14882-2012&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The C++ Standard (INCITS/ISO/IEC 14882-2011)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.artima.com/shop/overview_of_the_new_cpp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Overview of the New C++&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;前端工作面试&quot;&gt;&lt;a href=&quot;#前端工作面试&quot; class=&quot;headerlink&quot; title=&quot;前端工作面试&quot;&gt;&lt;/a&gt;前端工作面试&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/darcyclarke/Front-end-Developer-Interview-Questions&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;前端工作面试问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/markyun/My-blog/tree/master/Front-end-Developer-Questions/Question&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;前端开发面试题（中文）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;内容贡献者&quot;&gt;&lt;a href=&quot;#内容贡献者&quot; class=&quot;headerlink&quot; title=&quot;内容贡献者&quot;&gt;&lt;/a&gt;内容贡献者&lt;/h2&gt;&lt;p&gt;除了感谢Jayli提供了知识结构图的原本来，还感谢以下的内容贡献者们，结果由&lt;code&gt;git-summary&lt;/code&gt;生成于2014-01-03：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;project&lt;/span&gt;  : &lt;span class=&quot;selector-tag&quot;&gt;fks&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;repo&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;age&lt;/span&gt; : 1 &lt;span class=&quot;selector-tag&quot;&gt;year&lt;/span&gt;, 3 &lt;span class=&quot;selector-tag&quot;&gt;months&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;active&lt;/span&gt;   : 53 &lt;span class=&quot;selector-tag&quot;&gt;days&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;commits&lt;/span&gt;  : 108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;files&lt;/span&gt;    : 4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;authors&lt;/span&gt;  :&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   56  &lt;span class=&quot;selector-tag&quot;&gt;Jackson&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;Tian&lt;/span&gt;            51&lt;span class=&quot;selector-class&quot;&gt;.9&lt;/span&gt;%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    9  吴晓兰               8&lt;span class=&quot;selector-class&quot;&gt;.3&lt;/span&gt;%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    5  &lt;span class=&quot;selector-tag&quot;&gt;liyinkan&lt;/span&gt;                4&lt;span class=&quot;selector-class&quot;&gt;.6&lt;/span&gt;%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    3  &lt;span class=&quot;selector-tag&quot;&gt;chriscai&lt;/span&gt;                2&lt;span class=&quot;selector-class&quot;&gt;.8&lt;/span&gt;%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    3  &lt;span class=&quot;selector-tag&quot;&gt;fengxiaolong&lt;/span&gt;            2&lt;span class=&quot;selector-class&quot;&gt;.8&lt;/span&gt;%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    3  &lt;span class=&quot;selector-tag&quot;&gt;XiNGRZ&lt;/span&gt;                  2&lt;span class=&quot;selector-class&quot;&gt;.8&lt;/span&gt;%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    2  &lt;span class=&quot;selector-tag&quot;&gt;monkadd&lt;/span&gt;                 1&lt;span class=&quot;selector-class&quot;&gt;.9&lt;/span&gt;%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    2  &lt;span class=&quot;selector-tag&quot;&gt;Johnny&lt;/span&gt;                  1&lt;span class=&quot;selector-class&quot;&gt;.9&lt;/span&gt;%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    2  &lt;span class=&quot;selector-tag&quot;&gt;weiwenqing&lt;/span&gt;              1&lt;span class=&quot;selector-class&quot;&gt;.9&lt;/span&gt;%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    2  &lt;span class=&quot;selector-tag&quot;&gt;Yinkan&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;Li&lt;/span&gt;               1&lt;span class=&quot;selector-class&quot;&gt;.9&lt;/span&gt;%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    2  &lt;span class=&quot;selector-tag&quot;&gt;Copypeng&lt;/span&gt;                1&lt;span class=&quot;selector-class&quot;&gt;.9&lt;/span&gt;%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    2  左岸                  1&lt;span class=&quot;selector-class&quot;&gt;.9&lt;/span&gt;%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    2  &lt;span class=&quot;selector-tag&quot;&gt;Jakukyo&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;Friel&lt;/span&gt;           1&lt;span class=&quot;selector-class&quot;&gt;.9&lt;/span&gt;%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    2  &lt;span class=&quot;selector-tag&quot;&gt;Glowin&lt;/span&gt;                  1&lt;span class=&quot;selector-class&quot;&gt;.9&lt;/span&gt;%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    1  李亚川               0&lt;span class=&quot;selector-class&quot;&gt;.9&lt;/span&gt;%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    1  &lt;span class=&quot;selector-tag&quot;&gt;Evan&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;You&lt;/span&gt;                0&lt;span class=&quot;selector-class&quot;&gt;.9&lt;/span&gt;%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    1  &lt;span class=&quot;selector-tag&quot;&gt;Mickey&lt;/span&gt;                  0&lt;span class=&quot;selector-class&quot;&gt;.9&lt;/span&gt;%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    1  &lt;span class=&quot;selector-tag&quot;&gt;Mickey-&lt;/span&gt;                 0&lt;span class=&quot;selector-class&quot;&gt;.9&lt;/span&gt;%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    1  &lt;span class=&quot;selector-tag&quot;&gt;Qi&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;Junyuan&lt;/span&gt;              0&lt;span class=&quot;selector-class&quot;&gt;.9&lt;/span&gt;%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    1  &lt;span class=&quot;selector-tag&quot;&gt;browsnet&lt;/span&gt;                0&lt;span class=&quot;selector-class&quot;&gt;.9&lt;/span&gt;%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    1  &lt;span class=&quot;selector-tag&quot;&gt;doabit&lt;/span&gt;                  0&lt;span class=&quot;selector-class&quot;&gt;.9&lt;/span&gt;%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    1  &lt;span class=&quot;selector-tag&quot;&gt;guoxiangyang&lt;/span&gt;            0&lt;span class=&quot;selector-class&quot;&gt;.9&lt;/span&gt;%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    1  &lt;span class=&quot;selector-tag&quot;&gt;linkgod&lt;/span&gt;                 0&lt;span class=&quot;selector-class&quot;&gt;.9&lt;/span&gt;%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    1  &lt;span class=&quot;selector-tag&quot;&gt;popomore&lt;/span&gt;                0&lt;span class=&quot;selector-class&quot;&gt;.9&lt;/span&gt;%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    1  &lt;span class=&quot;selector-tag&quot;&gt;vipzhicheng&lt;/span&gt;             0&lt;span class=&quot;selector-class&quot;&gt;.9&lt;/span&gt;%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    1  &lt;span class=&quot;selector-tag&quot;&gt;zhaqiang&lt;/span&gt;                0&lt;span class=&quot;selector-class&quot;&gt;.9&lt;/span&gt;%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    1  &lt;span class=&quot;selector-tag&quot;&gt;Colin&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;Luo&lt;/span&gt;               0&lt;span class=&quot;selector-class&quot;&gt;.9&lt;/span&gt;%&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Frontend-Knowledge-Structure&quot;&gt;&lt;a href=&quot;#Frontend-Knowledge-Structure&quot; class=&quot;headerlink&quot; title=&quot;Frontend Knowledge Structure&quot;&gt;&lt;/a&gt;Fr
    
    </summary>
    
      <category term="前端知识结构" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>快速排序（Quicksort）的Javascript实现</title>
    <link href="http://yoursite.com/2016/03/16/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%EF%BC%88Quicksort%EF%BC%89%E7%9A%84Javascript%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2016/03/16/快速排序（Quicksort）的Javascript实现/</id>
    <published>2016-03-15T16:51:02.000Z</published>
    <updated>2016-03-16T02:55:06.989Z</updated>
    
    <content type="html">&lt;p&gt;日本程序员norahiko，写了一个排序算法的&lt;a href=&quot;http://jsdo.it/norahiko/oxIy/fullscreen&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;动画演示&lt;/a&gt;，非常有趣。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Sorting_algorithm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;排序算法&lt;/a&gt;（Sorting algorithm）是计算机科学最古老、最基本的课题之一。要想成为合格的程序员，就必须理解和掌握各种排序算法。&lt;br&gt;目前，最常见的排序算法大概有七八种，其中&lt;a href=&quot;http://en.wikipedia.org/wiki/Quicksort&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;“快速排序”&lt;/a&gt;（Quicksort）使用得最广泛，速度也较快。它是图灵奖得主C. A. R. Hoare（1934–）于1960时提出来的。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://jsdo.it/norahiko/oxIy/fullscreen&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt; &lt;img src=&quot;http://image.beekka.com/blog/201104/bg2011040401_0.png&quot; alt=&quot;&quot;&gt; &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.beekka.com/blog/201104/bg2011040402.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;“快速排序”的思想很简单，整个排序过程只需要三步：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在数据集之中，选择一个元素作为”基准”（pivot）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;所有小于”基准”的元素，都移到”基准”的左边；所有大于”基准”的元素，都移到”基准”的右边。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对”基准”左边和右边的两个子集，不断重复第一步和第二步，直到所有子集只剩下一个元素为止。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;举例来说，现在有一个数据集{85, 24, 63, 45, 17, 31, 96, 50}，怎么对其排序呢？&lt;/p&gt;
&lt;p&gt;第一步，选择中间的元素45作为”基准”。（基准值可以任意选择，但是选择中间的值比较容易理解。）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.beekka.com/blog/201104/bg2011040403.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;第二步，按照顺序，将每个元素与”基准”进行比较，形成两个子集，一个”小于45”，另一个”大于等于45”。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.beekka.com/blog/201104/bg2011040404.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;第三步，对两个子集不断重复第一步和第二步，直到所有子集只剩下一个元素为止。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.beekka.com/blog/201104/bg2011040405.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.beekka.com/blog/201104/bg2011040406.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.beekka.com/blog/201104/bg2011040407.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.beekka.com/blog/201104/bg2011040408.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;下面参照网上的资料（&lt;a href=&quot;http://acatalept.com/blog/2008/10/28/stable-quicksort-in-javascript/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;和&lt;a href=&quot;http://www.stoimen.com/blog/2010/06/11/friday-algorithms-quicksort-difference-between-php-and-javascript/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;），用Javascript语言实现上面的算法。&lt;/p&gt;
&lt;p&gt;首先，定义一个quickSort函数，它的参数是一个数组。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; quickSort = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;arr&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后，检查数组的元素个数，如果小于等于1，就返回。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; quickSort = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;arr&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (arr.length &amp;lt;= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; arr; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接着，选择”基准”（pivot），并将其与原数组分离，再定义两个空数组，用来存放一左一右的两个子集。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; quickSort = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;arr&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (arr.length &amp;lt;= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; arr; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; pivotIndex = &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.floor(arr.length / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) ;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; pivot = arr.splice(pivotIndex, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; left = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; right = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后，开始遍历数组，小于”基准”的元素放入左边的子集，大于基准的元素放入右边的子集。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; quickSort = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;arr&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (arr.length &amp;lt;= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; arr; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; pivotIndex = &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.floor(arr.length / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) ;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; pivot = arr.splice(pivotIndex, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; left = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; right = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; arr.length; i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　　　&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (arr[i] &amp;lt; pivot) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　　　　　left.push(arr[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　　　&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　　　　　right.push(arr[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　　　&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后，使用递归不断重复这个过程，就可以得到排序后的数组。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; quickSort = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;arr&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (arr.length &amp;lt;= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; arr; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; pivotIndex = &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.floor(arr.length / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; pivot = arr.splice(pivotIndex, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; left = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; right = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; arr.length; i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　　　&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (arr[i] &amp;lt; pivot) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　　　　　left.push(arr[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　　　&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　　　　　right.push(arr[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　　　&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; quickSort(left).concat([pivot], quickSort(right));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用的时候，直接调用quickSort()就行了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.beekka.com/blog/201104/bg2011040409.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;（完）&lt;br&gt;END &lt;a href=&quot;http://www.ruanyifeng.com/blog/2011/04/quicksort_in_javascript.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;摘自&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;日本程序员norahiko，写了一个排序算法的&lt;a href=&quot;http://jsdo.it/norahiko/oxIy/fullscreen&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;动画演示&lt;/a&gt;，非常有趣。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;ht
    
    </summary>
    
      <category term="排序法" scheme="http://yoursite.com/categories/%E6%8E%92%E5%BA%8F%E6%B3%95/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>怎样写一个解释器</title>
    <link href="http://yoursite.com/2016/03/15/%E6%80%8E%E6%A0%B7%E5%86%99%E4%B8%80%E4%B8%AA%E8%A7%A3%E9%87%8A%E5%99%A8/"/>
    <id>http://yoursite.com/2016/03/15/怎样写一个解释器/</id>
    <published>2016-03-15T11:14:30.000Z</published>
    <updated>2016-03-15T16:00:00.141Z</updated>
    
    <content type="html">&lt;h1 id=&quot;怎样写一个解释器&quot;&gt;&lt;a href=&quot;#怎样写一个解释器&quot; class=&quot;headerlink&quot; title=&quot;怎样写一个解释器&quot;&gt;&lt;/a&gt;怎样写一个解释器&lt;/h1&gt;&lt;p&gt;这是一篇解释器的入门教程。虽然我试图从最基本的原理讲起，尽量让这篇文章不依赖于其它知识，但是这篇教程并不是针对编程的入门知识，所以我假设你已经学会了最基本的 Scheme 和函数式编程。我不是很推崇函数式编程，但它里面确实包含了很重要的一些方法。如果你完全不了解这些，可以读一下 SICP 的第一，二章（或者接下去读 The Little Schemer)。当然你也可以继续读这篇文章，有不懂的地方再去查资料。我在这里也会讲递归和模式匹配的原理。如果你已经了解这些东西，这里的内容也许可以加深你的理解。&lt;/p&gt;
&lt;p&gt;解释器是一种简单却又深奥的东西，以至于好多人都不会写，或者自认为会写却又不真正的会写。在这个领域里有一些历史遗留下来的误解，以至于很少有人真正的知道如何写出正确的解释器。很多“语言专家”或者“逻辑学家”的解释器代码里面有各种各样的错误，却又以谬传谬，搞得无比复杂。这误解的渊源之深，真是一言难尽。&lt;/p&gt;
&lt;p&gt;你必须从最简单的语言开始，逐步增加语言的复杂度，才能构造出正确的解释器。这篇文章就是告诉你如何写出一个最简单的语言 (lambda calculus) 的解释器，并且带有基本的的算术功能，可以作为一个高级计算器来使用。&lt;/p&gt;
&lt;p&gt;一般的程序语言课程往往从语法分析(parsing)开始，折腾 lex 和 yacc 等麻烦却不中用的工具，解决一些根本不需要存在的问题。Parsing 的作用其实只是把字符串解码成程序的语法树（AST）结构。麻烦好久得到了 AST 之后，真正的困难才开始！而很多人在写完 parser 之后就已经倒下了。鉴于这个原因，这里我用所谓的“S-expression”来表示程序的语法树（AST）结构。S-expression （加上 Lisp 对它发自“本能”的处理能力）让我们可以直接跳过 parse 的步骤，进入关键的主题：语义(semantics)。&lt;/p&gt;
&lt;p&gt;这里用的 Scheme 实现是 Racket。为了让程序简洁，我使用了 Racket 的模式匹配（pattern matching）。我对 Racket 没有特别的好感。但它安装比较方便，而且是免费的。如果你用其它的 Scheme 实现的话，恐怕要自己做一些调整。&lt;/p&gt;
&lt;h1 id=&quot;解释器是什么&quot;&gt;&lt;a href=&quot;#解释器是什么&quot; class=&quot;headerlink&quot; title=&quot;解释器是什么&quot;&gt;&lt;/a&gt;解释器是什么&lt;/h1&gt;&lt;p&gt;首先我们来谈一下解释器是什么。说白了解释器跟计算器差不多。它们都接受一个“表达式”，输出一个 “结果”。比如，得到 ‘(+ 1 2) 之后就输出 3。不过解释器的表达式要比计算器的表达式复杂一些。解释器接受的表达式叫做“程序”，而不只是简单的算术表达式。从本质上讲，每个程序都是一台机器的“描述”，而解释器就是在“模拟”这台机器的运转，也就是在进行“计算”。所以从某种意义上讲，解释器就是计算的本质。当然，不同的解释器就会带来不同的计算。&lt;/p&gt;
&lt;p&gt;需要注意的是，我们的解释器接受的参数是一个表达式的“数据结构”，而不是一个字符串。这里我们用一种叫“S-expression”的数据结构来表示表达式。比如表达式 ‘(+ 1 2) 里面的内容是三个符号：’+, ‘1 和 ‘2，而不是字符串“(+ 1 2)”。从结构化的数据里面提取信息很方便，而从字符串里提取信息很麻烦，而且容易出错。&lt;/p&gt;
&lt;p&gt;从广义上讲，解释器是一个通用的概念。计算器实际上是解释器的一种形式，只不过它处理的语言比程序的解释器简单很多。也许你会发现，CPU 和人脑，从本质上来讲也是解释器，因为解释器的本质实际上是“任何用于处理语言的机器”。&lt;/p&gt;
&lt;h1 id=&quot;递归定义-recursive-definition&quot;&gt;&lt;a href=&quot;#递归定义-recursive-definition&quot; class=&quot;headerlink&quot; title=&quot;递归定义 (recursive definition)&quot;&gt;&lt;/a&gt;递归定义 (recursive definition)&lt;/h1&gt;&lt;p&gt;解释器一般都是“递归程序”。之所以是递归的原因，在于它处理的数据结构（程序）本身是“递归定义”的结构。算术表达式就是一个这样的结构，比如：’(&lt;em&gt; (+ 1 2) (&lt;/em&gt; (- 9 6) 4))。每一个表达式里面可以含有子表达式，子表达式里面还可以有子表达式，如此无穷无尽的嵌套。看似很复杂，其实它的定义不过是：&lt;/p&gt;
&lt;p&gt;“算术表达式”有两种形式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一个数&lt;/li&gt;
&lt;li&gt;一个 ‘(op e1 e2) 这样的结构（其中 e1 和 e2 是两个“算术表达式”）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;看出来哪里在“递归”了吗？我们本来在定义“算术表达式”这个概念，而它的定义里面用到了“算术表达式”这个概念本身！这就构造了一个“回路”，让我们可以生成任意深度的表达式。&lt;/p&gt;
&lt;p&gt;很多其它的数据，包括自然数，都是可以用递归来定义的。比如常见的对自然数的定义是：&lt;/p&gt;
&lt;p&gt;“自然数”有两种形式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;零&lt;/li&gt;
&lt;li&gt;某个“自然数”的后继&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;看到了吗？“自然数”的定义里面出现了它自己！这就是为什么我们有无穷多个自然数。&lt;/p&gt;
&lt;p&gt;所以可以说递归是无所不在的，甚至有人说递归就是自然界的终极原理。递归的数据总是需要递归的程序来处理。虽然递归有时候表现为另外的形式，比如循环(loop)，但是“递归”这个概念比“循环”更广泛一些。有很多递归程序不能用循环来表达，比如我们今天要写的解释器就是一个递归程序，它就不能用循环来表达。所以写出正确的递归程序，对于设计任何系统都是至关重要的。其实递归的概念不限于程序设计。在数学证明里面有个概念叫“归纳法”(induction)，比如“数学归纳法”(mathematical induction)。其实归纳法跟递归完全是一回事。&lt;/p&gt;
&lt;p&gt;我们今天的解释器就是一个递归程序。它接受一个表达式，递归的调用它自己来处理各个子表达式，然后把各个递归的结果组合在一起，形成最后的结果。这有点像二叉树遍历，只不过我们的数据结构（程序）比二叉树复杂一些。&lt;/p&gt;
&lt;p&gt;#　模式匹配和递归：一个简单的计算器&lt;/p&gt;
&lt;p&gt;既然计算器是一种最简单的解释器，那么我们为何不从计算器开始写？下面就是一个计算器，它可以计算四则运算的表达式。这些表达式可以任意的嵌套，比如 ‘(* (+ 1 2) (+ 3 4))。我想从这个简单的例子来讲一下模式匹配(pattern matching) 和递归 (recursion) 的原理。&lt;/p&gt;
&lt;p&gt;下面就是这个计算器的代码。它接受一个表达式，输出一个数字作为结果，正如上一节所示。&lt;/p&gt;
&lt;figure class=&quot;highlight clojure&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;define&lt;/span&gt; calc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  (&lt;span class=&quot;name&quot;&gt;lambda&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;exp&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (&lt;span class=&quot;name&quot;&gt;match&lt;/span&gt; exp                                &lt;span class=&quot;comment&quot;&gt;; 匹配表达式的两种情况&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      [(&lt;span class=&quot;name&quot;&gt;?&lt;/span&gt; number? x) x]                       &lt;span class=&quot;comment&quot;&gt;; 是数字，直接返回&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      [`(,op ,e1 ,e2)                         &lt;span class=&quot;comment&quot;&gt;; 匹配并且提取出操作符 op 和两个操作数 e1, e2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;let&lt;/span&gt;&lt;/span&gt; ([v1 (&lt;span class=&quot;name&quot;&gt;calc&lt;/span&gt; e1)]                   &lt;span class=&quot;comment&quot;&gt;; 递归调用 calc 自己，得到 e1 的值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             [v2 (&lt;span class=&quot;name&quot;&gt;calc&lt;/span&gt; e2)])                  &lt;span class=&quot;comment&quot;&gt;; 递归调用 calc 自己，得到 e2 的值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         (&lt;span class=&quot;name&quot;&gt;match&lt;/span&gt; op                            &lt;span class=&quot;comment&quot;&gt;; 分支：处理操作符 op 的 4 种情况&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           [&#39;+ (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;+&lt;/span&gt;&lt;/span&gt; v1 v2)]                     &lt;span class=&quot;comment&quot;&gt;; 如果是加号，输出结果为 (+ v1 v2)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           [&#39;- (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;-&lt;/span&gt;&lt;/span&gt; v1 v2)]                     &lt;span class=&quot;comment&quot;&gt;; 如果是减号，乘号，除号，相似的处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           [&#39;* (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;*&lt;/span&gt;&lt;/span&gt; v1 v2)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           [&#39;/ (/ v1 v2)]))])))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里的 match 语句是一个模式匹配。它的形式是这样：&lt;/p&gt;
&lt;figure class=&quot;highlight clojure&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;match&lt;/span&gt; exp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [模式 结果]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [模式 结果]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   ...   ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;它根据表达式 exp 的“结构”来进行“分支”操作。每一个分支由两部分组成，左边的是一个“模式”，右边的是一个结果。左边的模式在匹配之后可能会绑定一些变量，它们可以在右边的表达式里面使用。&lt;/p&gt;
&lt;p&gt;一般说来，数据的“定义”有多少种情况，用来处理它的“模式”就有多少情况。比如算术表达式有两种情况，数字或者 (op e1 e2)。所以用来处理它的 match 语句就有两种模式。“你所有的情况，我都能处理”，这就是“穷举法”。穷举的思想非常重要，你漏掉的任何一种情况，都非常有可能带来麻烦。所谓的“数学归纳法”，就是这种穷举法在自然数的递归定义上面的表现。因为你穷举了所有的自然数可能被构造的两种形式，所以你能确保定理对“任意自然数”成立。&lt;/p&gt;
&lt;p&gt;那么模式是如何工作的呢？比如 ‘(,op ,e1 ,e2) 就是一个模式（pattern），它被用来匹配输入的 exp。模式匹配基本的原理就是匹配与它“结构相同”的数据。比如，如果 exp 是 ‘(+ 1 2)，那么 ‘(,op ,e1 ,e2) 就会把 op 绑定到 ‘+，把 e1 绑定到 ‘1，把 e2 绑定到 ‘2。这是因为它们结构相同：&lt;/p&gt;
&lt;figure class=&quot;highlight scheme&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&#39;(,op ,e1 ,e2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#39;( +   &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;   &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;说白了，模式就是一个可以含有“名字”（像 op, e1 和 e2）的“数据结构”，像 ‘(,op ,e1 ,e2)。我们拿这个带有名字的结构去“匹配”实际的数据（像 ‘(+ 1 2))。当它们一一对应之后，这些名字就自动被绑定到实际数据里相应位置的值。模式里面不但可以含有名字，也可以含有具体的数据。比如你可以构造一个模式 ‘(,op ,e1 42)，用来匹配第二个操作数固定为 42 的那些表达式。&lt;/p&gt;
&lt;p&gt;看见左边的模式，你就像直接“看见”了输入数据的形态，然后对里面的元素进行操作。它可以让我们一次性的“拆散”(destruct) 数据结构，把各个部件（域）的值绑定到多个变量，而不需要使用多个访问函数。所以模式匹配是非常直观的编程方式，值得每种语言借鉴。很多函数式语言里都有类似的功能，比如 ML 和 Haskell。&lt;/p&gt;
&lt;p&gt;注意这里 e1 和 e2 里面的操作数还不是值，它们是表达式。我们递归的调用 interp1 自己，分别得到 e1 和 e2 的值 v1 和 v2。它们应该是数字。&lt;/p&gt;
&lt;p&gt;你注意到我们在什么地方使用了递归吗？如果你再看一下“算术表达式”的定义：&lt;/p&gt;
&lt;p&gt;“算术表达式”有两种形式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一个数&lt;/li&gt;
&lt;li&gt;一个 ‘(op e1 e2) 这样的结构（其中 e1 和 e2 是两个“算术表达式”）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;你就会发现这个定义里面“递归”的地方就是 e1 和 e2，所以 calc 在 e1 和 e2 上面递归的调用自己。如果你在数据定义的每个递归处都进行递归，那么你的递归程序就会穷举所有的情况。&lt;/p&gt;
&lt;p&gt;之后，我们根据操作符 op 的不同，对这两个值 v1 和 v2 分别进行操作。如果 op 是加号 ‘+，我们就调用 Scheme 的加法操作，作用于 v1 和 v2，并且返回运算所得的值。如果是减号，乘号，除号，我们也进行相应的操作，返回它们的值。&lt;/p&gt;
&lt;p&gt;所以你就可以得到如下的测试结果：&lt;/p&gt;
&lt;figure class=&quot;highlight clojure&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;calc&lt;/span&gt; &#39;(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;+&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;; =&amp;gt; 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;calc&lt;/span&gt; &#39;(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;*&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;; =&amp;gt; 6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;calc&lt;/span&gt; &#39;(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;*&lt;/span&gt;&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;+&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;+&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;; =&amp;gt; 21&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;一个计算器就是这么简单。你可以试试这些例子，然后自己再做一些新的例子。&lt;/p&gt;
&lt;h1 id=&quot;什么是-lambda-calculus？&quot;&gt;&lt;a href=&quot;#什么是-lambda-calculus？&quot; class=&quot;headerlink&quot; title=&quot;什么是 lambda calculus？&quot;&gt;&lt;/a&gt;什么是 lambda calculus？&lt;/h1&gt;&lt;p&gt;现在让我们过渡到一种更强大的语言：lambda calculus。它虽然名字看起来很吓人，但是其实非常简单。它的三个元素分别是是：变量，函数，调用。用传统的表达法，它们看起来就是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;变量：x&lt;/li&gt;
&lt;li&gt;函数：λx.t&lt;/li&gt;
&lt;li&gt;调用：t1 t2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每个程序语言里面都有这三个元素，只不过具体的语法不同，所以你其实每天都在使用 lambda calculus。用 Scheme 作为例子，这三个元素看起来就像：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;变量：x&lt;/li&gt;
&lt;li&gt;函数：(lambda (x) e)&lt;/li&gt;
&lt;li&gt;调用：(e1 e2)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一般的程序语言还有很多其它的结构，可是这三个元素却是缺一不可的。所以构建解释器的最关键步骤就是把这三个东西搞清楚。构造任何一个语言的解释器一般都是从这三个元素开始，在确保它们完全正确之后才慢慢加入其它的元素。&lt;/p&gt;
&lt;p&gt;有一个很简单的思维方式可以让你直接看到这三元素的本质。记得我说过，每个程序都是一个“机器的描述”吗？所以每个 lambda calculus 的表达式也是一个机器的描述。这种机器跟电子线路非常相似。lambda calculus 的程序和机器有这样的一一对应关系：一个变量就是一根导线。一个函数就是某种电子器件的“样板”，有它自己的输入和输出端子，自己的逻辑。一个调用都是在设计中插入一个电子器件的“实例”，把它的输入端子连接到某些已有的导线，这些导线被叫做“参数”。所以一个 lambda calculus 的解释器实际上就是一个电子线路的模拟器。所以如果你听说有些芯片公司开始用类似 Haskell 的语言（比如 Bluespec System Verilog）来设计硬件，也就不奇怪了。&lt;/p&gt;
&lt;p&gt;需要注意的是，跟一般语言不同，lambda calculus 的函数只有一个参数。这其实不是一个严重的限制，因为 lambda calculus 的函数可以被作为值传递 (这叫 first-class function)，所以你可以用嵌套的函数定义来表示两个以上参数的函数。比如，(lambda (x) (lambda (y) y)) 就可以表示一个两个参数的函数，它返回第二个参数。不过当它被调用的时候，你需要两层调用，就像这样：&lt;/p&gt;
&lt;figure class=&quot;highlight scheme&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(((&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;lambda&lt;/span&gt;&lt;/span&gt; (x) (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;lambda&lt;/span&gt;&lt;/span&gt; (y) y)) &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;; =&amp;gt; 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;虽然看起来丑一点，但是它让我们的解释器达到终极的简单。简单对于设计程序语言的人是至关重要的。一开头就追求复杂的设计，往往导致一堆纠缠不清的问题。&lt;/p&gt;
&lt;p&gt;lambda calculus 不同于普通语言的另外一个特点就是它没有数字等基本的数据类型，所以你不能直接用 lambda calculus 来计算像 (+ 1 2) 这样的表达式。但是有意思的是，数字却可以被 lambda calculus 的三个基本元素“编码”(encoding) 出来。这种编码可以用来表示自然数，布尔类型，pair，list，以至于所有的数据结构。它还可以表示 if 条件语句等复杂的语法结构。常见的一种这样的编码叫做 Church encoding。所以 lambda calculus 其实可以产生出几乎所有程序语言的功能。中国的古话“三生万物”，也许就是这个意思。&lt;/p&gt;
&lt;h1 id=&quot;求值顺序，call-by-name-call-by-value&quot;&gt;&lt;a href=&quot;#求值顺序，call-by-name-call-by-value&quot; class=&quot;headerlink&quot; title=&quot;求值顺序，call-by-name, call-by-value&quot;&gt;&lt;/a&gt;求值顺序，call-by-name, call-by-value&lt;/h1&gt;&lt;p&gt;当解释一个程序的时候，我们可以有好几种不同的“求值顺序”(evaluation order)。这有点像遍历二叉树有好几种不同的顺序一样（中序，前序，后序）。只不过这里的顺序更加复杂一些。比如下面的程序：&lt;br&gt;&lt;figure class=&quot;highlight scheme&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;((&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;lambda&lt;/span&gt;&lt;/span&gt; (x) (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;*&lt;/span&gt;&lt;/span&gt; x x)) (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;+&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们可以先执行最外层的调用，把 (+ 1 2) 传递进入函数，得到 (* (+ 1 2) (+ 1 2))。所以求值顺序是：&lt;br&gt;&lt;figure class=&quot;highlight lisp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;((&lt;span class=&quot;name&quot;&gt;lambda&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;x&lt;/span&gt;) (&lt;span class=&quot;name&quot;&gt;*&lt;/span&gt; x x)) (&lt;span class=&quot;name&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;=&amp;gt; (&lt;span class=&quot;name&quot;&gt;*&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) (&lt;span class=&quot;name&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;=&amp;gt; (&lt;span class=&quot;name&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;=&amp;gt; (&lt;span class=&quot;name&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;=&amp;gt; &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;但是我们也可以先算出 (+ 1 2) 的结果，然后再把它传进这个函数。所以求值顺序是：&lt;br&gt;&lt;figure class=&quot;highlight lisp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;((&lt;span class=&quot;name&quot;&gt;lambda&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;x&lt;/span&gt;) (&lt;span class=&quot;name&quot;&gt;*&lt;/span&gt; x x)) (&lt;span class=&quot;name&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;=&amp;gt; ((&lt;span class=&quot;name&quot;&gt;lambda&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;x&lt;/span&gt;) (&lt;span class=&quot;name&quot;&gt;*&lt;/span&gt; x x)) &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;=&amp;gt; (&lt;span class=&quot;name&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;=&amp;gt; &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们把第一种方式叫做 call-by-name (CBN)，因为它把参数的“名字”（也就是表达式自己）传进函数。我们把第二种方式叫做 call-by-value (CBV)，因为它先把参数的名字进行解释，得到它们的“值”之后，才把它们传进函数。&lt;/p&gt;
&lt;p&gt;这两种解释方式的效率是不一样的。从上面的例子，你可以看出 CBN 比 CBV 多出了一步。为什么呢？因为函数 (lambda (x) (* x x)) 里面有两个 x，所以 (+ 1 2) 被传进函数的时候被复制了一份。之后我们需要对它的每一拷贝都进行一次解释，所以 (+ 1 2) 被计算了两次！&lt;/p&gt;
&lt;p&gt;鉴于这个原因，几乎所有的程序语言都采用 CBV，而不是 CBN。CBV 常常被叫做“strict”或者“applicative order”。虽然 CBN 效率低下，与它等价的一种顺序 call-by-need 却没有这个问题。call-by-need 的基本原理是对 CBN 中被拷贝的表达式进行“共享”和“记忆”。当一个表达式的一个拷贝被计算过了之后，其它的拷贝自动得到它的值，从而避免重复求值。call-by-need 也叫“lazy evaluation”，它是 Haskell 语言所用的语义。&lt;/p&gt;
&lt;p&gt;求值顺序不只停留于 call-by-name, call-by-value, call-by-need。人们还设计了很多种其它的求值顺序，虽然它们大部分都不能像 call-by-value 和 call-by-need 这么实用。&lt;/p&gt;
&lt;h1 id=&quot;完整的-lambda-calculus-解释器&quot;&gt;&lt;a href=&quot;#完整的-lambda-calculus-解释器&quot; class=&quot;headerlink&quot; title=&quot;完整的 lambda calculus 解释器&quot;&gt;&lt;/a&gt;完整的 lambda calculus 解释器&lt;/h1&gt;&lt;p&gt;下面是我们今天要完成的解释器，它只有39行（不包括空行和注释）。你可以先留意一下各个部分的注释，它们标注各个部件的名称，并且有少许讲解。这个解释器实现的是 CBV 顺序的 lambda calculus，外加基本的算术。加入基本算术的原因是为了可以让初学者写出比较有趣一点的程序，不至于一开头就被迫去学 Church encoding。&lt;br&gt;&lt;figure class=&quot;highlight clojure&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;;; 以下三个定义 env0, ent-env, lookup 是对环境（environment）的基本操作：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;; 空环境&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;define&lt;/span&gt; env0 &#39;())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;; 扩展。对环境 env 进行扩展，把 x 映射到 v，得到一个新的环境&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;define&lt;/span&gt; ext-env&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  (&lt;span class=&quot;name&quot;&gt;lambda&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;x&lt;/span&gt; v env)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;cons&lt;/span&gt;&lt;/span&gt; `(,x . ,v) env)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;; 查找。在环境中 env 中查找 x 的值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;define&lt;/span&gt; lookup&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  (&lt;span class=&quot;name&quot;&gt;lambda&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;x&lt;/span&gt; env)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;let&lt;/span&gt;&lt;/span&gt; ([p (&lt;span class=&quot;name&quot;&gt;assq&lt;/span&gt; x env)])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;cond&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       [(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;not&lt;/span&gt;&lt;/span&gt; p) x]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       [else (&lt;span class=&quot;name&quot;&gt;cdr&lt;/span&gt; p)]))))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;; 闭包的数据结构定义，包含一个函数定义 f 和它定义时所在的环境&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;struct&lt;/span&gt; Closure (&lt;span class=&quot;name&quot;&gt;f&lt;/span&gt; env))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;; 解释器的递归定义（接受两个参数，表达式 exp 和环境 env）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;; 共 5 种情况（变量，函数，调用，数字，算术表达式）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;define&lt;/span&gt; interp1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  (&lt;span class=&quot;name&quot;&gt;lambda&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;exp&lt;/span&gt; env)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (&lt;span class=&quot;name&quot;&gt;match&lt;/span&gt; exp                                          &lt;span class=&quot;comment&quot;&gt;; 模式匹配 exp 的以下情况（分支）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      [(&lt;span class=&quot;name&quot;&gt;?&lt;/span&gt; symbol? x) (&lt;span class=&quot;name&quot;&gt;lookup&lt;/span&gt; x env)]                    &lt;span class=&quot;comment&quot;&gt;; 变量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      [(&lt;span class=&quot;name&quot;&gt;?&lt;/span&gt; number? x) x]                                 &lt;span class=&quot;comment&quot;&gt;; 数字&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      [`(&lt;span class=&quot;name&quot;&gt;lambda&lt;/span&gt; (,x) ,e)                                &lt;span class=&quot;comment&quot;&gt;; 函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       (&lt;span class=&quot;name&quot;&gt;Closure&lt;/span&gt; exp env)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      [`(,e1 ,e2)                                       &lt;span class=&quot;comment&quot;&gt;; 调用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;let&lt;/span&gt;&lt;/span&gt; ([v1 (&lt;span class=&quot;name&quot;&gt;interp1&lt;/span&gt; e1 env)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             [v2 (&lt;span class=&quot;name&quot;&gt;interp1&lt;/span&gt; e2 env)])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         (&lt;span class=&quot;name&quot;&gt;match&lt;/span&gt; v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           [(&lt;span class=&quot;name&quot;&gt;Closure&lt;/span&gt; `(&lt;span class=&quot;name&quot;&gt;lambda&lt;/span&gt; (,x) ,e) env1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            (&lt;span class=&quot;name&quot;&gt;interp1&lt;/span&gt; e (&lt;span class=&quot;name&quot;&gt;ext-env&lt;/span&gt; x v2 env1))]))]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      [`(,op ,e1 ,e2)                                   &lt;span class=&quot;comment&quot;&gt;; 算术表达式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;let&lt;/span&gt;&lt;/span&gt; ([v1 (&lt;span class=&quot;name&quot;&gt;interp1&lt;/span&gt; e1 env)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             [v2 (&lt;span class=&quot;name&quot;&gt;interp1&lt;/span&gt; e2 env)])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         (&lt;span class=&quot;name&quot;&gt;match&lt;/span&gt; op&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           [&#39;+ (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;+&lt;/span&gt;&lt;/span&gt; v1 v2)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           [&#39;- (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;-&lt;/span&gt;&lt;/span&gt; v1 v2)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           [&#39;* (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;*&lt;/span&gt;&lt;/span&gt; v1 v2)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           [&#39;/ (/ v1 v2)]))])))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;; 解释器的“用户界面”函数。它把 interp1 包装起来，掩盖第二个参数，初始值为 env0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;define&lt;/span&gt; interp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  (&lt;span class=&quot;name&quot;&gt;lambda&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;exp&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (&lt;span class=&quot;name&quot;&gt;interp1&lt;/span&gt; exp env0)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;测试例子&quot;&gt;&lt;a href=&quot;#测试例子&quot; class=&quot;headerlink&quot; title=&quot;测试例子&quot;&gt;&lt;/a&gt;测试例子&lt;/h1&gt;&lt;p&gt;这里有一些测试的例子。你最好先玩一下再继续往下看，或者自己写一些新的例子。学习程序的最好办法就是玩弄这个程序，给它一些输入，观察它的行为。有时候这比任何语言的描述都要直观和清晰。&lt;br&gt;&lt;figure class=&quot;highlight clojure&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;interp&lt;/span&gt; &#39;(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;+&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;; =&amp;gt; 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;interp&lt;/span&gt; &#39;(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;*&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;; =&amp;gt; 6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;interp&lt;/span&gt; &#39;(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;*&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;+&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;; =&amp;gt; 14&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;interp&lt;/span&gt; &#39;(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;*&lt;/span&gt;&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;+&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;+&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;; =&amp;gt; 21&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;interp&lt;/span&gt; &#39;(((&lt;span class=&quot;name&quot;&gt;lambda&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;x&lt;/span&gt;) (&lt;span class=&quot;name&quot;&gt;lambda&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;y&lt;/span&gt;) (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;*&lt;/span&gt;&lt;/span&gt; x y))) &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;; =&amp;gt; 6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;interp&lt;/span&gt; &#39;((&lt;span class=&quot;name&quot;&gt;lambda&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;x&lt;/span&gt;) (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;*&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; x)) &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;; =&amp;gt; 6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;interp&lt;/span&gt; &#39;((&lt;span class=&quot;name&quot;&gt;lambda&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;y&lt;/span&gt;) (((&lt;span class=&quot;name&quot;&gt;lambda&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;y&lt;/span&gt;) (&lt;span class=&quot;name&quot;&gt;lambda&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;x&lt;/span&gt;) (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;*&lt;/span&gt;&lt;/span&gt; y &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;))) &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)) &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;; =&amp;gt; 6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;; (interp &#39;(1 2))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;; =&amp;gt; match: no matching clause for 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在接下来的几节，我们来看看这个解释器里主要的分支（match）表达式的各种情况。&lt;/p&gt;
&lt;h1 id=&quot;对基本算术操作的解释&quot;&gt;&lt;a href=&quot;#对基本算术操作的解释&quot; class=&quot;headerlink&quot; title=&quot;对基本算术操作的解释&quot;&gt;&lt;/a&gt;对基本算术操作的解释&lt;/h1&gt;&lt;p&gt;算术操作在解释器里是最简单也是最“基础”的东西，因为它们不能再被细分为更小的元素了。所以在接触函数，调用等复杂的结构之前，我们来看一看对算术操作的处理。以下就是这个解释器里处理基本算术的部分，它是 interp1 的最后一个分支。&lt;br&gt;&lt;figure class=&quot;highlight clojure&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;match&lt;/span&gt; exp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ... ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [`(,op ,e1 ,e2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;let&lt;/span&gt;&lt;/span&gt; ([v1 (&lt;span class=&quot;name&quot;&gt;interp1&lt;/span&gt; e1 env)]            &lt;span class=&quot;comment&quot;&gt;; 递归调用 interp1 自己，得到 e1 的值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         [v2 (&lt;span class=&quot;name&quot;&gt;interp1&lt;/span&gt; e2 env)])           &lt;span class=&quot;comment&quot;&gt;; 递归调用 interp1 自己，得到 e2 的值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     (&lt;span class=&quot;name&quot;&gt;match&lt;/span&gt; op                            &lt;span class=&quot;comment&quot;&gt;; 分支：处理操作符 op 的 4 种情况&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       [&#39;+ (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;+&lt;/span&gt;&lt;/span&gt; v1 v2)]                     &lt;span class=&quot;comment&quot;&gt;; 如果是加号，输出结果为 (+ v1 v2)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       [&#39;- (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;-&lt;/span&gt;&lt;/span&gt; v1 v2)]                     &lt;span class=&quot;comment&quot;&gt;; 如果是减号，乘号，除号，相似的处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       [&#39;* (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;*&lt;/span&gt;&lt;/span&gt; v1 v2)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       [&#39;/ (/ v1 v2)]))])&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;你可以看到它几乎跟刚才写的计算器一模一样，不过现在 interp1 的调用多了一个参数 env 而已。这个 env 是什么，我们下面很快就讲。&lt;/p&gt;
&lt;h1 id=&quot;变量和函数&quot;&gt;&lt;a href=&quot;#变量和函数&quot; class=&quot;headerlink&quot; title=&quot;变量和函数&quot;&gt;&lt;/a&gt;变量和函数&lt;/h1&gt;&lt;p&gt;我想用两个小节来简单介绍一下变量，函数和环境。稍后的几节我们再来看它们是如何实现的。&lt;/p&gt;
&lt;p&gt;变量(variable)的产生是数学史上的最大突破之一。因为变量可以被绑定到不同的值，从而使得函数的实现成为可能。比如数学函数 f(x) = x&lt;em&gt;2，其中 x 是一个变量，它把输入的值传递到函数的主体 x&lt;/em&gt;2里面。如果没有变量，函数就不可能实现。&lt;/p&gt;
&lt;p&gt;对变量的最基本的操作是对它的“绑定”（binding）和“取值”（evaluate）。什么是绑定呢？拿上面的函数 f(x) 作为例子吧。当 x 等于 1 的时候，f(x) 的值是 2，而当 x 等于 2 的时候，f(x) 的值是 4。在上面的句子里，我们对 x 进行了两次绑定。第一次 x 被绑定到了 1，第二次被绑定到了 2。你可以把“绑定”理解成这样一个动作，就像当你把插头插进电源插座的那一瞬间。插头的插脚就是 f(x) 里面的那个 x，而 x*2 里面的 x，则是电线的另外一端。所以当你把插头插进插座，电流就通过这根电线到达另外一端。如果电线导电性能良好，两头的电压应该几乎相等。有点跑题了…… 反正只要记住一点：绑定就是插进插座的那个“动作”。&lt;/p&gt;
&lt;p&gt;那么“取值”呢？再想一下前面的例子，当我们用伏特表测电线另外一端的电压的时候，我们就是在对这个变量进行取值。有时候这种取值的过程不是那么明显，比如电流如果驱动了风扇的电动机。虽然电线的另外一头没有显示电压，其实电流已经作用于电动机的输入端子，进入线圈。所以你也可以说其实是电动机在对变量进行取值。&lt;/p&gt;
&lt;h1 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h1&gt;&lt;p&gt;我们的解释器是一个挺笨的程序，它只能一步一步的做事情。比如，当它需要求 f(1) 的值的时候，它做以下两步操作：1) 把 x 绑定到 1; 2) 进入 f 的函数体对 x*2 进行求值。这就像一个人做出这两个动作：1)把插头插进插座，2) 走到电线的另外一头测量它的电压，并且把结果乘以 2。在第一步和第二步之间，我们如何记住 x 的值呢？它必须被传递到那个用来处理函数体的递归解释器里面。这就是为什么我们需要“环境”，也就是 interp1 的第二个参数 env。&lt;/p&gt;
&lt;p&gt;环境记录变量的值，并且把它们传递到它们的“可见区域”，用术语说就叫做“作用域”(scope)。通常作用域是整个函数体，但是有一个例外，就是当函数体内有嵌套的函数定义的时候，内部的那个函数如果有同样的参数名，那么外层的参数名就会被“屏蔽”（shadow）掉。这样内部的函数体就看不到外层的参数了，只看到它自己的。比如 (lambda (x) (lambda (x) (* x 2)))，里面的那个 x 看到的就是内层函数的 x，而不是外层的。&lt;/p&gt;
&lt;p&gt;在我们的解释器里，用于处理环境的主要部件如下：&lt;br&gt;&lt;figure class=&quot;highlight scheme&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;; 空环境&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;define&lt;/span&gt;&lt;/span&gt; env0 &#39;())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;; 对环境 env 进行扩展，把 x 映射到 v&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;define&lt;/span&gt;&lt;/span&gt; ext-env&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;lambda&lt;/span&gt;&lt;/span&gt; (x v env)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;cons&lt;/span&gt;&lt;/span&gt; `(,x . ,v) env)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;; 取值。在环境中 env 中查找 x 的值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;define&lt;/span&gt;&lt;/span&gt; lookup&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;lambda&lt;/span&gt;&lt;/span&gt; (x env)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;let&lt;/span&gt;&lt;/span&gt; ([&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;assq&lt;/span&gt;&lt;/span&gt; x env)])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;cond&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       [(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;not&lt;/span&gt;&lt;/span&gt; p) x]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       [&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;else&lt;/span&gt;&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;cdr&lt;/span&gt;&lt;/span&gt; p)]))))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里我们用的是 Scheme 的 association list 来表示环境。Association list 看起来像这个样子：((x . 1) (y . 2) (z . 5))。也就是一个两元组（pair）的链表，左边的元素是 key，右边的元素是 value。写的直观一点就是：&lt;br&gt;&lt;figure class=&quot;highlight clojure&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;((&lt;span class=&quot;name&quot;&gt;x&lt;/span&gt; . &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; (&lt;span class=&quot;name&quot;&gt;y&lt;/span&gt; . &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; (&lt;span class=&quot;name&quot;&gt;z&lt;/span&gt; . &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;查表操作就是从头到尾搜索，如果左边的 key 是要找的变量，就返回整个 pair。简单吧？&lt;/p&gt;
&lt;p&gt;ext-env 扩展一个环境。比如，如果原来的环境是 ((y . 2) (z . 5)) 那么 (ext-env x 1 ((y . 2) (z . 5)))，就会得到 ((x . 1) (y . 2) (z . 5))。也就是把 (x . 1) 放到最前面去。值得注意的一点是，环境被扩展以后其实是形成了一个新的环境，原来的环境并没有被“改变”。比如上面红色的部分就是原来的数据结构，只不过它被放到另一个更大的结构里面了。这叫做“函数式数据结构”。这个性质在我们的解释器里是至关重要的，因为当我们扩展了一个环境之后，其它部分的代码仍然可以原封不动的访问扩展前的那个旧的环境。当我们讲到调用的时候也许你就会发现这个性质的用处。&lt;/p&gt;
&lt;p&gt;你也可以用另外的，更高效的数据结构（比如 splay tree）来表示环境。你甚至可以用函数来表示环境。唯一的要求就是，它是变量到值的“映射”(map)。你把 x 映射到 1，待会儿查询 x 的值，它应该仍然是 1，而不会消失掉或者别的值。也就是说，这几个函数要满足这样的一种“界面约定”：如果 e 是 (ext-env ‘x 1 env) 返回的环境，那么 (lookup ‘x e) 应该返回 1。只要满足这样的界面约定的函数都可以被叫做 ext-env 和 lookup，以至于可以它们用来完全替代这里的函数而不会导致其它代码的修改。这叫做“抽象”，也就是“面向对象语言”的精髓所在。&lt;/p&gt;
&lt;h1 id=&quot;对变量的解释&quot;&gt;&lt;a href=&quot;#对变量的解释&quot; class=&quot;headerlink&quot; title=&quot;对变量的解释&quot;&gt;&lt;/a&gt;对变量的解释&lt;/h1&gt;&lt;p&gt;了解了变量，函数和环境，让我们来看看解释器对变量的操作，也就是 interp1 的 match 的第一种情况。它非常简单，就是在环境中查找变量的值。这里的 (? symbol? x) 是一个特殊的模式，它使用 Scheme 函数 symbol? 来判断输入是否匹配，如果是的就把它绑定到 x，查找它的值，然后返回这个值。&lt;/p&gt;
&lt;figure class=&quot;highlight clojure&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[(&lt;span class=&quot;name&quot;&gt;?&lt;/span&gt; symbol? x) (&lt;span class=&quot;name&quot;&gt;lookup&lt;/span&gt; x env)]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意由于我们的解释器是递归的，所以这个值也许会被返回到更高层的表达式，比如 (* x 2)。&lt;/p&gt;
&lt;h1 id=&quot;对数字的解释&quot;&gt;&lt;a href=&quot;#对数字的解释&quot; class=&quot;headerlink&quot; title=&quot;对数字的解释&quot;&gt;&lt;/a&gt;对数字的解释&lt;/h1&gt;&lt;p&gt;对数字的解释也很简单。由于在 Scheme 里面名字 ‘2 就是数字 2（我认为这是 Scheme 设计上的一个小错误），所以我们不需要对数字的名字做特殊的处理，把它们原封不动的返回。&lt;br&gt;&lt;figure class=&quot;highlight clojure&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[(&lt;span class=&quot;name&quot;&gt;?&lt;/span&gt; number? x) x]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;对函数的解释&quot;&gt;&lt;a href=&quot;#对函数的解释&quot; class=&quot;headerlink&quot; title=&quot;对函数的解释&quot;&gt;&lt;/a&gt;对函数的解释&lt;/h1&gt;&lt;p&gt;对函数的解释是一个比较难说清楚的问题。由于函数体内也许会含有外层函数的参数，比如 (lambda (y) (lambda (x) (&lt;em&gt; y 2))) 里面的 y 是外层函数的参数，却出现在内层函数定义中。如果内层函数被作为值返回，那么 (&lt;/em&gt; y 2) 就会跑到 y 的作用域以外。所以我们必须把函数做成“闭包”(closure)。闭包是一种特殊的数据结构，它由两个元素组成：函数的定义和当前的环境。所以我们对 (lambda (x) e) 这样一个函数的解释就是这样：&lt;/p&gt;
&lt;figure class=&quot;highlight scheme&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[`(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;lambda&lt;/span&gt;&lt;/span&gt; (,x) ,e)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  (&lt;span class=&quot;name&quot;&gt;Closure&lt;/span&gt; exp env)]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意这里的 exp 就是 `(lambda (,x) ,e) 自己。我们只是把它包装了一下，把它与当前的环境一起放到一个数据结构(闭包)里，并不进行任何复杂的运算。这里我们的闭包用的是一个 Racket 的 struct 结构，也就是一个记录类型(record)。你也可以用其它形式来表示闭包，比如有些解释器教程提倡用函数来表示闭包。其实用什么形式都无所谓，只要能存储 exp 和 env 的值。我比较喜欢使用 struct，因为它的界面简单清晰。&lt;/p&gt;
&lt;p&gt;为什么需要保存当前的环境呢？因为当这个函数被作为一个值返回的时候，我们必须记住里面的外层函数的参数的绑定。比如，(lambda (y) (lambda (x) (&lt;em&gt; y 2)))。当它被作用于 1 之后，我们会得到内层的函数 (lambda (x) (&lt;/em&gt; y 2))。当这个函数被经过一阵周折之后再被调用的时候，y 应该等于几呢？正确的做法应该是等于1。这种把外层参数的值记录在内层函数的闭包里的做法，叫做“lexical scoping”或者“static scoping”。&lt;/p&gt;
&lt;p&gt;如果你不做闭包，而是把函数体直接返回，那么在 (lambda (x) (* y 2)) 被调用的位置，你可能会另外找到一个 y，从而使用它的值。在调用的时候“动态”解析变量的做法，叫做“dynamic scoping”。事实证明 dynamic scoping 的做法是严重错误的，它导致了早期语言里面出现的各种很难发现的bug。很多早期的语言是 dynamic scoping，就是因为它们只保存了函数的代码，而没有保存它定义处的环境。这样要简单一些，但是带来太多的麻烦。早期的 Lisp，现在的 Emacs Lisp 和 TeX 就是使用 dynamic scoping 的语言。&lt;/p&gt;
&lt;p&gt;为了演示 lexical scoping 和 dynamic scoping 的区别。你可以在我们的解释器里执行以下代码：&lt;br&gt;&lt;figure class=&quot;highlight clojure&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;interp&lt;/span&gt; &#39;((&lt;span class=&quot;name&quot;&gt;lambda&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;y&lt;/span&gt;) (((&lt;span class=&quot;name&quot;&gt;lambda&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;y&lt;/span&gt;) (&lt;span class=&quot;name&quot;&gt;lambda&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;x&lt;/span&gt;) (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;*&lt;/span&gt;&lt;/span&gt; y &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;))) &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)) &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中红色的部分就是上面提到的例子。在这里，(&lt;em&gt; y 2) 里的 y，其实是最里面的那个 (lambda (y) …) 里的。当红色部分被作用于 3 之后。 (lambda (x) (&lt;/em&gt; y 2)) 被作为一个值返回。然后它被作用于 0（x 被绑定到 0，被忽略），所以 (* y 2) 应该等于 6。但是如果我们的解释器是 dynamic scoping，那么最后的结果就会等于 8。这是因为最外层的 y 开头被绑定到了 4，而 dynamic scoping 没有记住内层的 y 的值，所以使用了外层那个 y 的值。&lt;/p&gt;
&lt;p&gt;为什么 Lexical scoping 更好呢？你可以从很简单的直觉来理解。当你构造一个“内部函数”的时候，如果它引用了外面的变量，比如这个例子里的 y，那么从外层的 y 到这个函数的内部，出现了一条“信道”（channel）。你可以把这个内部函数想象成一个电路元件，它的内部有一个节点 y 连接到一根从外部来的电线 y。当这个元件被返回，就像这个元件被挖出来送到别的地方去用。但是在它被使用的地方（调用），这个 y 节点应该从哪里得到输入呢？显然你不应该使用调用处的某个 y，因为这个 y 和之前的那个 y，虽然都叫 y，却不是“同一个 y”，也就是同名异义。它们甚至可以代表不同的类型的东西。所以这个 y 应该仍然连接原来的那根 y 电线。当这个内部元件移动的时候，就像这跟电线被无限的延长，但是它始终连接到原来的节点。&lt;/p&gt;
&lt;h1 id=&quot;对函数调用的解释&quot;&gt;&lt;a href=&quot;#对函数调用的解释&quot; class=&quot;headerlink&quot; title=&quot;对函数调用的解释&quot;&gt;&lt;/a&gt;对函数调用的解释&lt;/h1&gt;&lt;p&gt;好，我们终于到了最后的关头，函数调用。函数调用都是 (e1 e2) 这样的形式，所以我们需要先分别求出 e1 和 e2 的值。这跟基本运算的时候需要先求出两个操作数的值相似。&lt;/p&gt;
&lt;p&gt;函数调用就像把一个电器的插头插进插座，使它开始运转。比如，当 (lambda (x) (&lt;em&gt; x 2)) 被作用于 1 时，我们把 x 绑定到 1，然后解释它的函数体 (&lt;/em&gt; x 2)。但是这里有一个问题，如果函数体内有未绑定的变量，它应该取什么值呢？从上面闭包的讨论，你已经知道了，其实操作数 e1 被求值之后应该是一个闭包，所以它的里面应该有未绑定变量的值。所以，我们就把这个闭包中保存的环境(env1)取出来，扩展它，把 x 绑定到 v2，然后用这个扩展后的环境来解释函数体。&lt;/p&gt;
&lt;p&gt;所以函数调用的代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight clojure&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[`(,e1 ,e2)                                            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;let&lt;/span&gt;&lt;/span&gt; ([v1 (&lt;span class=&quot;name&quot;&gt;interp1&lt;/span&gt; e1 env)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       [v2 (&lt;span class=&quot;name&quot;&gt;interp1&lt;/span&gt; e2 env)])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   (&lt;span class=&quot;name&quot;&gt;match&lt;/span&gt; v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     [(&lt;span class=&quot;name&quot;&gt;Closure&lt;/span&gt; `(&lt;span class=&quot;name&quot;&gt;lambda&lt;/span&gt; (,x) ,e) env1)   &lt;span class=&quot;comment&quot;&gt;; 用模式匹配的方式取出闭包里的各个子结构&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      (&lt;span class=&quot;name&quot;&gt;interp1&lt;/span&gt; e (&lt;span class=&quot;name&quot;&gt;ext-env&lt;/span&gt; x v2 env1))]   &lt;span class=&quot;comment&quot;&gt;; 在闭包的环境中把 x 绑定到 v2，解释函数体&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     ))]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你可能会奇怪，那么解释器的环境 env 难道这里就不用了吗？是的。我们通过 env 来计算 e1 和 e2 的值，是因为 e1 和 e2 里面的变量存在于“当前环境”。我们把 e1 里面的环境 env1 取出来用于计算函数体，是因为函数体并不是在当前环境定义的，它的代码在别的地方。如果我们用 env 来解释函数体，那就成了 dynamic scoping。&lt;/p&gt;
&lt;p&gt;实验：你可以把 (interp1 e (ext-env x v2 env1)) 里面的 env1 改成 env，再试试我们之前讨论过的代码，它的输出就会是 8：&lt;/p&gt;
&lt;figure class=&quot;highlight clojure&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;interp&lt;/span&gt; &#39;((&lt;span class=&quot;name&quot;&gt;lambda&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;y&lt;/span&gt;) (((&lt;span class=&quot;name&quot;&gt;lambda&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;y&lt;/span&gt;) (&lt;span class=&quot;name&quot;&gt;lambda&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;x&lt;/span&gt;) (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;*&lt;/span&gt;&lt;/span&gt; y &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;))) &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)) &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;另外在这里我们也看到环境用“函数式数据结构”表示的好处。闭包被调用时它的环境被扩展，但是这并不会影响原来的那个环境，我们得到的是一个新的环境。所以当函数调用返回之后，函数的参数绑定就自动“注销”了。如果你用一个非函数式的数据结构，在绑定参数时不生成新的环境，而是对已有环境进行赋值，那么这个赋值操作就会永久性的改变原来环境的内容。所以你在函数返回之后必须删除参数的绑定。这样不但麻烦，而且在复杂的情况下几乎不可能有效的控制。每一次当我使用赋值操作来修改环境，最后都会出现意想不到的麻烦。所以在写解释器，编译器的时候，我都只使用函数式数据结构来表示环境。&lt;/p&gt;
&lt;h1 id=&quot;下一步&quot;&gt;&lt;a href=&quot;#下一步&quot; class=&quot;headerlink&quot; title=&quot;下一步&quot;&gt;&lt;/a&gt;下一步&lt;/h1&gt;&lt;p&gt;在懂得了这里讲述的基本的解释器构造之后，下一步可以做什么呢？其实从这个基本的解释器原型，你可以进一步发展出很多内容，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在这个解释器里加一些构造，比如递归和状态，你就可以得到一个完整的程序语言的解释器，比如 Scheme 或者 Python。&lt;/li&gt;
&lt;li&gt;对这个解释器进行“抽象”，你就可以对程序进行类型推导。感兴趣的话可以参考我实现的这个 Hindley-Milner系统，或者 Python 类型推导。&lt;/li&gt;
&lt;li&gt;对这个解释器进行一些改变，就可以得到一个非常强大的 online partial evaluator，可以用于编译器优化。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外需要指出的是，学会这个解释器并不等于理解了程序语言的理论。所以在学会了这些之后，还是要看一些语义学的书。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;怎样写一个解释器&quot;&gt;&lt;a href=&quot;#怎样写一个解释器&quot; class=&quot;headerlink&quot; title=&quot;怎样写一个解释器&quot;&gt;&lt;/a&gt;怎样写一个解释器&lt;/h1&gt;&lt;p&gt;这是一篇解释器的入门教程。虽然我试图从最基本的原理讲起，尽量让这篇文章不依赖于其它知识，但是
    
    </summary>
    
      <category term="解释器" scheme="http://yoursite.com/categories/%E8%A7%A3%E9%87%8A%E5%99%A8/"/>
    
    
      <category term="转摘" scheme="http://yoursite.com/tags/%E8%BD%AC%E6%91%98/"/>
    
  </entry>
  
  <entry>
    <title>一种新的操作系统设计</title>
    <link href="http://yoursite.com/2016/03/15/%E4%B8%80%E7%A7%8D%E6%96%B0%E7%9A%84%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/"/>
    <id>http://yoursite.com/2016/03/15/一种新的操作系统设计/</id>
    <published>2016-03-15T11:14:06.000Z</published>
    <updated>2016-03-15T15:59:53.194Z</updated>
    
    <content type="html">&lt;h1 id=&quot;一种新的操作系统设计&quot;&gt;&lt;a href=&quot;#一种新的操作系统设计&quot; class=&quot;headerlink&quot; title=&quot;一种新的操作系统设计&quot;&gt;&lt;/a&gt;一种新的操作系统设计&lt;/h1&gt;&lt;p&gt;我一直在试图利用程序语言的设计原理，设计一种超越“Unix 哲学”的操作系统。这里是我的设想：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;这种系统里面的程序间通信不使用无结构的字符串，而是使用带有类型和结构的数据。在这样的系统里面，Unix 和其它类似操作系统（比如 Windows）里的所谓“应用程序”的概念基本上完全消失。系统由一个个很小的“函数”组成，每个函数都可以调用另外一个函数，通过参数传递数据。每个函数都可以手动或者自动并发执行。用现在的系统术语打个比方，这就像是所有代码都是“库”代码，而不存在独立的“可执行文件”。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;由于参数是数据结构而不是字符串，这避免了程序间通信繁琐的编码和解码过程。使得“进程间通信”变得轻而易举。任何函数都可以调用另一个函数来处理特定类型的数据，这使得像 “OLE 嵌入”这样的机制变得极其简单。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;所有函数由同一种先进的高级程序语言写成，所以函数间的调用完全不需要“翻译”。不存在 SQL injection 之类由于把程序当成字符串而产生的错误。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;由于这种语言不允许应用程序使用“指针运算”，应用程序不可能产生 segfault 一类的错误。为了防止不良用户手动在机器码里面加入指针运算，系统的执行的代码不是完全的机器代码，而必须通过进一步的验证和转换之后才会被硬件执行。这有点像 JVM，但它直接运行在硬件之上，所以必须有一些 JVM 没有的功能，比如把内存里的数据结构自动换出到硬盘上，需要的时候再换进内存。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;由于没有指针运算，系统可以直接使用“实地址”模式进行内存管理，从而不再需要现代处理器提供的内存映射机制以及 TLB。内存的管理粒度是数据结构，而不是页面。这使得内存访问和管理效率大幅提高，而且简化了处理器的设计。据 Kent Dybvig 的经验，这样的系统的内存使用效率要比 Unix 类的系统高一个数量级。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;系统使用与应用程序相同的高级语言写成，至于“系统调用”，不过是调用另外一个函数。由于只有这些“系统驱动函数”才有对设备的“引用”，又因为系统没有指针运算，所以用户函数不可能绕过系统函数而非法访问硬件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;系统没有 Unix 式的“命令行”，它的“shell”其实就是这种高级语言的 REPL。用户可以在终端用可视化的结构编辑方式输入各种函数调用，从而启动进程的运行。所以你不需要像 Unix 一样另外设计一种毛病语言来“粘接”应用程序。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;所有的数据都作为“结构”，保存在一个分布式的数据共享空间。同样的那个系统语言可以被轻松地发送到远程机器，调用远程机器上的库代码，执行任意复杂的查询索引等动作，取回结果。这种方式可以高效的完成数据库的功能，然而却比数据库简单很多。所谓的“查询语言”（比如 SQL，Datalog，Gremlin，Cypher）其实是多此一举，它们远远不如普通的程序语言强大。说是可以让用户“不需要编程，只提出问题”，然而它们所谓的“优化”是非常局限甚至不可能实现的，带来的麻烦远比直接编程还要多。逻辑式编程语言（比如 Prolog）其实跟 SQL 是一样的问题，一旦遇到复杂点的查询就效率低下。所以系统不使用关系式数据库，不需要 SQL，不需要 NoSQL，不需要 Datalog。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;由于数据全都是结构化的，所以没有普通操作系统的无结构“文件系统”。数据结构可能通过路径来访问，然而路径不是一个字符串或者字符串模式。系统不使用正则表达式，而是一种类似 NFA 的数据结构，对它们的拆分和组合操作不会出现像字符串那样的问题，比如把 /a/b/ 和 /c/d 串接在一起就变成错误的 /a/b//c/d。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;所有的数据在合适的时候被自动同步到磁盘，并且进行容错处理，所以即使在机器掉电的情况，绝大部分的数据和进程能够在电源恢复后继续运行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;程序员和用户几乎完全不需要知道“数据库”或者“文件系统”的存在。程序假设自己拥有无穷大的空间，可以任意的构造数据。根据硬件的能力，一些手动的存盘操作也可能是有必要的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;为了减少数据的移动，系统或者用户可以根据数据的位置，选择： 1）迁移数据，或者 2）迁移处理数据的“进程”。程序员不需要使用 MapReduce，Hadoop 等就能进行大规模并行计算，然而表达能力却比它们强大很多，因为它们全都使用同一种程序语言写成。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我曾经以为我是第一个想到这个做法的人。可是调查之后发现，很多人早就已经做出了类似的系统。Lisp Machine 似乎是其中最接近的一个。&lt;a href=&quot;http://www.yinwang.org/blog-cn/2013/03/07/oberon/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Oberon&lt;/a&gt; 是另外一个。IBM System/38 是类似系统里面最老的一个。最近一些年出现的还有微软的 &lt;a href=&quot;http://research.microsoft.com/en-us/projects/Singularity&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Singularity&lt;/a&gt;，另外还有人试图把 JVM 和 Erlang VM 直接放到硬件上执行。&lt;/p&gt;
&lt;p&gt;所以这篇文章的标题其实是错的，这不是一种“新的操作系统设计”。它看起来是新的，只不过因为我们现在用的操作系统忘记了它们本该是什么样子。我也不该说它“超越了 Unix 哲学”，而应该说，所谓的 Unix 哲学其实是历史的倒退。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一种新的操作系统设计&quot;&gt;&lt;a href=&quot;#一种新的操作系统设计&quot; class=&quot;headerlink&quot; title=&quot;一种新的操作系统设计&quot;&gt;&lt;/a&gt;一种新的操作系统设计&lt;/h1&gt;&lt;p&gt;我一直在试图利用程序语言的设计原理，设计一种超越“Unix 哲学”的操作系统
    
    </summary>
    
      <category term="操作系统设计" scheme="http://yoursite.com/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="转摘" scheme="http://yoursite.com/tags/%E8%BD%AC%E6%91%98/"/>
    
  </entry>
  
  <entry>
    <title>我为什么离开 Cornell</title>
    <link href="http://yoursite.com/2016/03/15/%E6%88%91%E4%B8%BA%E4%BB%80%E4%B9%88%E7%A6%BB%E5%BC%80%20Cornell/"/>
    <id>http://yoursite.com/2016/03/15/我为什么离开 Cornell/</id>
    <published>2016-03-15T11:13:49.000Z</published>
    <updated>2016-03-15T15:59:46.772Z</updated>
    
    <content type="html">&lt;h1 id=&quot;我为什么离开-Cornell&quot;&gt;&lt;a href=&quot;#我为什么离开-Cornell&quot; class=&quot;headerlink&quot; title=&quot;我为什么离开 Cornell&quot;&gt;&lt;/a&gt;我为什么离开 Cornell&lt;/h1&gt;&lt;p&gt;很多人都知道，我曾经在 Cornell 博士就读，两年之后转学到了 Indiana 大学。几乎所有人，包括 Indiana 大学的人都感觉奇怪，为什么会有人从 Cornell 这样的“牛校”转学到 Indiana。我曾经在之前的博文里提到 Cornell 的情况，比如学生一上课就忙着抄笔记，作业压得喘不过气，等等。那些都是实际的情况，所以我没什么必要为我的“母校”说好话。&lt;/p&gt;
&lt;p&gt;离开 Cornell 之后，看到有人在 facebook 上成立了一个“Cornell 痛恨者协会”。其中一个人写到：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Cornell 说要教你游泳，就把你推进池塘里，任凭你扑腾挣扎。等你快扑腾到岸边的时候，它忽然拿起一块大石头砸在你头上，然后继续等着你上岸。当你再次接近岸边的时候，它又拿起一个榔头敲在你头上，这样你就可以死了，可是 Cornell 仍然继续等着你游上岸边……”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这就是一个非常形象的，对我在 Cornell 的两年的总结。现在看看我在 Indiana 学到了什么，而 Cornell 教会了我什么，感觉简直一个天上一个地下。Dan Friedman 和 R. Kent Dybvig，他们的教育真的像是爱因斯坦所说的，像是珍贵的礼物，而不是沉重的负担。他们教会我的东西，让我不再在乎任何“牛校”的博士学位甚至教授职位，不管是 Cornell, Stanford, Berkeley, MIT 还是 Harvard, ……&lt;/p&gt;
&lt;p&gt;所谓的“牛校”，恐怕都是这样吧。学生对于它们只是一种成为“牛校”的工具。你拼着命要进来，好我让你进来。但是我不教你，我让你拼死的做作业。如果你做出来了，我就拿最偏最扯淡的试卷来考你。如果你通过了所有这些，那我就给你一个学位。你得到了这样的“荣誉”，自然就会说“我的学校很牛”。你不敢说它不牛，因为那样就是说你也不牛了。所以这样的学校其实什么也不用干，你能学会东西能毕业，全都是靠你自己，到时候你却要把功劳都归到学校头上。天底下就是有这样好的生意。&lt;/p&gt;
&lt;p&gt;曾经有一个 Cornell 的校友跟我是朋友。当我提到 Cornell 的一些事，他总是像个老师一样，上气不接下气地“教育”我，也就是说类似家丑不可外扬的意思吧。“牛校”就是一种传染病，在你还没进去之前就已经埋下病种，当你进去之后它就开始蔓延，等你毕业很多年，它仍然与你同在。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;我为什么离开-Cornell&quot;&gt;&lt;a href=&quot;#我为什么离开-Cornell&quot; class=&quot;headerlink&quot; title=&quot;我为什么离开 Cornell&quot;&gt;&lt;/a&gt;我为什么离开 Cornell&lt;/h1&gt;&lt;p&gt;很多人都知道，我曾经在 Cornell 博士
    
    </summary>
    
    
      <category term="转摘" scheme="http://yoursite.com/tags/%E8%BD%AC%E6%91%98/"/>
    
  </entry>
  
  <entry>
    <title>谈语法</title>
    <link href="http://yoursite.com/2016/03/15/%E8%B0%88%E8%AF%AD%E6%B3%95/"/>
    <id>http://yoursite.com/2016/03/15/谈语法/</id>
    <published>2016-03-15T11:13:13.000Z</published>
    <updated>2016-03-15T15:59:40.790Z</updated>
    
    <content type="html">&lt;h1 id=&quot;谈语法&quot;&gt;&lt;a href=&quot;#谈语法&quot; class=&quot;headerlink&quot; title=&quot;谈语法&quot;&gt;&lt;/a&gt;谈语法&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/images/lisp_cycles.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;使用和研究过这么多程序语言之后，我觉得几乎不包含多余功能的语言，只有一个：Scheme。所以我觉得它是学习程序设计最好的入手点和进阶工具。当然 Scheme 也有少数的问题，而且缺少一些我想要的功能，但这些都瑕不掩瑜。在用了很多其它的语言之后，我觉得 Scheme 真的是非常优美的语言。&lt;/p&gt;
&lt;p&gt;要想指出 Scheme 所有的优点，并且跟其它语言比较，恐怕要写一本书才讲的清楚。所以在这篇文章里，我只提其中一个最简单，却又几乎被所有人忽视的方面：语法。&lt;/p&gt;
&lt;p&gt;其它的 Lisp “方言”也有跟 Scheme 类似的语法（都是基于“S表达式”），所以在这篇（仅限这篇）文章里我所指出的“Scheme 的优点”，其实也可以作用于其它的 Lisp 方言。从现在开始，“Scheme”和“Lisp”这两个词基本上含义相同。&lt;/p&gt;
&lt;p&gt;我觉得 Scheme （Lisp） 的基于“S表达式”（S-expression）的语法，是世界上最完美的设计。其实我希望它能更简单一点，但是在现存的语言中，我没有找到第二种能与它比美。也许在读过这篇文章之后，你会发现这种语法设计的合理性，已经接近理论允许的最大值。&lt;/p&gt;
&lt;p&gt;为什么我喜欢这样一个“全是括号，前缀表达式”的语言呢？这是出于对语言结构本质的考虑。其实，我觉得语法是完全不应该存在的东西。即使存在，也应该非常的简单。因为语法其实只是对语言的本质结构，“抽象语法树”（abstract syntax tree，AST），的一种编码。一个良好的编码，应该极度简单，不引起歧义，而且应该容易解码。在程序语言里，这个“解码”的过程叫做“语法分析”（parse）。&lt;/p&gt;
&lt;p&gt;为什么我们却又需要语法呢？因为受到现有工具（操作系统，文本编辑器）的限制，到目前为止，几乎所有语言的程序都是用字符串的形式存放在文件里的。为了让字符串能够表示“树”这种结构，人们才给程序语言设计了“语法”这种东西。但是人们喜欢耍小聪明，在有了基本的语法之后，他们开始在这上面大做文章，使得简单的问题变得复杂。&lt;/p&gt;
&lt;p&gt;Lisp （Scheme 的前身）是世界上第二老的程序语言。最老的是 Fortran。Fortran 的程序，最早的时候都是用打孔机打在卡片上的，所以它其实是几乎没有语法可言的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/images/punch-card.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;显然，这样写程序很痛苦。但是它却比现代的很多语言有一个优点：它没有歧义，没有复杂的 parse 过程。&lt;/p&gt;
&lt;p&gt;在 Lisp 诞生的时候，它的设计者们一下子没能想出一种好的语法，所以他们决定干脆先用括号把这语法树的结构全都括起来，一个不漏。等想到更好的语法再换。&lt;/p&gt;
&lt;p&gt;自己想一下，如果要表达一颗“树”，最简单的编码方式是什么？就是用括号把每个节点的“数据”和“子节点”都括起来放在一起。Lisp 的设计者们就是这样想的。他们把这种完全用括号括起来的表达式，叫做“S表达式”（S 代表 “symbolic”）。这貌似很“粗糙”的设计，甚至根本谈不上“设计”。奇怪的是，在用过一段时间之后，他们发现自己已经爱上了这个东西，再也不想设计更加复杂的语法。于是S表达式就沿用至今。&lt;/p&gt;
&lt;p&gt;在使用过 Scheme，Haskell，ML，和常见的 Java，C，C++，Python，Perl，…… 之后，我也惊讶的发现， Scheme 的语法，不但是最简单，而且是最好看的一个。这不是我情人眼里出西施，而是有一定理论依据的。&lt;/p&gt;
&lt;p&gt;首先，把所有的结构都用括号括起来，轻松地避免了别的语言里面可能发生的“歧义”。程序员不再需要记忆任何“运算符优先级”。&lt;/p&gt;
&lt;p&gt;其次，把“操作符”全都放在表达式的最前面，使得基本算术操作和函数调用，在语法上发生完美的统一，而且使得程序员可以使用几乎任何符号作为函数名。&lt;/p&gt;
&lt;p&gt;在其他的语言里，函数调用看起来像这个样子：f(1)，而算术操作看起来是这样：1+2。在 Lisp 里面，函数调用看起来是这样(f 1)，而算术操作看起来也是这样(+ 1 2)。你发现有什么共同点吗？那就是 f 和 + 在位置上的对应。实际上，加法在本质也是一个函数。这样做的好处，不但是突出了加法的这一本质，而且它让人可以用跟定义函数一模一样的方式，来定义“运算符”！这比起 C++ 的“运算符重载”强大很多，却又极其简单。&lt;/p&gt;
&lt;p&gt;关于“前缀表达式”与“中缀表达式”，我有一个很独到的见解：我觉得“中缀表达式”其实是一种过时的，来源于传统数学的历史遗留产物。几百年以来，人们都在用 x+y 这样的符号来表示加法。之所以这样写，而不是 (+ x y)，是因为在没有计算机以前，数学公式都得写在纸上，写 x+y 显然比 (+ x y) 方便简洁。但是，中缀表达式却是容易出现歧义的。如果你有多个操作符，比如 1+2&lt;em&gt;3。那么它表示的是 (+ 1 (&lt;/em&gt; 2 3)) 呢，还是 (&lt;em&gt; (+ 1 2) 3)？所以才出现了“运算符优先级”这种东西。看见没有，S表达式已经在这里显示出它没有歧义的优点。你不需要知道 + 和 &lt;/em&gt; 的优先级，就能明白 (+ 1 (&lt;em&gt; 2 3)) 和 (&lt;/em&gt; (+ 1 2) 3) 的区别。第一个先乘后加，而第二个先加后乘。&lt;/p&gt;
&lt;p&gt;对于四则运算，这些优先级还算简单。可是一旦有了更多的操作，就容易出现混淆。这就是为什么数学（以及逻辑学）的书籍难以看懂。 实际上，那些看似复杂的公式，符号，不过是在表示一些程序里的“数据结构”，“对象”以及“函数”。大部分读数学书的时间，其实是浪费在琢磨这些公式：它们到底要表达的什么样一个“数据结构”或者“操作”！这个“琢磨”的过程，其实就是程序语言里所谓的“语法分析”（parse）。&lt;/p&gt;
&lt;p&gt;这种问题在微积分里面就更加明显。微积分难学，很大部分原因，就是因为微积分的那些传统的运算符，其实不是很好的设计。如果你想了解更好的设计，可以参考一下 Mathematica 的公式设计。试试在 Mathematica 里面输入“单行”的微积分运算（而不使用它传统的“2D语法”）。&lt;/p&gt;
&lt;p&gt;其实 Lisp 已经可以轻松地表示这种公式，比如对 x^2 进行微分，可以表示成&lt;/p&gt;
&lt;figure class=&quot;highlight scheme&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;D&lt;/span&gt; ‘(&lt;span class=&quot;name&quot;&gt;^&lt;/span&gt; x &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) ‘x)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;看到了吗？微分不过是一个用于处理符号的函数 D，输入一个表达式和另一个符号，输出一个新的表达式。&lt;/p&gt;
&lt;p&gt;同样的公式，传统的数学符号是这个样子：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/images/deriv-math.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;这是什么玩意啊？d 除以 dx，然后乘以 x 的平方？&lt;/p&gt;
&lt;p&gt;在 Lisp 里，你其实可以比较轻松地实现符号微分的计算。SICP里貌似有一节就是教你写个符号微分程序。做微积分这种无聊的事情，就是应该交给电脑去做。总之，这从一方面显示了，Lisp 的语法其实超越了传统的数学。&lt;/p&gt;
&lt;p&gt;其实我一直都在想，如果把数学看成是一种程序语言，它也许就是世界上语法最糟糕的语言。数学里的“变量”，几乎总是没有明确定义的作用域（scope）。也就是说他们只有“全局变量”。上一段话的 x，跟下一段话的 x，经常指的不是同一个东西。所以训练有素的数学家，总是避免使用同一个符号来表示两种不同的东西。很快他们就发现所有的拉丁字母都用光了，于是乎开始用希腊字母。大写的，小写的，粗体的，斜体的，花体的，…… 而其实，他们只不过是想实现 C++ 里的 “namespace”。&lt;/p&gt;
&lt;p&gt;可惜的是，很多程序语言的设计者没能摆脱数学的思想束缚，对数学和逻辑有盲目崇拜的倾向。所以他们继续在新的语言里使用中缀表达法。Haskell，ML，Coq，Agda，这些“超高级”的语言设计，其实都中了这个圈套。在 Coq 和 Agda 里面，你不但可以使用中缀表达式，还可以定义所谓的 “mixfix” 表达式。这样其实是把简单的问题复杂化。想让自己看起来像“数学”，很神秘的样子，其实是学会了数学的糟粕，自讨苦吃。&lt;/p&gt;
&lt;p&gt;另外，由于 Lisp 的表达能力和灵活性比其他语言要大很多，所以类似 C 或者 Pascal 那样的语法其实不能满足 Lisp 的需要。在 Lisp 里，你可以写 (+ 10 (if test 1 2)) 这样的代码，然而如果你使用 C 那样的无括号语法，就会发现没法很有效的嵌入里面的那个条件语句而不出现歧义。这就是为什么 C 必须使用 test? 1 : 2 这样的语法来表示 Lisp 的 if 能表示的东西。然而即使如此，你仍然会经常被迫加上一对括号，结果让程序非常难看，最后的效果其实还不如用 Lisp 的语法。在 C 这样的语言里，由于结构上有很多限制，所以才觉得那样的语法还可以。可是一旦加入 Lisp 的那些表达能力强的结构，就发现越来越难看。JavaScript（node.js）就是对此最好的一个证据。&lt;/p&gt;
&lt;p&gt;最后，从美学的角度上讲，S表达式是很美观的设计。所有的符号都用括号括起来，这形成一种“流线型”的轮廓。而且由于可以自由的换行排版，你可以轻松地对齐相关的部分。在 Haskell 里，你经常会发现一些很蹩脚，很难看的地方。这是因为中缀表达式的“操作符”，经常不能对在一起。比如，如果你有像这样一个 case 表达式：&lt;/p&gt;
&lt;figure class=&quot;highlight xl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;case x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  S&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;hort&lt;/span&gt; _ -&amp;gt;&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  V&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;eryLooooooooooooooooooooooooog&lt;/span&gt; _ -&amp;gt;&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为了美观，很多 Haskell 程序员喜欢把那两个箭头对齐。结果就成了这样：&lt;/p&gt;
&lt;figure class=&quot;highlight xl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;case x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  S&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;hort&lt;/span&gt; _                           -&amp;gt;&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  V&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;eryLooooooooooooooooooooooooog&lt;/span&gt; _ -&amp;gt;&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;作为一个菜鸟级摄影师，你不觉得第一行中间太“空”了一点吗？&lt;/p&gt;
&lt;p&gt;再来看看S表达式如何表达这东西：&lt;/p&gt;
&lt;figure class=&quot;highlight clojure&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;case&lt;/span&gt;&lt;/span&gt; x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;Short&lt;/span&gt; _) &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;VeryLooooooooooooooooooooooooog&lt;/span&gt; _) &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;发现“操作符总在最前”的好处了吗？不但容易看清楚，而且容易对齐，而且没有多余的间隙。&lt;/p&gt;
&lt;p&gt;其实我们还可以更进一步。因为箭头的两边全都用括号括起来了，所以其实我们并不需要那两个箭头就能区分“左”和“右”。所以我们可以把它简化为：&lt;/p&gt;
&lt;figure class=&quot;highlight clojure&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;case&lt;/span&gt;&lt;/span&gt; x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ((&lt;span class=&quot;name&quot;&gt;Short&lt;/span&gt; _) &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ((&lt;span class=&quot;name&quot;&gt;VeryLooooooooooooooooooooooooog&lt;/span&gt; _) &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后我们发现，这个表达式“进化”成了 Lisp 的 case 表达式。&lt;/p&gt;
&lt;p&gt;Lisp 的很多其它的设计，比如“垃圾回收”，后来被很多现代语言（比如 Java）所借鉴。可是人们遗漏了一个很重要的东西：Lisp 的语法，其实才是世界上最好的语法。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;谈语法&quot;&gt;&lt;a href=&quot;#谈语法&quot; class=&quot;headerlink&quot; title=&quot;谈语法&quot;&gt;&lt;/a&gt;谈语法&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/images/lisp_cycles.png&quot; alt=&quot;&quot;&gt;&lt;b
    
    </summary>
    
      <category term="语法" scheme="http://yoursite.com/categories/%E8%AF%AD%E6%B3%95/"/>
    
    
      <category term="转摘" scheme="http://yoursite.com/tags/%E8%BD%AC%E6%91%98/"/>
    
  </entry>
  
  <entry>
    <title>谈谈 Currying</title>
    <link href="http://yoursite.com/2016/03/15/%E8%B0%88%E8%B0%88%20Currying/"/>
    <id>http://yoursite.com/2016/03/15/谈谈 Currying/</id>
    <published>2016-03-15T11:12:55.000Z</published>
    <updated>2016-03-15T15:59:34.121Z</updated>
    
    <content type="html">&lt;h1 id=&quot;谈谈-Currying&quot;&gt;&lt;a href=&quot;#谈谈-Currying&quot; class=&quot;headerlink&quot; title=&quot;谈谈 Currying&quot;&gt;&lt;/a&gt;谈谈 Currying&lt;/h1&gt;&lt;p&gt;很多基于 lambda calculus 的程序语言，比如 ML 和 Haskell，都习惯用一种叫做 currying 的手法来表示函数。比如，如果你在 Haskell 里面这样写一个函数：&lt;br&gt;&lt;figure class=&quot;highlight cos&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;f &lt;span class=&quot;keyword&quot;&gt;x&lt;/span&gt; y = &lt;span class=&quot;keyword&quot;&gt;x&lt;/span&gt; + y&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后你就可以这样把链表里的每个元素加上 2：&lt;br&gt;&lt;figure class=&quot;highlight accesslog&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;map (f &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;[1, 2, 3]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;它会输出 [3, 4, 5]。&lt;/p&gt;
&lt;p&gt;注意本来 f 需要两个参数才能算出结果，可是这里的 (f 2) 只给了 f 一个参数。这是因为 Haskell 的函数定义的缺省方式是“currying”。Currying 其实就是用“单参数”的函数，来模拟多参数的函数。比如，上面的 f 的定义在 Scheme 里面相当于：&lt;br&gt;&lt;figure class=&quot;highlight scheme&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;define&lt;/span&gt;&lt;/span&gt; f&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;lambda&lt;/span&gt;&lt;/span&gt; (x)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;lambda&lt;/span&gt;&lt;/span&gt; (y)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;+&lt;/span&gt;&lt;/span&gt; x y))))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;它是说，函数 f，接受一个参数 x，返回另一个函数（没有名字）。这个匿名函数，如果再接受一个参数 y，就会返回 x + y。所以上面的例子里面，(f 2) 返回的是一个匿名函数，它会把 2 加到自己的参数上面返回。所以把它 map 到 [1, 2, 3]，我们就得到了 [3, 4, 5]。&lt;/p&gt;
&lt;p&gt;在这个例子里面，currying 貌似一个挺有用的东西，它让程序变得“简短”。如果不用 currying，你就需要制造另一个函数，写成这个样子：&lt;br&gt;&lt;figure class=&quot;highlight xl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;map&lt;/span&gt; (\y-&amp;gt;&lt;/span&gt;f &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; y) [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这就是为什么 Haskell 和 ML 的程序员那么喜欢 currying。这个做法其实来源于最早的 lambda calculus 的设计。因为 lambda calculus 的函数都只有一个参数，所以为了能够表示多参数的函数，有一个叫 Haskell Curry 的数学家和逻辑学家，发明了这个方法。&lt;/p&gt;
&lt;p&gt;当然，Haskell Curry 是我很尊敬的人。不过我今天想指出的是，currying 在程序设计的实践中，其实并不是想象中的那么好。大量使用 currying，其实会带来程序难以理解，复杂性增加，并且还可能因此引起意想不到的错误。&lt;/p&gt;
&lt;p&gt;不用 currying 的写法(\y-&amp;gt;f 2 y)虽然比起 currying 的写法(f 2)长了那么一点，但是它有一点好。那就是你作为一个人（而不是机器），可以很清楚的从“\y-&amp;gt;f 2 y”这个表达式，看到它的“用意”是什么。你会很清楚的看到：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“f 本来是一个需要两个参数的函数。我们只给了它第一个参数 2。我们想要把 [1, 2, 3] 这个链表里的每一个元素，放进 f 的第二个参数 y，然后把 f 返回的结果一个一个的放进返回值的链表里。”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;仔细看看上面这段话说了什么吧，再来看看 (f 2) 是否表达了同样的意思？注意，我们现在的“重点”在于你，一个人，而不在于计算机。你仔细想，不要让思维的定势来影响你的判断。&lt;/p&gt;
&lt;p&gt;你发现了吗？(f 2) 并不完全的含有 \y-&amp;gt;f 2 y 所表达的内容。因为单从 (f 2) 这个表达式（不看它的定义），你看不到“f 总共需要几个参数”这一信息，你也看不到 (f 2) 会返回什么东西。f 有可能需要2个参数，也有可能需要3个，4个，5个…… 比如，如果它需要3个参数的话，map (f 2) [1, 2, 3] 就不会返回一个整数的链表，而会返回一个函数的链表，它看起来是这样：[(\z-&amp;gt;f 2 1 z), (\z-&amp;gt;f 2 2 z), (\z-&amp;gt;f 2 3 z)]。这三个函数分别还需要一个参数，才会输出结果。&lt;/p&gt;
&lt;p&gt;这样一来，表达式 (f 2) 含有的对“人”有用的信息，就比较少了。你不能很可靠地知道这个函数接受了一个参数之后会变成什么样子。当然，你可以去看 f 的定义，然后再回来，但是这里有一种“直觉”上的开销。如果你不能同时看见这些信息，你的脑子就需要多转一道弯，你就会缺少一些重要的直觉。这种直觉能帮助你写出更好的程序。&lt;/p&gt;
&lt;p&gt;然而，currying 的问题不止在于这种“认知”的方面，有时候使用 curry 会直接带来代码复杂性的增加。比如，如果你的 f 定义不是加法，而是除法：&lt;br&gt;&lt;figure class=&quot;highlight cos&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;f &lt;span class=&quot;keyword&quot;&gt;x&lt;/span&gt; y = &lt;span class=&quot;keyword&quot;&gt;x&lt;/span&gt; / y&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后，我们现在需要把链表 [1, 2, 3] 里的每一个数都除以 2。你会怎么做呢？&lt;/p&gt;
&lt;p&gt;map (f 2) [1, 2, 3] 肯定不行，因为 2 是除数，而不是被除数。熟悉 Haskell 的人都知道，可以这样做：&lt;br&gt;&lt;figure class=&quot;highlight accesslog&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;map (flip f &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;[1, 2, 3]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;flip 的作用是“交换”两个参数的位置。它可以被定义为：&lt;br&gt;&lt;figure class=&quot;highlight cos&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;flip f &lt;span class=&quot;keyword&quot;&gt;x&lt;/span&gt; y = f y &lt;span class=&quot;keyword&quot;&gt;x&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;但是，如果 f 有 3 个参数，而我们需要把它的第 2 个参数 map 到一个链表，怎么办呢？比如，如果 f 被定义为：&lt;br&gt;&lt;figure class=&quot;highlight cos&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;f &lt;span class=&quot;keyword&quot;&gt;x&lt;/span&gt; y z = (&lt;span class=&quot;keyword&quot;&gt;x&lt;/span&gt; - y) / z&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;稍微动一下脑筋，你可能会想出这样的代码：&lt;br&gt;&lt;figure class=&quot;highlight accesslog&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;map (flip (f &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;[1, 2, 3]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;能想出这段代码说明你挺聪明，可是如果你这样写代码，那就是缺乏一些“智慧”。有时候，好的程序其实不在于显示你有多“聪明”，而在于显示你有多“笨”。现在我们就来看看笨一点的代码：&lt;br&gt;&lt;figure class=&quot;highlight livescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;map (&lt;span class=&quot;string&quot;&gt;\y&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;-&amp;gt;&lt;/span&gt; f &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; y &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;现在比较一下，你仍然觉得之前那段代码很聪明吗？如果你注意观察，就会发现 (flip (f 1) 2) 这个表达式，是多么的晦涩，多么的复杂。&lt;/p&gt;
&lt;p&gt;从 (flip (f 1) 2) 里面，你几乎看不到自己想要干什么。而 \y-&amp;gt; f 1 y 2 却很明确的显示出，你想用 1 和 2 填充掉 f 的第一，三号参数，把第二个参数留下来，然后把得到的函数 map 到链表 [1, 2, 3]。仔细看看，是不是这样的？&lt;/p&gt;
&lt;p&gt;所以你花费了挺多的脑力才把那使用 currying 的代码写出来，然后你每次看到它，还需要耗费同样多的脑力，才能明白你当时写它来干嘛。你是不是吃饱了没事干呢？&lt;/p&gt;
&lt;p&gt;练习题：如果你还不相信，就请你用 currying 的方法（加上 flip）表达下面这个语句，也就是把 f 的第一个参数 map 到链表 [1, 2, 3]：&lt;br&gt;&lt;figure class=&quot;highlight livescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;map (&lt;span class=&quot;string&quot;&gt;\y&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;-&amp;gt;&lt;/span&gt; f y &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;得到结果之后再跟上面这个语句对比，看谁更加简单？&lt;/p&gt;
&lt;p&gt;到现在你也许注意到了，以上的“笨办法”对于我们想要 map 的每一个参数，都是差不多的形式；而使用 currying 的代码，对于每个参数，形式有很大的差别。所以我们的“笨办法”其实才是以不变应万变的良策。&lt;/p&gt;
&lt;p&gt;才三个参数，currying 就显示出了它的弱点，如果超过三个参数，那就更麻烦了。所以很多人为了写 currying 的函数，特意把参数调整到方便 currying 的顺序。可是程序的设计总是有意想不到的变化。有时候你需要增加一个参数，有时候你又想减少一个参数，有时候你又会有别的用法，导致你需要调整参数的顺序…… 事先安排好的那些参数顺序，很有可能不能满足你后来的需要。即使它能满足你后来的需要，你的函数也会因为 currying 而难以看懂。&lt;/p&gt;
&lt;p&gt;这就是为什么我从来不在我的 ML 和 Haskell 程序里使用 currying 的原因。古老而美丽的理论，也许能够给我带来思想的启迪，可是未必就能带来工程中理想的效果。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;谈谈-Currying&quot;&gt;&lt;a href=&quot;#谈谈-Currying&quot; class=&quot;headerlink&quot; title=&quot;谈谈 Currying&quot;&gt;&lt;/a&gt;谈谈 Currying&lt;/h1&gt;&lt;p&gt;很多基于 lambda calculus 的程序语言，比如 ML 和
    
    </summary>
    
    
      <category term="转摘" scheme="http://yoursite.com/tags/%E8%BD%AC%E6%91%98/"/>
    
  </entry>
  
  <entry>
    <title>谈惰性求值</title>
    <link href="http://yoursite.com/2016/03/15/%E8%B0%88%E6%83%B0%E6%80%A7%E6%B1%82%E5%80%BC/"/>
    <id>http://yoursite.com/2016/03/15/谈惰性求值/</id>
    <published>2016-03-15T11:12:36.000Z</published>
    <updated>2016-03-15T15:59:28.430Z</updated>
    
    <content type="html">&lt;h1 id=&quot;谈惰性求值&quot;&gt;&lt;a href=&quot;#谈惰性求值&quot; class=&quot;headerlink&quot; title=&quot;谈惰性求值&quot;&gt;&lt;/a&gt;谈惰性求值&lt;/h1&gt;&lt;p&gt;从之前的几篇博文里面你也许已经看到了，Haskell 其实是问题相当严重的语言，然而这些问题却没有引起足够的重视。我能看到的 Haskell 的问题在于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;复杂的基于缩进的语法，使得任何编辑器都不能高效的编辑 Haskell 程序，并且使得语法分析难度加倍。对这个观点，请参考我的博文《谈语法》以及我的英文博文《Layout Syntax Considered Harmful》。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“纯函数式”的语义以及 monad 其实不是好东西。对此请参考博文《对函数式语言的误解》。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Haskell 所用的 Hindley-Milner 类型系统，其实含有一个根本性的错误。对此请参考《Hindley-Milner 类型系统的根本性错误》。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Haskell 所用的 type class，其实跟一般语言（比如 Java）里面的重载（overloading）并没有本质区别。你看到的区别都是因为 Hindley-Milner 系统和重载混合在一起产生的效果。type class 并不能比其它语言里的重载做更多的事。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这样一来，好像 Haskell 的“特征”，要么是错误的，要么就不是自己的。可是现在我再给它加上一棵稻草：Haskell 的惰性求值（lazy evaluation）方式，其实大大的限制了它的运行效率，并且使得它跟并行计算的目标相矛盾。&lt;/p&gt;
&lt;p&gt;这是一个对我已经非常明显的问题，所以我只简要的说明一下。惰性求值的方式，使得我们在“需要”一个变量的值的时候，总是有两种可能性：1）这个变量在这之前已经被求值，所以可以直接取值 2）这个变量还没有被求值，也就是说它还是一个 thunk，我们必须启动对它的求值。&lt;/p&gt;
&lt;p&gt;可能你已经发现了，这其实带来了类型系统的混乱。任何类型，不管是 Int, Bool, List, … 或者自定义数据类型，都多出了这么一个东西：thunk。它表示的是“还没有求值的计算”。Haskell 程序员一般把它叫做“bottom”，写作 |。它的意思是：死循环。因为任何 thunk 都有可能 1）返回一个预定的类型的值，或者 2）导致死循环。&lt;/p&gt;
&lt;p&gt;这有点像 C++ 和 Java 里的 null 指针，因为 null 可以被作为任何其他类型使用，却又不具有那种类型的特征，所以会产生意想不到的问题。| 给 Haskell 带来的问题没那么严重，但却一样的不可预料，难以分析和调试。对于 Haskell 来说，有可能出现这样的事情：明明写了一个很小的函数，觉得应该不会花很多时间。结果呢，因为它对某个变量取值，间接的触发了一段很耗时间的代码，所以等了老半天还没返回。想知道是哪里出了问题，却难以发现线索，因为这函数并没有直接或者间接的调用那段耗时间的代码，而是这个变量的 thunk 启动了那段代码。这就导致了程序的效率难以分析：被“惰性”搁在那里的计算，有可能在出乎你意料的地方爆发。这就是所谓“平时不烧香，临时抱佛脚。”&lt;/p&gt;
&lt;p&gt;这种不确定性，并没有带来总体计算开销的增加。然而“惰性”却在另外一方面带来了巨大的开销，这就是“问问题”的开销。每当看到一个变量，Haskell 都会问它一个问题：“你被求值了没有？”即使这变量已经被求值，而且已经被取值一百万次，Haskell 仍然会问这个问题：“你被求值了没有？”问一个变量这问题可能不要紧，可是 Haskell 会问几乎所有的变量这个问题，反复的问这个问题。这就累积成了巨大的开销。跟我在另一篇博文里谈到的“解释开销”差不多，这种问题是“运行时”的，所以没法被编译器“优化”掉。&lt;/p&gt;
&lt;p&gt;具有讽刺意味的是，Haskell 这种“纯函数式语言”的惰性求值所需要的 thunk，全都需要“副作用”才可以更新，所以它们必须被放在内存里面，而不是寄存器里面。如果你理解了我写的《对函数式语言的误解》，你就会发现连 C 程序里面的“副作用”也没有 Haskell 这么多。这样一来，处理器的寄存器其实得不到有效的利用，从而大大增加了内存的访问。我为什么可以很确信的告诉你这个呢？因为我曾经设计了一个寄存器分配算法，于是开会的时候我问 GHC 的实现者们，你们会不会对一个新的寄存器分配算法感兴趣，我可以帮你们加到 GHC 里面。结果他们说，我们不需要，因为 Haskell 到处都是 thunk，根本就没什么机会用寄存器。&lt;/p&gt;
&lt;p&gt;所以，问太多问题，没法充分利用寄存器，这使得 Haskell 在效率上大打折扣。&lt;/p&gt;
&lt;p&gt;然后我们来看看，为什么惰性求值会跟并行计算的目标相冲突。这其实很明显，它的原因就在于“惰性求值”的定义。惰性求值说：“到需要我的时候再来计算我。”而并行计算说：“到需要你的时候，你最好已经被某个处理器算出来了。”所以你看到了，并行计算要求你“勤奋”，要求你事先做好准备。而惰性求值本来就是很“懒”，怎么可能没事找事，先把自己算出来呢？由于这个问题来自于“惰性求值”的定义，所以这是不可调和的矛盾。&lt;/p&gt;
&lt;p&gt;所以，惰性求值不管是在串行处理还是在并行处理的时候，都会带来效率上的大打折扣。它是一个很鸡肋的语言特征。&lt;/p&gt;
&lt;p&gt;虽然惰性求值不能给我们带来直接的益处，但它背后的理论思想却可以启发另外的设计。如果你想真的了解惰性求值的原理，可以先看一下我写的一个惰性求值的解释器。看看如何在不到 40 行代码之内，实现 Haskell 语义的精髓：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/yinwang0/lightsabers/blob/master/interp-lazy.rkt&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/yinwang0/lightsabers/blob/master/interp-lazy.rkt&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这段代码的工作原理，我以后再专门写文章讲解。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;谈惰性求值&quot;&gt;&lt;a href=&quot;#谈惰性求值&quot; class=&quot;headerlink&quot; title=&quot;谈惰性求值&quot;&gt;&lt;/a&gt;谈惰性求值&lt;/h1&gt;&lt;p&gt;从之前的几篇博文里面你也许已经看到了，Haskell 其实是问题相当严重的语言，然而这些问题却没有引起足够的重视。我
    
    </summary>
    
    
      <category term="转摘" scheme="http://yoursite.com/tags/%E8%BD%AC%E6%91%98/"/>
    
  </entry>
  
  <entry>
    <title>谈程序的“通用性”</title>
    <link href="http://yoursite.com/2016/03/15/%E8%B0%88%E7%A8%8B%E5%BA%8F%E7%9A%84%E2%80%9C%E9%80%9A%E7%94%A8%E6%80%A7%E2%80%9D/"/>
    <id>http://yoursite.com/2016/03/15/谈程序的“通用性”/</id>
    <published>2016-03-15T11:12:19.000Z</published>
    <updated>2016-03-15T15:59:20.417Z</updated>
    
    <content type="html">&lt;h1 id=&quot;谈程序的“通用性”&quot;&gt;&lt;a href=&quot;#谈程序的“通用性”&quot; class=&quot;headerlink&quot; title=&quot;谈程序的“通用性”&quot;&gt;&lt;/a&gt;谈程序的“通用性”&lt;/h1&gt;&lt;p&gt;在现实的软件工程中，我经常发现这样的一种现象。本来用很简单的代码就可以解决的问题，却因为设计者过分的关注了“通用性”，“可维护性”和“可扩展性”，被搞得绕了几道弯，让人琢磨不透。&lt;/p&gt;
&lt;p&gt;这些人的思维方式是这样的：“将来这段代码可能会被用到更多的场合，所以我现在就考虑到扩展问题。”于是乎，他们在代码中加入了各种各样的“框架结构”，目的是为了在将来有新的需要的时候，代码能够“不加修改”就被用到新的地方。&lt;/p&gt;
&lt;p&gt;我并不否认“通用性”的价值，实际上我的某些程序通用性非常之强。可是很多人所谓的“通用性”，其实达到的是适得其反的效果。这种现象通常被称为“过度工程” (over-engineer)。关于过度工程，有一个有趣的故事：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.snopes.com/business/genius/spacepen.asp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.snopes.com/business/genius/spacepen.asp&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;传说 1960 年代美俄“太空竞赛”的时候，NASA 遇到一个严重的技术问题：宇航员需要一支可以在外太空的真空中写字的钢笔。最后 NASA 耗资150万美元研制出了这样的钢笔。可惜这种钢笔在市场上并不行销。&lt;/p&gt;
&lt;p&gt;俄国人也遇到同样的问题。他们使用了铅笔。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个故事虽然是假的，但是却具有伊索寓言的威力。现在再来看我们的软件行业，你也许会发现：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;代码需要被“重用”的场合，实际上比你想象的要少&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我发现很多人写程序的时候连“眼前特例”都没做好，就在开始“展望将来”。他们总是设想别人会重用这段代码。而实际上，由于他们的设计过于复杂，理解这设计所需的脑力开销已经高于从头开始的代价，所以大部分人其实根本不会去用他们的代码，自己重新写一个就是了。也有人到后来发现，之前写的那段代码，连自己都看不下去了，恨不得删了重来，就不要谈什么重用了。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;修改代码所需要的工作实际上比你想象的要少&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;还有一种情况是，这些被设计来“共享”的代码，其实根本没有被用在很多的地方，所以即使你完全手动的修改它们也花不了很多时间。现在再加上 IDE 技术的发展和各种先进的 refactor 工具，批量的修改代码已经不是特别麻烦的事情。曾经需要在逻辑层面上进行的可维护性设计，现在有可能只需要在 IDE 里面点几下鼠标就轻松完成。所以在考虑设计一个框架之前，你应该同时考虑到这些因素。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;“考虑”到了通用性，并不等于你就准确地“把握”住了通用性&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;很多人考虑到了通用性，却没有准确的看到，到底是哪一个部分将来可能需要修改，所以他们的设计经常抓不住关键。当有新的需要出现的时候，才发现原来设想的可能变化的部分，其实根本没有变，而原来以为不会变的地方却变了。&lt;/p&gt;
&lt;p&gt;能够准确的预测将来的需要，能够从代码中抽象出真正通用的框架，是一件非常困难的事情。它不止需要有编程的能力，而且需要对真实世界里的事物有强大的观察能力。很多人设计出来的框架，其实只是照搬别人的经验，却不能适应实际的需要。在 Java 世界里的很多 design pattern，就是这些一知半解的人设计出来的。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;初期设计的复杂性&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果在第一次的设计中就过早的考虑到将来，由此带来的多余的复杂性，有可能让初期的设计就出现问题。所以这种对于将来的变化的考虑，实际上帮了倒忙。本来如果专注于解决现在的问题，能够得到非常好的结果。但是由于“通用性”带来的复杂度，设计者的头脑每次都要多转几道弯，所以它无法设计出优雅的程序。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;理解和维护框架性代码的开销&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果你设计了框架性的代码，每个程序员为了在这个框架下编写代码，都需要理解这种框架的构造，这带来了学习的开销。一旦发现这框架有设计问题，依赖于它的代码很有可能需要修改，这又带来了修改的开销。所以加入“通用性”之后，其实带来了更多的工作。这种开销能不能得到回报，依赖于以上的多种因素。&lt;/p&gt;
&lt;p&gt;所以在设计程序的时候，我们最好是先把手上的问题解决好。如果发现这段代码还可以被用在很多别的地方，到时候再把框架从中抽象出来也不迟。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;谈程序的“通用性”&quot;&gt;&lt;a href=&quot;#谈程序的“通用性”&quot; class=&quot;headerlink&quot; title=&quot;谈程序的“通用性”&quot;&gt;&lt;/a&gt;谈程序的“通用性”&lt;/h1&gt;&lt;p&gt;在现实的软件工程中，我经常发现这样的一种现象。本来用很简单的代码就可以解决的问题，却
    
    </summary>
    
    
      <category term="转摘" scheme="http://yoursite.com/tags/%E8%BD%AC%E6%91%98/"/>
    
  </entry>
  
</feed>
