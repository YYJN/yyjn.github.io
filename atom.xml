<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wushuang’blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-03-17T15:59:43.476Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Wu Shuang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>RubySonar：一个 Ruby 静态分析器</title>
    <link href="http://yoursite.com/2016/03/17/RubySonar%EF%BC%9A%E4%B8%80%E4%B8%AA%20Ruby%20%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90%E5%99%A8/"/>
    <id>http://yoursite.com/2016/03/17/RubySonar：一个 Ruby 静态分析器/</id>
    <published>2016-03-17T15:57:08.000Z</published>
    <updated>2016-03-17T15:59:43.476Z</updated>
    
    <content type="html">&lt;p&gt;在过去一个多月时间里，我大部分时间都在做一个 Ruby 的静态分析叫做 RubySonar。它使用与 PySonar2 类似的技术，不过针对 Ruby 的语义进行了很多调整。现在这个分析器已经能够支持 Sourcegraph 的 Ruby 代码搜索和浏览。这比起之前的效果是一个很大的进步。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://sourcegraph.com/github.com/jekyll/jekyll/symbols/ruby/gem/Jekyll/Command/$classmethods/globs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://www.yinwang.org/images/rubysonar1.gif&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;在 RubySonar 的帮助下，对于很多 repo，Sourcegraph 可以搜索到比以前多几十倍甚至上百倍的符号，当然代码的使用范例也随之增加了。代码定位的准确性有很大提高，基本不会出现错位的情况了，另外还支持了局部变量的加亮，所以看起来有点像个“静态 IDE”的味道。&lt;/p&gt;
&lt;p&gt;由于 RubySonar 比起 Sourcegraph 之前用的基于 &lt;a href=&quot;http://yardoc.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;YARD&lt;/a&gt; 的分析在速度上有上百倍的提高，我们现在可以处理整个&lt;a href=&quot;https://sourcegraph.com/github.com/ruby/ruby&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ruby 标准库&lt;/a&gt;（而不只是以前的一小部分）。&lt;a href=&quot;https://sourcegraph.com/github.com/rails/rails&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ruby on Rails&lt;/a&gt; 的结果也有比较大的改善。另外，以前不支持的像&lt;a href=&quot;https://sourcegraph.com/github.com/Homebrew/homebrew&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Homebrew&lt;/a&gt; 之类的独立应用，现在也可以分析了。&lt;/p&gt;
&lt;p&gt;RubySonar 的静态分析使用跟 PySonar2 相同的跨过程，数据流+控制流分析，而且采用同样的类型推导系统，所以分析的精度是很高的。我还没有跟 Ruby 的 IDE 比较过，不过因为构架的先进性，它应该已经能处理一些现在最好的 Ruby IDE 也搞不定的事情，当然由于时间短，在细节上比起它们肯定也有不足之处。&lt;/p&gt;
&lt;p&gt;虽然 Ruby 和 Python 看起来是差不多的语言，为了把 PySonar2 改到 Ruby 上，还是做了不少的工作的。最开头我试图让它们“重用”大部分代码，只是在不一样的地方做一些条件分支进行特殊处理。可是后来发现这样越来越复杂，越来越危险。为了照顾一个语言的特性，很容易破坏掉为另一个语言已经调试好的代码。结果最后决定把它们完全分开，其中共享的代码通过手工拷贝修改。事实证明这个决定是正确的，否则到现在我可能还在为一些莫名其妙的错误伤脑筋。这个经验告诉我，所谓的 DRY（Don’t Repeat Yourself）原则其实有它的局限性。有时候真的是宁愿拷贝粘贴代码也不要共享。&lt;/p&gt;
&lt;p&gt;目前 RubySonar 还缺少对 native 库代码的支持，但是由于代码始终保持了简单的原则（RubySonar 只有 7000 多行代码），那些东西会比较容易加进去。感兴趣的 Ruby 用户可以看看自己的 repo 是否已经得到处理，如果没有的话可以来信告诉我，也欢迎给我指出其中存在的问题。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在过去一个多月时间里，我大部分时间都在做一个 Ruby 的静态分析叫做 RubySonar。它使用与 PySonar2 类似的技术，不过针对 Ruby 的语义进行了很多调整。现在这个分析器已经能够支持 Sourcegraph 的 Ruby 代码搜索和浏览。这比起之前的效果是一个很大的进步。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://sourcegraph.com/github.com/jekyll/jekyll/symbols/ruby/gem/Jekyll/Command/$classmethods/globs&quot;&gt;&lt;img src=&quot;http://www.yinwang.org/images/rubysonar1.gif&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="ruby" scheme="http://yoursite.com/tags/ruby/"/>
    
      <category term="静态分析器" scheme="http://yoursite.com/tags/%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>程序语言与……</title>
    <link href="http://yoursite.com/2016/03/17/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80%E4%B8%8E%E2%80%A6%E2%80%A6/"/>
    <id>http://yoursite.com/2016/03/17/程序语言与……/</id>
    <published>2016-03-17T15:49:31.000Z</published>
    <updated>2016-03-17T15:59:23.468Z</updated>
    
    <content type="html">&lt;p&gt;程序语言的设计类似于其它很多东西的设计。有些微妙的地方只有用过更好的设计的人才能明白。现在我就简要介绍一下我自己的体会。&lt;/p&gt;
&lt;h3 id=&quot;程序语言与微波炉&quot;&gt;&lt;a href=&quot;#程序语言与微波炉&quot; class=&quot;headerlink&quot; title=&quot;程序语言与微波炉&quot;&gt;&lt;/a&gt;程序语言与微波炉&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/resources/microwave.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;有的程序语言就像左边的，现在中国市场上流行的微波炉。布满了花哨的一年都用不到一次的专用菜单，却连最基本的 0-9 数字键都没有。输入个时间都要费脑筋组合一下，按键位置不顺手，不能一次按到位，而且还不能达到需要的精度。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;有的程序语言就像右边的，美国市场上常见的微波炉，几十年不变的设计。虽然按键很少，但十个数字键总是少不了，而且采用标准的“电话键盘”排列。十个数字能够组合产生出任意的时间，所以不管是在自己家里，别人家里，公司或者学校，你总是可以按照自己的经验，食物包装或者菜谱上的说明，迅速而精确的输入想要的时间。&lt;/p&gt;
&lt;p&gt;可惜的是，在中国你已经买不到这么简单实惠的微波炉了。我们中国人学会了美国的很多糟粕，却没有把这么简单，这么好的设计思想学过去。&lt;/p&gt;
&lt;p&gt;中国的微波炉厂商之所以放上这么多的花样，是因为商家抓住了中国人的贪便宜心理。看，一个微波炉可以煮米饭，烤肉串，还可以蒸排骨，那其他的厨具都可以不用买啦！可惜因为所以，科学道理，微波就是微波。加热牛奶剩饭之类的事它做得很好，可是要做美味佳肴它就不行了。煮米饭不如电饭煲，烤肉串不如烧烤架，蒸排骨不如蒸锅，炖东西不如砂锅…… 美国人和稍微有点经验的中国人早就知道这个道理，所以从来不期望微波炉能做超越它所擅长的事情。&lt;/p&gt;
&lt;p&gt;虽然美国人在这些硬件上非常精明，可是在软件上还没发展到那种地步，很多时候对一些不可救药的软件技术寄予太多的希望。左边的微波炉就好像某些程序语言，本来当初设计就是给标准没那么高的人用来处理很简单的网页的。可是后来有人忽然想让它成为一个“万能语言”，用来做复杂的，对性能和可靠性都很高的服务器程序甚至机器人控制程序。然后你就发现类似微波炉的问题，因为一些不可逾越的设计差别决定了它是不可能把那些事情做好的，而且对有些应用还有严重的安全隐患。当然你可以缓慢的“改进”这语言，让它慢慢的提高做这些事的水平。可是这种改进的终点也许只是另一种早已存在的语言。而且由于不想破坏已有的代码和特性，所以每一步的改进都异常艰难。这种方式远远不如直接针对需要选择不同的语言，或者设计新的语言来的迅速和有效。&lt;/p&gt;
&lt;h3 id=&quot;程序语言与减肥&quot;&gt;&lt;a href=&quot;#程序语言与减肥&quot; class=&quot;headerlink&quot; title=&quot;程序语言与减肥&quot;&gt;&lt;/a&gt;程序语言与减肥&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/images/jianfei.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;很多人都想减肥，就像很多人都想学会编程。姑且不说一味的减肥好不好，现在只谈一下什么是有效的减肥方法。&lt;/p&gt;
&lt;p&gt;我自己也有一段时间很胖，也有减肥的经历，而且非常成功。如果有一天我不小心又变胖了，我有非常科学而可靠的办法减回去。我的方法就是一句话：让每天吃进去的热量比消耗的少一些，但是不至于难受，另外适当运动来增加热量的消耗。很显然嘛，根据热力学定律，每天消耗的能量比摄入的多，多出来的部分只能通过分解你身上的物质（脂肪）来产生。我的减肥方法就像某些程序语言教会我的编程理念，是不随潮流而改变的真理。它让我的程序不管用什么语言写都优美而精悍。&lt;/p&gt;
&lt;p&gt;我不是自私的人，我希望大家都健康一点，养眼一点。我已经轻易地告诉了你减肥的终极真理，一分钱都不收，可是你不相信我。你觉得肯定没那么简单，或者你觉得那样太辛苦，自己不可能照办。这就像很多人对编程的希望：要是我不学编程也能编程该多好啊！&lt;/p&gt;
&lt;p&gt;很多程序语言就是针对这群人而产生的，它们大部分的工作花在了研究人的心理和做广告上面。它们就像电视广告里铺天盖地的减肥药：不需运动，不用节食，一个星期瘦 20 斤！它们提出各种新的术语，什么减肥茶，片，胶囊，螺旋，燃脂，纤维，宫廷，祖传，秘方，各种生化术语…… 再加上一些 PS 出来的前后效果对比图，你痛快地花不菲的价钱买了这药，然后每天好几次的像做化学实验一样精确的按时按量服用。这时候任何人跟你说这药不灵的话你都不会相信，你觉得这些人都是想跟你争夺异性的目光故意想让你继续胖下去而其实她（他）们自己背地里也吃这药，所以你对此减肥药必胜的信心有增无减。&lt;/p&gt;
&lt;p&gt;当然你不会成功。在持续服用好多个月，甚至好几年之后，你按照广告里说的“无效退款”条例要求退款。可是减肥药公司说，是你自己没有按说明书服用，或者你吃药之前肯定比现在还胖很多。你拿不出证据，后悔当初没到公证处开你当时体重的证明。可是你仍然相信，世界上一定会有真正有效的减肥药。你觉得国内的公司喜欢骗人，所以你到了美国，寻找传说中那世界一流的减肥药……&lt;/p&gt;
&lt;h3 id=&quot;程序语言与棋&quot;&gt;&lt;a href=&quot;#程序语言与棋&quot; class=&quot;headerlink&quot; title=&quot;程序语言与棋&quot;&gt;&lt;/a&gt;程序语言与棋&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/images/chess.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;有人说好的程序语言就像国际象棋（chess），在了解简单的规则之后，你就可以用它们组合出变幻无穷的棋局。而我认为，好的程序语言应该像国际象棋去掉像“王车易位”（castling）一类复杂古怪的规则。实际上，好的程序语言会更加近似于中国象棋，而不是国际象棋。中国象棋只有一条规则比较特殊—“蹩脚马”，可是它其实很直观，容易理解。其它的规则，比如兵卒过河才能横行，几乎都画在棋盘上了。&lt;/p&gt;
&lt;p&gt;可不要小看国际象棋里这少数几个特殊规则，它们需要在好几个非常特殊的条件满足之后才会生效，而且路线诡异。比如，王车易位必须满足：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;王和跟他换位的车都没有移动过&lt;/li&gt;
&lt;li&gt;王和车之间没有其它棋子&lt;/li&gt;
&lt;li&gt;王不能处于被“将军”的状态而且王在换位之后不能处于被攻击的位置但是车可以在换位后处于被攻击位置&lt;/li&gt;
&lt;li&gt;王和车处于同一条水平线上&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;另外换位的时候王和车不是直接互换位置那么简单，而是这样的路线：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/images/ChessCastlingMovie.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;一条这样的特殊规则就够伤脑筋了，据我所知国际象棋还有至少其它两条类似的规则。它们跟其他的规则组合在一起的时候就产生了组合爆炸效应，你发现每走一步，甚至貌似无关的动作都得检查它们是否会出现。你不得不随时把这么复杂的规则放在脑子里。没事找事也不要找这么麻烦的事啊。&lt;/p&gt;
&lt;p&gt;这些规则就像是要你记住 C 语言里的 ++i+i++ 或者 if (x = “foo”) {…} 是什么意思。经过多年的痛苦经历之后，你多希望不再需要理解这样的代码。可是一旦这样的规则被加到语言里面，总会有人为了显示自己的水平和记忆力去用它们。不得已，你只好陪他们玩。&lt;/p&gt;
&lt;p&gt;如果你觉得多了这些无厘头的规则会让国际象棋比中国象棋难度大或者更加有趣，那你就低估了中国象棋了。中国象棋的“游戏树复杂度”其实比国际象棋还要高，高达 10150，而国际象棋只有 10123。这跟中国象棋的棋盘要稍微大点有关系，但是总比记忆那些麻烦的规则好多了。所以相对来说中国象棋既简单又耐玩。&lt;/p&gt;
&lt;p&gt;如果国际象棋还凑合算是简单的话，大部分的程序语言就像是魔鬼棋，飞行棋，或者三国杀。它们几乎完全由类似的特殊规则构成。哇，那么多的人物，道具和特殊技，好玩！可是会玩象棋或者国际象棋的人都会觉得它们无聊透顶。&lt;/p&gt;
&lt;p&gt;那么是不是规则越简单越少的棋越好呢？围棋就比中国象棋还简单，那么围棋是不是更好玩呢？我觉得不是的。围棋对我来说太慢，太单调，棋盘太大，耗时太多，而且胜负居然不能一眼就看出来，要数好一会儿！这哪里是在玩，纯粹就是在做组合优化题嘛。我觉得这种任务适合交给电脑去做。所以其实简单也有一个界限，超过了这个界限对于人就没有很大区别了，反而会开始感觉缺少一些东西。&lt;/p&gt;
&lt;p&gt;我觉得中国象棋和围棋一样简单，它的规则虽然比围棋多，但是仍然处于人脑容易记忆的范围，而且每条规则都很直接了当，没有很隐晦的条件。中国象棋的长距离武器（车和炮）让它比围棋多了很多乐趣，而对于象，马和王的走法的限制，让它比起国际象棋多了几分安心和舒适。国际象棋的后，两个车，两个相的攻击距离和范围太大，让人觉得眼睛很辛苦，因为每一个位置都可能被从太多个方向远距离攻击。而那个王，由于可以到处乱跑，以至于你感觉不是在抓一个住在戒备森严的城堡里的人，而是一只在野外乱跑的老鼠。&lt;/p&gt;
&lt;p&gt;什么游戏会让人觉得有趣，真是一个值得研究的问题。我觉得象棋和我以前推荐过的一个游戏 Braid 里面含有同一种吸引人的设计：屈指可数但又有足够变化的简单规则，组合起来制造出许许多多的变化。这种特征其实也是鉴别一个优秀的程序语言的标准。&lt;/p&gt;
&lt;h3 id=&quot;程序语言与音乐&quot;&gt;&lt;a href=&quot;#程序语言与音乐&quot; class=&quot;headerlink&quot; title=&quot;程序语言与音乐&quot;&gt;&lt;/a&gt;程序语言与音乐&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/images/goldberg.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;程序语言就像音乐。当听过很好的音乐之后，你会自然而然的厌倦以前曾经喜欢过，为之疯狂过的那些，觉得它们很无趣，甚至很惊讶自己以前怎么会喜欢它们。当有人问你为什么不喜欢他们推荐给你的音乐，你却说不出来。你只是自然而然觉得太单调，不入耳，不对劲，甚至扰乱你美好的心情。你的判断完全是依靠声波对鼓膜的震动而引起的脑电波的起伏，而不带有任何的成见。完全根据这音乐自己，而不需要知道它的作者是谁。就像玩过像《Braid》之类的游戏之后，你再也不想玩像《生化危机》那种搞不清楚到底是自己在玩游戏还是游戏在玩自己的。你的脑子里有一种对“趣味”的新定义，但是你却说不出来它到底是怎么回事。&lt;/p&gt;
&lt;p&gt;程序语言是同样的感觉，这是一个“流行语言”招摇过市的年代。每当有人问我喜欢什么程序语言我都不好跟他说，因为一旦说出来就有显摆之嫌，而其实真正显摆的是其他人。很多人期望你的回答是他所膜拜的那个最近很热门的语言，你一旦告诉他你喜欢的语言就会被冷嘲热讽，因为你的语言不热门。他们会说你是“学院派”，而他们是“工程派”，而其实这只是给垃圾的存在找借口。他们利用你害怕自己被认为是附庸风雅或者居高临下的心理来变相地压制你，让你不敢直率的袒露自己的兴趣。你不敢显示对有些东西的不屑，而他们却可以任意的显示对真正优秀的技术的不屑。你觉得应该手下留情一些，谦虚一些，结果最后一些垃圾一样的语言就骑到你头上来，让你不得不用它们。&lt;/p&gt;
&lt;p&gt;用过很好的语言，然后自己设计过程序语言之后，我再也不对很多新的语言，或者有些人很崇拜的古老的语言感兴趣了。我完全是凭自己的感觉来判断，一些所谓的“新特性”其实是老酒换新瓶，或者是勾兑的假酒。程序语言本来就只有那么点东西，为什么有人仍然像对那些扮相的流行歌手一样热衷和疯狂。&lt;/p&gt;
&lt;p&gt;我知道这些话说了也白说，因为他们没有用过我用过的语言，他们只看到名字却感觉不到本质，他们靠别人的评价来判断，而不是靠自己的心。所以像音乐一样，只有等有一天他们忽然觉悟，就像很多年前的我一样。&lt;/p&gt;
&lt;h3 id=&quot;程序语言与武器&quot;&gt;&lt;a href=&quot;#程序语言与武器&quot; class=&quot;headerlink&quot; title=&quot;程序语言与武器&quot;&gt;&lt;/a&gt;程序语言与武器&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://weaponsman.com/?p=12534&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://www.yinwang.org/images/AK-47.png&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;前段时间 AK-47 的设计者 &lt;a href=&quot;http://en.wikipedia.org/wiki/Mikhail_Kalashnikov&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Kalashnikov&lt;/a&gt; 去世的时候，我从一篇文章了解到他设计 &lt;a href=&quot;http://weaponsman.com/?p=12534&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AK-47 的故事&lt;/a&gt;，发现 AK 跟我喜欢的程序语言设计有异曲同工之妙。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;AK 简单得就像一把锤子。它身上没有太空时代的材料。大多数汽车修理店都有可以制造出 AK 的工具。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这篇文章首先提到，AK 的高可靠性最主要来自于它的简单，而其实简单也是程序语言最重要的东西。程序员需要解决的问题一般都挺复杂，如果他们的工具再被设计得复杂，那么他们大量的脑力就被浪费在解决这语言的问题，而不是真正需要解决的问题了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Kalashnikov 开始的时候把任何有可能出问题的设计都排除在外了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;与简单的设计背道而驰，现在很多程序语言为了赶潮流或者吸引眼球，喜欢标新立异，喜欢加入很多“特性”，可是这些特性很有可能不但不解决问题，而且会制造问题。绝大部分程序员都不理解这个道理，所以有些人听说我在设计自己的语言就问我：“它有什么新特性吗？”我没法回答他们，因为我的设计几乎没有新的特性。我现在所做的一切思考和试验都是在去掉不必要的麻烦。一个语言缺少一些好的特性，以后还可以加进去，可是它如果多了一些问题特性，那一旦有人开始用就没法去掉了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;AK 上面没有袖珍和娇气的部件。这样你就不用费事在草丛里，泥地上或者溪流里找它们了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;士兵是人，会摔跤犯错误，程序员也是人，所以程序员的武器应该像士兵的武器一样，方便他们找到问题。可是很多程序语言让程序员犯错误之后花很多时间和精力才能找到错误的所在，浪费大量本来可以用来解决问题的时间。我的前同事 TJ 说他刚进入博士学习的时候花了好几个月，就为了找到 C 代码里面一个指针计算错误，导致内存结构破坏和莫名其妙的错误结果，而出现指针计算错误的位置跟错误结果出现的位置毫无关系。我也遇到过类似的问题。C 语言的指针不就像是某些武器上面的袖珍部件吗？一不小心掉在地上就找不到了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;AK 只有一个复杂一点的部件，那就是它的弹夹。弹夹的设计很大程度上影响到枪的整体性能，所以 Kalashnikov 在上面花了很多设计时间。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/images/ak-magazine.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;这个工程经验其实对于程序语言的设计者有启发意义，因为弹夹与枪主体的接口，和程序语言的函数接口很类似。Tony Hoare 在他的《&lt;a href=&quot;https://www.cs.berkeley.edu/~necula/cs263_sp14/handouts/hoarehints.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;给程序语言设计的建议&lt;/a&gt;》中也提到，函数的调用必须简单而且快速，因为调用的开销会累积起来形成很大的性能问题。可惜的是很多语言没有注意到这个问题，函数调用时总是有一堆的动态检查和重载要做，很大程度的影响了它们的性能。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;AK 的美，在于它身上没有部件具有不必要的精确性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这对于程序语言或者编程来说也是有启发意义的。有些人为了所谓的程序“正确性”，损害了它的简单性。他们的代码异常复杂，而且喜欢写很多测试，让自己感觉对程序的“质量”有个底。然而这其实是自欺欺人。这些测试不但不能保证程序的正确，它们阻碍了程序员对程序进行彻底性的修改，防止了他们看到更加简单，甚至一眼就知道是正确的解决方案。&lt;/p&gt;
&lt;p&gt;程序语言的设计也是。有些语言（特别是所谓 dependent type 的语言）想达到程序的完全正确，加入了很多很多的限制条件，要求程序员写很多的辅助声明甚至机器证明。结果很简单一个问题都需要很长的代码才能写出来，这些辅助的逻辑代码严重的影响了程序的阅读和转换。而且由于数理逻辑本身的局限性，它们经常迫使程序员的思路绕弯子。其实起到了相反的结果，让他们看不到更简单的方法。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Kalashnikov 不是天才，他不是为了发明而发明，他解决不了问题的时候就高兴地从别人那里学过来。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这是非常值得我们程序语言设计者学习的。很多程序语言专家都有盲目排斥“对手”的心理，“自己人”的东西就不假思索的表扬，对手的东西就一味的批评。最后的结果是没有把敌人的好东西学过来，让自己人吃亏。在操作系统和数据库等领域也有类似的思维方式，这是非常有害的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;直到被更好的东西取代，AK 会继续和我们在一起。什么才是“更好”，这是由历史和民族来定义的，而不是枪支设计专家。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在计算机的世界里也是一样，程序语言，操作系统，数据库…… 它们的好坏不应该是由它们的设计者决定的，而是看它们是否经得起时间的考验。很多几十年前以为是好的设计，到现在已经很明显的显示出了它们的缺点。这就是为什么我喜欢批评一些语言，操作系统和数据库的设计，因为我看到了它们在历史的长河中已经快要到达终点。自欺欺人的掩盖这些缺陷只会让我们输掉战争。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;程序语言的设计类似于其它很多东西的设计。有些微妙的地方只有用过更好的设计的人才能明白。现在我就简要介绍一下我自己的体会。&lt;/p&gt;
&lt;h3 id=&quot;程序语言与微波炉&quot;&gt;&lt;a href=&quot;#程序语言与微波炉&quot; class=&quot;headerlink&quot; title=&quot;程序语言与微波炉&quot;&gt;&lt;/a&gt;程序语言与微波炉&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/resources/microwave.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;有的程序语言就像左边的，现在中国市场上流行的微波炉。布满了花哨的一年都用不到一次的专用菜单，却连最基本的 0-9 数字键都没有。输入个时间都要费脑筋组合一下，按键位置不顺手，不能一次按到位，而且还不能达到需要的精度。&lt;br&gt;
    
    </summary>
    
    
      <category term="程序语言" scheme="http://yoursite.com/tags/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>我和权威的故事</title>
    <link href="http://yoursite.com/2016/03/17/%E6%88%91%E5%92%8C%E6%9D%83%E5%A8%81%E7%9A%84%E6%95%85%E4%BA%8B/"/>
    <id>http://yoursite.com/2016/03/17/我和权威的故事/</id>
    <published>2016-03-17T15:16:16.000Z</published>
    <updated>2016-03-17T15:24:58.263Z</updated>
    
    <content type="html">&lt;p&gt;每个人小时候心里都是没有权威的，就像每个人小时候也都不相信广告一样。可是权威就像广告，它埋伏在你的潜意识里。听一遍不信，听两遍不信，……，直到一千遍的时候，它忽然开始起作用了，而且这作用越来越强。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;消灭广告所造成的幻觉，最好的办法就是去尝试，去实地的考察它。有些虚幻的东西只要你第一次尝试就会像肥皂泡一样破灭掉。可是如果你不主动去接触它，它就会一直在你脑海里造成一种美好神圣的假象。越是得不到的越是觉得美好。很神奇的一个现象就是，权威对人思想的作用其实也跟广告一样。&lt;/p&gt;
&lt;p&gt;上大学以前的人因为没有专业，所以还不怎么崇拜权威，大不了追追歌星，影星，球星啥的。而进了大学之后，就会开始对本领域的权威耳濡目染。一遍，两遍，一千遍的听到同学们仰慕某“牛人”或者“大师”的名字，虽然从来没亲身见过，不知不觉就对这人产生了崇拜心理，然后自愧不如。不知不觉的，自己也开始附和这些说法，不自觉地提到这些大师的名字，引用他们说的话作为自己的行动指南。&lt;/p&gt;
&lt;p&gt;Donald Knuth, Dennis Ritchie, Ken Thompson, Rob Pike, … 就是通过这些途径成为了很多计算机学生的权威。以至于几十年以后，他们的一些历史遗留下来的糟糕设计和错误思想还被很多人奉为神圣。&lt;/p&gt;
&lt;h3 id=&quot;Donald-Knuth&quot;&gt;&lt;a href=&quot;#Donald-Knuth&quot; class=&quot;headerlink&quot; title=&quot;Donald Knuth&quot;&gt;&lt;/a&gt;Donald Knuth&lt;/h3&gt;&lt;p&gt;很多人（包括我）都曾经对 Knuth 和他的 The Art of Computer Programming (TAOCP) 极度崇拜。在我大学和研究生的时候，有些同学花了不少钱买回精装的 TAOCP 全三卷，说是大概不会看，但要供在书架上，镇场子。当时我本着“书非借不能读也”的原则，再加上搬家的时候书是最费力气的东西，所以坚决不买书。我就从图书馆把 TAOCP 借了来。说实话我哪里看的下去啊？那里面的程序都是用一个叫 MIX 的处理器的汇编语言写的。一个字节只有6位，每位里面可以放一个十进制数（不是二进制）！还没开始写程序呢，就开始讲数学，然后就是几十页的公式推导，证明…… 接着我就睡着了。但我总是听说有人真的看完过 TAOCP，然后就成为了大师。比尔盖茨也宣称：“要是谁看完了 TAOCP，请把简历投给我！” 在这一系列的号召和鼓吹之下，我好几次的把 TAOCP 借回来，下定决心这次一定看完这旷世奇书。每次都是雄心勃勃的开始，可从来就没看完过开头那段 MIX 机器语言和数学公式。&lt;/p&gt;
&lt;p&gt;看不懂 TAOCP 总是感觉很失败，因为看不懂 TAOCP 就成不了“大师”，可我仍然认为 Knuth 就是计算机科学的神，总能从他那学点什么吧，所以又开始折腾他的其他作品。这就是为什么我开始用 TeX，并且成为中国 TeX 界的主要“传教士”之一。为了 TeX，我把 Knuth 的 TeXbook 借回来，从头到尾看了两遍，做完所有的习题，包括最难最刁钻的那种“double bend”习题。接着又开始看 MetaFont Book，开始使用 MetaPost 进行绘图。开头还挺有成就感，可是不多久就发现学会的那些 TeX 技巧到了临场的时候就不知道该怎么用，然后就全都忘记了。这就是为什么我把 TeXbook 看了两遍，可是看完第二遍之后不久还是忘记得一干二净。&lt;/p&gt;
&lt;p&gt;师兄师姐看到我用 TeX，说怎么折腾这么过时的玩意儿。我很气愤他们以及国内学术界居然都用 Word 排版论文，就开始针锋相对，写出一系列煽动文章鼓吹 TeX 的种种好处，打击“所见即所得”这种低智商玩意儿。这还不够，又开始折腾 Knuth 设计的 MMIX 处理器，并且认为 MMIX 的寄存器环就是世界上最先进的设计。发现一些无关紧要的小错，就给 Knuth 发 email，居然拿到两张传说中的“Knuth 支票”，并且一度引以为豪。当然像所有拿到 Knuth 支票的人一样，你是不会去兑现它的，甚至有人把它们像奖状一样放在相框里。我还没那么疯狂，那两张支票一直在它们原来的信封里。多年以后我到美国想兑现那支票的时候，发现它们已经过期了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/images/knuth-checks.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;当你心里有了这样的权威，其他人的话你是不可能听得进去的，就算他们其实比你心目中的权威更具智慧也一样。在清华的时候我有时候去姚期智的小组听客串讲座。有一次请来了美国某大学一个教授讲算法，不知道怎么的我就跟他聊起 TAOCP，大概是想请教他如何学习算法。他跟我说 Knuth 的书已经比较过时了，你可以看看 MIT 的那本《算法导论》。可是这位教授的名气怎能和 Knuth 相比，这话我恁是没有听进去，仍然认为 TAOCP 隐藏了算法界最高的机要，永恒的珍宝。&lt;/p&gt;
&lt;p&gt;在清华的时候我很喜欢一门叫做“计算几何”的课，就经常跟那门课的老师交流思想。有一次我在 email 里面提到 Donald Knuth 是我的偶像，那位老师很委婉的回复道：“有偶像很好啊，Knuth 也曾经是我的偶像。” 我对“曾经”这两个字感到惊讶：难道这意味着 Knuth 现在不是他的偶像了？在我执意的询问之下他才告诉我，其实世界上还有很多更聪明的人，Knuth 并不是计算机科学的一切。你应该多看看其他人的作品，特别是一些数学家的。然后他给了我几个他觉得不错的人的名字。&lt;/p&gt;
&lt;p&gt;现在回想起来，这些话对我是有深远作用的。那位老师虽然在系里的“牛人”们眼里是个研究能力（也就是发 paper 能力）不强的人，但是他却对我的人生转折有着强有力的作用。他引导了我去追寻自己真正的兴趣，而不是去追寻虚无的名气。我发现很多人都在为着名气而进行一些自己其实不感兴趣的事情，去做一些别人觉得“牛气”的事情。我真希望他们遇到跟我一样的好老师。&lt;/p&gt;
&lt;p&gt;在现在看来，Knuth 的 TAOCP 就是所谓的“神圣的白象”（white elephant）。大家都把它供起来，其实很少有人真的看过，却要显得好像看过一样，并且看得津津有味。这就让试图看懂它的人更加自卑和着急，甚至觉得自己智商有问题。别人都看过了，我怎么就看不懂呢？其实 TAOCP 里面的大部分算法都不是 Knuth 自己设计的，而且他对别人算法的解释经常把简单的问题搞得很复杂。再加上他执意要用汇编语言，又让程序的理解难度加倍。&lt;/p&gt;
&lt;p&gt;有一句话说得好：“跟真正的大师学习，而不是跟他们的徒弟。”如果你真的要学一个算法，就应该直接去读那算法的发明者的论文，而不是转述过来的“二手知识”。二手的知识往往把发明者原来的动机和思路都给去掉了，只留下苍白无味，没有什么启发意义的“最后结果”。确实是这样的，多年以后当我看见 Knuth 计划中的几卷新的 TAOCP 的目录时，发现其中大部分的东西我已经通过更容易的方式学到了，因为我找到了这些知识的源头。&lt;/p&gt;
&lt;p&gt;所以之前的那位访问清华的教授说的其实是实话，Knuth 真的落伍了，可是就算在美国也少有人知道或者承认这个情况。有一次看一个对世界上公认最厉害的一些程序员的采访，包括总所周知的一些大牛，以及 ML 的设计者 Robin Milner，Haskell 的设计者之一 Simon Peyton Jones 等人。也不知道采访者是什么心理，在对每个人的采访中他都问，你看过 TAOCP 吗？大部分人都说看过，真是了不起的巨著，很重要啊云云。只有 Robin Milner （如果我没记错的话）比较搞笑，他说我希望我看过，但是可惜实在没时间。我一直把 TAOCP 垫在我的显示器下面，这样我工作时就可以一直看着它们 :)&lt;/p&gt;
&lt;p&gt;Knuth 说“premature optimization is the root of all evil”，然而他自己却是非常喜欢用 premature optimization 的人。他的代码里到处是莫名其妙的小聪明，小技巧。把代码弄得难懂，实际上却并没有得到很多性能的提高。有一次看 MMIX 处理器的模拟程序，发现他用来计算一个寄存器里的“1”的个数的代码非常奇怪。本来写个循环，或者用那种从末位减 1 的做法就可以了，结果他的代码用了 Programming Pearls 里面一个古怪的技巧，费了我半天时间才看懂，后来我发现这个技巧其实还不如最简单的方法。就是这些细小却又蹊跷的做法，使得 Knuth 的代码用细节掩盖了全局，所以到最后我其实也没从大体上搞懂一个处理器的模拟器应该如何工作。直到后来到 Indiana 学习了程序语言的理论之后我才发现，其实处理器模拟器（以至于处理器本身）的工作原理很简单，因为它就是一个机器代码的解释器。使用跟高级语言解释器同样的结构，你可以比较容易的写出像 MMIX 模拟器那样的东西。&lt;/p&gt;
&lt;p&gt;Knuth 最重要的一个贡献恐怕是程序语言的 parsing （语法分析），比如 LR parsing，然而 parsing 其实是一个基本不存在的人造问题。它的存在是因为人们的误解，以为程序语言需要有跟人类语言一样的语法，所以把程序语言搞得无端的复杂和困难。如果你把语法简化一下，其实根本用不着什么 LR，LALR。我最近给我自己设计的语言写了一个 parser ，从头到尾只花了两个小时，500 行 Java 代码，包括了从 lexer 一直到 AST 数据结构的一切。完全手写的代码，根本没用任何复杂的 parsing 技术和 YACC 之类的工具，甚至正则表达式都没有用。之所以可以这样，因为我的语法设计让 parsing 极其容易，比 Lisp 还要容易。Knuth 过度的强调了 parsing。他的误导使得很多人花了几十年时间来研究 parser，到现在还在不时地提出新的技术，用于设计更加复杂的语法。何必呢？这只会让程序员和编译器都更加痛苦。如果这些人把时间都花在真正的问题上，那今天的计算机科学不知道要美好多少。&lt;/p&gt;
&lt;p&gt;几乎每一本编译器教材都花大量篇幅来讲述 DFA, NFA, lexing, LL, LR, LALR…… 几乎每个学校的编译器课程都会花至少 30% 的时间来做 parser，折腾 LEX，YACC 等工具，而对于编译器真正重要的东西却没有得到很多的训练。这就是为什么 Kent Dybvig 的编译器课程如此有效，因为 Scheme 的语法非常简单，我们根本没有花时间来做 parser。我们的时间用在了思考真正的问题：做优化，实现尾递归，高阶函数…… 很多语言梦寐以求却又做不好的东西。这样的课程给了我可以发挥自己潜力的余地，我的课程编译器里面具有大量的独创写法，我的 X64 机器代码生成器生成极其短小的代码，让 Kent Dybvig 都在背地里琢磨是怎么回事。这些东西到现在也许仍然是世界上最先进的技术。&lt;/p&gt;
&lt;p&gt;一个人的思维方式似乎决定了他设计的所有东西。Knuth 的另一个最重要的发明，文学编程（Literate Programming）其实也是多此一举，制造麻烦。文学编程的错误在于认为程序语言应该像人类语言，应该适应所谓的“人类思维”。然而程序语言却是在很多方面高于人类语言的，它不应该受到人类语言里的糟粕的影响。把程序按照 Knuth 的方式分开在不同的文章段落里，造成了代码之间的关系很难搞清楚，而且极其容易出错。这个错误与“Unix 哲学”的错误类似，把程序作为一行一行的文本，而不是一个像电路图一样的数据结构。我不想在这里细说这个问题，对此我专门写了一篇文章，讲述为什么文学编程不是一个好主意。&lt;/p&gt;
&lt;p&gt;TeX 其实也是异常糟糕的设计。它过度的复杂，很少有人搞得懂怎么配置。经常为了一个简单的效果折腾很久，然后不久就忘了当时怎么做的，回头来又得重新折腾。原因就是因为 TeX 的设计缺乏一致性，特殊情况太多，而且组合（compose）能力很差。所以你需要学太多东西，而不是跟象棋一样只需要学习几个非常简单的规则，然后把它们组合起来形成无穷的变化。&lt;/p&gt;
&lt;p&gt;在程序语言设计者看来，TeX 的语言是世界上最恶劣的设计之一，但如果没有这个语言，它也许会更加糟糕。其实 TeX 之所以有一个“扩展语言”，有一个鲜为人知的小故事。在最早的时候 Knuth 的 TeX 设计里并没有一个语言。它之所以有一个语言是因为 Scheme 的发明者 Guy Steele。Knuth 设计 TeX 的那个时候 Steele 碰巧在斯坦福实习。他听说 Knuth 要设计一个排版系统，就建议他设计一个语言，以应付以后的扩展问题。在 Steele 的强烈建议和游说之下，Knuth 采纳了这个建议。可惜的是 Steele 并没能直接参加语言的设计，在短短的一个夏天之后就离开了斯坦福。&lt;/p&gt;
&lt;p&gt;Knuth 的作品里面有他的贡献和价值，TeX 的排版算法（而不是语言）也许仍然是不错的东西。可是如果因为这些好东西爱屋及乌，而把他所推崇的那些乱七八糟的设计当成神圣的话，那你自己的设计就逃脱不出同样的思维模式，让简单的事情变得复杂。仍然对 TeX 顶礼膜拜的人应该看一下 TeXmacs，看看它的作者是如何默默无闻的，彻彻底底的超越了 TeX 和 Knuth。&lt;/p&gt;
&lt;p&gt;在我看来，Knuth 是个典型的精英主义者，他觉得自己做的都是最好，最有“格调”的。他利用自己的权威和特立独行来让用户屈服于自己繁复的设计，而不是想法设计出更加易用的工具。TeX 的版本号每次更新都趋近于圆周率π，意思是完美，没有 bug。他奖励大额的支票给发现 TeX 代码里 bug 的人，用于显示自己对这些代码的自信，然而他却“冰封”了 TeX 的代码，不再填加任何新东西进去，也不再简化它的设计。当然了，如果不改进代码，自然就不会出现新的 bug，然而它的设计也就因此固步自封，停留在了几十年以前。更奇怪的是，“TeX”这个词居然不按照正常的英语发音逻辑读成”teks”。每当有人把它“读错”，就有“高手”打心眼里认为你是菜鸟，然后纠正：“那个词不读 teks，而要读‘特喝’，就像希腊语里的 chi，又像是苏格兰语的 loch，德语的 ach，西班牙语的 j 和俄语的 kh。”也许这就叫做附庸风雅吧，我是纯种的欧洲人！;-) 当一个软件连名字的发音都这么别扭，这么难掌握，那这个软件用起来会怎样？每当你提到 TeX 太不直观，就有人跟你说：“TeX 是所想即所得，比你的所见即所得好多了！”可事实是这样吗？看看 TeXmacs 吧，理解一下什么是“所见即所得+所想即所得”二位一体。&lt;/p&gt;
&lt;p&gt;我跟 Knuth 的最后一次“联系”是在我就要离开清华的时候。我从 email 告诉他我觉得中国的研究环境太浮躁了，不是做学问的好地方，想求点建议。结果他回纸信说：“可我为什么看到中国学者做出那么多杰出的研究？计算机科学不是每个人都可以做的。如果你试了这么久还不行，那说明你注定不是干这行的料。”还好，我从来没有相信他的这段话，我下定了决心要证明这是错的。多年的努力还真没有白费，今天我可以放心的说，Knuth 你错了，因为我已经在你引以为豪的多个方面超过了你。&lt;/p&gt;
&lt;h3 id=&quot;Unix&quot;&gt;&lt;a href=&quot;#Unix&quot; class=&quot;headerlink&quot; title=&quot;Unix&quot;&gt;&lt;/a&gt;Unix&lt;/h3&gt;&lt;p&gt;Unix 的创造者们是跟 Knuth 非常类似的权威，他们在我的心目中也曾经占据了重要的位置，以至于十年前我写了一篇文章叫《完全用 Linux 工作》，大力鼓吹 Unix 的“哲学”，甚至指出 Linux 不能做的事情就是不需要做的，并且介绍了一堆难用的 Unix 工具，引得很多人去折腾。可如果你知道我现在对 Unix 的态度，肯定会大吃一惊，因为在经过努力之后，我成功的“忘记”了 Unix 的几乎一切，以至于本科刚毕业的学生都会以为我是脑盲，并且以为可以在我面前炫耀自己知道的 Linux 技巧。他们不会明白，在我心里 Unix/Linux 的设计是计算机软件界目前面临的大部分问题的罪魁祸首，而他们显示给我看的，只不过是 Unix 的思想和精英主义给程序员造成的精神枷锁。其实我并不会忘记 Linux 的设计，但我已经下意识的以熟悉 Linux 的奇技淫巧为耻，所以很多时候我即使知道也要装作不知道。因为我是机器的主宰，而不是它的奴隶，所以我总是想办法让机器去帮我做更多的事，帮我记住那些无聊的细节，而不是去顺从它的设计者所谓的“哲学”。&lt;/p&gt;
&lt;p&gt;评论 Unix 和它的后裔们总是一件尴尬的事情，因为你提到它们的任何一个缺点，都会被很多人认为是优点。GNU 的含义是“GNU is Not Unix”，但很可惜的是 GNU 和 Linux 的设计从来没有摆脱过 Unix 思想的束缚。Unix 的内存管理，进程，线程，shell，进程间通信，文件系统，数据库…… 几乎都是很蹩脚的设计。所谓的“Unix 哲学”，也就是进程间通信主要依靠无结构字符串，造成了一大批过度复杂，毛病众多的工具和语言的产生：AWK，sed，Perl，…… Unix 的内存管理是按“页”而不是按“结构”分配，相当于把内存分配的任务完全推给应用程序。而且允许任意的指针操作，这就像给每个老百姓一把爱走火的枪。可是又想要“安全”，自相矛盾。没办法，不得不强制进程数据空间完全隔离，使得进程间无法直接传递数据结构。进程和线程上下文切换开销过大，造成了使用大规模并发或者分布式计算的瓶颈，导致了 goroutine 和 node.js 等“变通方法”的产生。把数据无结构的存储在文件里，无法有效的查找数据，造成了关系式数据库等过度复杂的数据解决方案的产生。再加上后来 WEB 的设计，现在的网站基本上就是补丁加补丁，一堆堆的 hack。&lt;/p&gt;
&lt;p&gt;“Unix 哲学”貌似也有好的部分，比如“每个程序只做一件事，多个程序互相合作。”然而，这个所谓的哲学其实就是程序语言（比如 Lisp）里面的模块化设计。它当然是好东西，然而这些思想被 Unix 偷来之后，有其名而无其实。很少有 Unix 程序真正只做一件事的，而且由于字符串这种通信机制的不可靠，它们之间其实不能有效地合作。有时候你换了一个版本的 make 或者 sed 之类的工具，你的 build 就莫名其妙的出问题。这就是为什么有的公司请了专门的所谓“build engineer”，因为高级别的程序员不想为这些事情操心。Lisp 程序员早就明白这个道理，所以他们尽一切可能避免使用字符串。他们设计了 S 表达式，用于结构化的传输数据。实际上 S 表达式不是“设计”出来的，它是每个人都应该首先想到的，最简单的可以表示树结构的编码方法。Lisp 的设计原则里面有一条就是：Do not encode。它的意思是，尽量不要把有用的数据编码放进字符串。Unix 的世界折腾来折腾去，XML，CORBA，…… 最后才搞出个 JSON，然而其实 JSON 完全不如 S 表达式简单和强大。Unix 就像一个脑瘤，它让人们放着最好的解决方案几十年不用，不断地设计乌七八糟的东西用来取代乌七八糟的东西。这些垃圾对人有很大的洗脑作用。前段时间我说 S 表达式比 JSON 简单，有人居然跟我说 JSON 好些，因为它结构的 field 是“无顺序”的。这让我相当无语，因为一个编码方式有没有顺序完全取决于你如何解释它。从这个意义来讲，S 表达式可以是有顺序，也可以是没有顺序的。&lt;/p&gt;
&lt;p&gt;Unix 喜欢打着“自由”和“开源”的旗号，可是它的历史却充满了政治，宗教，利益冲突和对“历史教科书”的串改。几乎所有操作系统课本的前言都会提到 Unix 的前身 Multics，而提到 Multics 的目的，都是为了衬托 Unix 的“简单”和伟大，接下去基本上就是按部就班的讲 Unix 的设计，仿佛 Unix 就是世界上唯一的操作系统一样。 课本会告诉你，Multics 由于设计太复杂，试图包罗万象，最后败在了 Unix 手下。可是如果你仔细了解一下 &lt;a href=&quot;http://www.multicians.org/myths.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Multics&lt;/a&gt; 的历史，就会发现最后一台 Multics 机器直到 2000 年还在运行，拥有 Unix/Linux 到现在还没有的先进而友好的特性，并且被它的用户所爱戴。Multics 的设计并不是没有问题（对比一下 Lisp Machine 和 &lt;a href=&quot;http://www.yinwang.org/blog-cn/2013/03/07/oberon&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Oberon&lt;/a&gt;），但是相比之下，Unix 的设计一点都不简单。Unix 抄了 Multics 最好的一些思想，有些没有抄得像，然后又引入了很多自以为聪明的糟粕。可是 Unix 靠着自己病毒一样的特征，迅速占领了市场。Unix 最开头是开源和免费的，但是后来 AT&amp;amp;T 发现这里面有利可图，所以就收回了使用权，并且开始跟很多人打官司。AT&amp;amp;T 的邪恶比起微软来，真是有过之而无不及。&lt;/p&gt;
&lt;p&gt;Unix 的很多设计是如此龌龊，很多人却又由于官僚的原因不得不用它。以至于 Unix 出现的早期怨声载道，有人甚至组织了一个 mailing list 叫“&lt;a href=&quot;http://www.mindspring.com/~blackhart&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Unix 痛恨者&lt;/a&gt;”(Unix Haters)。你很有可能把这些人当成菜鸟，可是这些人其实都用过更好的操作系统，有的甚至设计实现过更好的操作系统甚至程序语言。最后他们的叫骂声被整理为一本书，叫做 &lt;a href=&quot;http://web.mit.edu/~simsong/www/ugh.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Unix Hater’s Handbook&lt;/a&gt;。让人惊讶的是，这本书有一个“&lt;a href=&quot;http://www.popsci.com/technology/article/2011-10/thank-you-dennis-ritchie-without-whom-none-would-be-here&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;反序言&lt;/a&gt;” (anti-foreward)，作者正是 Unix 和 C 语言的设计者之一，Dennis Ritchie。这个反序言说，Unix 这座设计缺乏一致性的监狱会继续囚禁你们，聪明的囚犯会从它里面找到破绽，可惜的是自由软件基金会（FSF）会建造跟它完全兼容的监狱，只不过功能多一些。拥有三个 MIT 学位的记者，微软的研究员，Apple 的高级科学家可能还会对这座监狱的“规矩”贡献一些文字。从这些文字里，我看到了一个炫耀武力的暴君，看到了赤裸裸的权威主义和教条主义。&lt;/p&gt;
&lt;p&gt;可惜的是在软件的世界里任何糟糕的设计都可以流行，只要你的广告做得好，只要你的传教士够多。一知半解的人（比如十年前的我）最喜欢到处寻找“新奇”的东西，然后开始吹嘘它们的种种好处，进而成为它们的布道者。再加上大学计算机系的“紧跟市场”的传统，不幸的事情发生了：Unix 和它的后裔们几乎垄断了服务器操作系统的市场。由于 Unix 的垄断，现在的软件世界基本上建立在一堆堆的变通之上，并且固化之后成为了“&lt;a href=&quot;http://www.yinwang.org/blog-cn/2013/04/14/terminology/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;珍珠&lt;/a&gt;”。公司里，学校里，充满了因为知道一些 Unix 的“巧妙用法”而引以为豪的人，殊不知他们知道的只是回避一些蹩脚设计的小计俩。程序员有太多的特例和细节需要记忆，不但不抱怨，还引以为豪。很少有人想过如何从根本上解决问题，历史的教训很少有人吸取，以至于几十年前犯过的设计错误还在重现。Unix 的最大贡献，恐怕就是制造了大量的工作岗位—因为问题太多太麻烦，所以需要大量的人力来维护它的运行。&lt;/p&gt;
&lt;p&gt;现在看来，Unix 当初就是依靠《皇帝的新装》里织布工的办法封住了大家的嘴。皇帝的织布工们说：“愚蠢或者不称职的人都看不见这件衣服。”Dennis Ritchie 说：“Unix 是简单的，但只有天才才能理解这种简单。”看出来了吗？你不敢说 Unix 的设计太乱太复杂，因为这话一出口，立马会有人引用 Dennis 的话说，是你自己不够天才，所以不理解。当然了，这就意味着他比你聪明，因为只有天才才能理解这种简单嘛。哎，这种喜欢显示自己会用某种难用工具的人实在太多了。你不敢批评这些工具对用户不友好，因为你立即会被鄙视为菜鸟。&lt;/p&gt;
&lt;p&gt;Dennis Ritchie 去世了。死者长已矣，可是有些他的崇拜者在那个时候还要煽风点火，拿他的死与 Steve Jobs 的死来做对比，把像这样的照片四处转帖，好像 Steve 死错了时间，抢了 Dennis 的风头似的。然后就有人写一些这样的文章，把世界上的所有系统，所有语言都归功到 Dennis 和 Unix 身上。看到这些我明白了，所谓的“天才”就是这样被造出来的。在我看来这些是很滑稽的谬论，就像是在说有人拿一把很钝的剪刀做出了一件精美的衣服，所以这剪刀立下了汗马功劳。其实这人一边裁布一边在骂这剪刀，心想妈的这么难用，快点做出这衣服，卖了钱买把好点的！&lt;/p&gt;
&lt;p&gt;用了这么久 Apple 的产品，平心而论，虽然它们并不完美，然而它们并不是 Unix 的翻版，它们做出了摆脱 Unix 思想束缚的努力。它们本着机器为人服务的原则，而不是把人作为机器的奴隶。Mac 的很多内部设计跟 Unix 有着本质的不同。然而就是这样的系统，被 Dennis Ritchie 在他的&lt;a href=&quot;http://www.popsci.com/technology/article/2011-10/thank-you-dennis-ritchie-without-whom-none-would-be-here&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;反序言&lt;/a&gt;里面蔑称为“以 Sonic the Hedgehog 作为智力主题和交互设计基础的系统”。&lt;/p&gt;
&lt;p&gt;有谁知道，在那同样一段时间里，Lisp 的发明者 John McCarthy，ML 的发明者 Robin Milner，都相继去世了呢？那个时候我只是在 mailing list 看到有人发来简短的消息，然后默默地思念他们给我带来的启迪。我们没有觉得 Steve Jobs 的死抢了他们的风头，因为他们不需要风头。死就是要安安静静的，让知己者默哀已经足矣。出现这种事情恐怕不能怪 Dennis Ritchie 自己，然而这些 Unix 的崇拜者们，真的应该反省一下自己的做法了。&lt;/p&gt;
&lt;p&gt;Unix 的设计者们曾经在我的心里占据了一席之地，可是现在觉得他们其实代表了反动的力量，他们利用自己的影响力让这些糟糕的设计继续流传，利用人们的虚荣心，封住大部分人的嘴，形成教条主义，让你认为 Unix 的设计是必须学习的东西。很多人成为了 Unix 的传教士和跟屁虫，没有什么真实水平，就会跟着瞎起哄，把 Unix 设计者的话当成教条写进书里。可是他们的权威和名气是如此之大，让我在很多人面前只能无语。&lt;/p&gt;
&lt;h3 id=&quot;Go-语言&quot;&gt;&lt;a href=&quot;#Go-语言&quot; class=&quot;headerlink&quot; title=&quot;Go 语言&quot;&gt;&lt;/a&gt;Go 语言&lt;/h3&gt;&lt;p&gt;现在，同样这帮 Unix “大牛”们设计了 Go 语言，并且依仗自己的权威和 Google 的名气大力推广。同样的这帮跟屁虫开始使用它，吹捧它，那气势就像以为 Go 可以一统天下的样子。真正的程序语言专家们都知道，Go 的设计者其实连语言设计的门都没摸到。这不是专家们高傲，他们绝不会鄙视和嘲笑一个孩子经过自己的努力做出一个丑陋的小板凳。他们鄙视，他们嘲笑，因为做出这丑陋小板凳的不是一个天真的小孩，而是一些目空一切的人，依仗着一个目空一切的公司。他们高举着广告牌，试图让全人类都坐这样丑陋的板凳。&lt;/p&gt;
&lt;p&gt;跟当年设计 Unix 时一个德行，不虚心向其它语言和系统学习经验教训，就知道瞎猜瞎撞。自己想个什么就是什么，但其实根本就不知道自己在干什么。把很多语言都有的无关紧要的功能（比如自动格式化代码）都吹嘘成是重大的发明，真正重要的东西却被忽略。Go 语言的设计在很多方面都是历史的倒退，甚至犯下几乎所有其他语言都没有的低级错误。在语法上大做花样，却又搞得异常丑陋，连 C 和 Java 都不如。自己不理解或者实现难度大点的东西就说是不需要的，所以连很多语言支持的 parametric type（类似 Java generics）都没有，以至于没法让程序员自定义通用数据结构，只好搞出一堆特例（比如 map，make，range）来让程序员去记。这些做法都跟 Unix 如出一辙。&lt;/p&gt;
&lt;p&gt;Go 语言最鲜明的特征就是 goroutine，然而这个东西其实每个程序语言专家都知道是什么。有些语言比如 Scheme 和 ML 提供了 first-class continuation（call/cc），可以让你很容易实现像 goroutine 这样的东西，甚至实现硬件中断的“超轻量线程”。至于 Go 那种“基于接口”的类型系统设计，我在很多年前就已经试验过，并且寄予了很大的希望。结果最后经过很多的研究和思索后发现有问题，于是放弃了这个想法。很显然，我不是第一个在这个问题上失败的人，很多语言专家在使用 parametric type 以前都试图过做这种基于接口的设计，结果最后发现不是什么好东西，放弃了。然而 Go 的设计者却没有学到这些失败教训，反而把它当成宝贝。一个很显然的问题是，在 Go 里面你经常会需要使用“空接口”（interface{}），用来表示所有类型。这就像使用 C 的 void 指针一样，有着静态类型系统的麻烦，却失去了静态类型系统的好处。&lt;/p&gt;
&lt;p&gt;每当你提到 Go 没有 parametric type，Go 的拥护者们就说“我看不到这有什么用处”，就像一些非洲土著跟你说“我看不到鞋子有什么用处”一样。他们利用人们对 Java 的繁复和设计模式的仇恨，让你抛弃了它里面的少数好东西。其实 Java generics 不是 Java 首先有的。它的主要设计者其实包括 Haskell 的设计者之一 Philip Wadler。这种 parametric type 很早就出现在 ML，Haskell 等语言里面，是非常有用的东西。&lt;/p&gt;
&lt;p&gt;每当受到批评，Go 的拥护者们就托词说，Go 是“系统语言”（systems language）。这里潜在的前提就是，认为 Unix 就是唯一的“系统”，而 C 就是在 Go 以前唯一的“系统语言”，好像其他语言就写不出所谓的“系统”似的。而事实是，在 C 诞生十年以前，人们就已经在用 Algol 60 这样的高级语言来写操作系统了。由于先天不足却又大力推广，所以 Go 的很多缺陷基本已经没法修补了。这样的语言一旦流行起来就会像 Unix 一样，成为一个无休止的补丁堆。如果像 Java 或者 Haskell 这样的语言还值得批评的话，对 Go 语言的设计者我只能说，去补补课吧。&lt;/p&gt;
&lt;h3 id=&quot;Cornell&quot;&gt;&lt;a href=&quot;#Cornell&quot; class=&quot;headerlink&quot; title=&quot;Cornell&quot;&gt;&lt;/a&gt;Cornell&lt;/h3&gt;&lt;p&gt;可是权威和名气的威力还是很大的。虽然 Knuth 在我心目中的位置不再处于“垄断地位”，世界上可以占据我心里那个位置的人和事物还很多。在离开清华之后我申请了美国的大学。也许是天意也许是巧合，只有两所大学给了我 offer：Cornell 和 Indiana，而我竟然先后到了这两所大学就读。&lt;/p&gt;
&lt;p&gt;说实话，Indiana 给了我比 Cornell 更好的 offer。Cornell 给我的是一个 TA 的半工读职位，而 Indiana 给我的是一个不需要工作白拿钱的 fellowship。说实话我从来没有搞明白 Cornell 这样的“牛校”怎么会给我这样的人 offer，GPA 一般，paper 很菜，而 Indiana 却是真正在乎我的。Indiana 的 fellowship 来自 GEB 的作者 Doug Hofstadter。他从 email 了解到我的处境和我渴求真知的愿望之后，毅然决定给我，一个素不相识的人写推荐信。后来我才发现那 fellowship 的资金也是他提供的。&lt;/p&gt;
&lt;p&gt;可是 Indiana 和 Hofstadter 的名气哪里能跟 Cornell 的号称 “CS前五” 相比啊？Indiana 的 offer 晚来了几天。当收到 Indiana 的 offer 时，我已经接受了 Cornell。Hofstadter 很惊讶也很失望，因为他以为我一定会做他的学生，可是听说我接受了 Cornell 的 offer，他也不知道该怎么办。我只隐约的记得他告诉我，学校的排名并不是最重要的东西……&lt;/p&gt;
&lt;p&gt;名气和权威的力量是如此之大，它让我不去选择真正欣赏我并且能给我真知的人。有时候回想起来，我当时真的是在寻找真知吗？我明白什么叫做真知吗？&lt;/p&gt;
&lt;p&gt;Cornell 给了我什么呢？到现在想起来，它给我的东西恐怕只有教训，很多的教训。TA 的工作可不是那么好做的，基本就是苦力，你甚至会怀疑他们录取你就是为了利用你的廉价劳动力。我第一次做 TA 就是一个 200 多人在阶梯教室上的大课，教最基本的 Java 编程。虽然有好几个 TA，但任务还是很繁重。讲课的人不是教授，而是专职的讲师。这种讲师一般得靠本科生的好评来谋生，所以虽然在学术上没什么真本事，对学生真可谓是点头哈腰，服务周到。这就苦了各位 TA 了，作业要你设计，还要设计得巧妙，要准备好标准答案，之后还要批作业，批得你头脑麻木，考试要监考，之后还要批试卷。每周还得抽好几个小时来做 office hour，给学生答疑。然后你还有自己要上的课，自己的作业，自己的考试。每当考试的时候都很紧张，因为你得准备自己的考试，还要为学生的考试多做很多工作。&lt;/p&gt;
&lt;p&gt;如果真的学到了东西，这么辛苦也许还值得，可是那些教授真的是想教会你吗？有人打了个比方，说 Cornell 说要教你游泳，就把你推到水池里，任你自己扑腾。当你就要扑腾上岸时，他在你头上用榔头一砸，然后继续等你上岸。当你再次快要扑腾上岸时，他又举起一块大石头扔到你头上，这样你就可以死了，可是 Cornell 仍然等着你游上岸…… 这就是对我在 Cornell 的经历的非常确切的比喻。&lt;/p&gt;
&lt;p&gt;我在一篇老的博文里面提到过，Cornell 的学生，包括博士生，一上课就抄笔记，一天到晚都在赶作业。可其实 Cornell 不只是爱抄笔记的学生的天堂，而且是崇拜权威者的天堂。即使你不是那么的崇拜权威，你不可避免的会被一群像朝圣者一样的人围在中间，在你耳边谈论某某人多么多么的牛。不管你向同学打听哪一个教授，得到的回答总是：“哇，他很牛的！” 然后你就去上了他的几节课，觉得不咋的嘛，可是人家就说那是因为你不理解他的价值。这种气氛我好像在另一个地方感觉到过呢？啊对了，那是在 Google。这样的气氛也许并不是偶然，Cornell 的大部分 PhD 同学当时的最大愿望，就是毕业后能去 Google 工作。当然，后来 Facebook 上升成为了他们的首选。值得一提的是，Indiana 其实是更有个性的地方。我在 Indiana 的同学们一般都把去 Google 工作作为最后的选择之一。有一次一个刚来不久的学生问，如何才能进入 Google 工作？有个老教授说，那个容易，Google 招收任何能做出他们题目的人！&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://abstrusegoose.com/212&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://www.yinwang.org/images/those_who_know.png&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Cornell 的研究可以用“与时俱进”来形容，什么热门搞什么。当时 Facebook 和社交网络正在“崛起”，所以系里最热门的一个教授就是研究社交网络的。我去听过他几堂课，他用最容易的图论算法分析一些社交网络数据，然后得出一些“理论”。其中好些结论实在太显然了，我觉得街上的卖菜大妈都能猜到，还不如研究星际争霸来得有意思点。可是 Facebook 名气之大，跟着这位教授必然有出路啦，再加上有人在耳边煽风点火，所以有好多的学生为做他的 PhD 挤破了头皮，被刷下来的就只好另投门路了。每次新来一个教授都会被吹捧上天，说是多么多么的聪明，甚至称为天才。然后就有一群的人去上他的课，试图做他的学生。结果人家每节课都是背对学生面朝黑板，喃喃自语，写下一堆堆的公式和证明，一堂课总共就没回过几次头。下面的人当然是狂抄笔记，有的人甚至带着录音笔，生怕漏掉一句话。上这样的课还不如干脆把板书打印出来让大家自己回家看。人多了竞争也就难免了。上课的同学们就开始勾心斗角，三国演义的战术都拿出来了。作业做不出来就来找你讨论，等你想讨论了就说自己也没做出来。没听懂偏要故作点头状，显得听懂了，让你觉得有压力。自己越是喜欢的教授就越是说他不咋的，扯淡，然后就自己去跟他。自己不喜欢的教授就告诉你他真是厉害啊，只可惜人家不要我。直到两年后我离开 Cornell 之前，还有好些同学因为没找到教授而焦头烂额。因为两年内没有找到导师的 PhD 学生，基本上等于必须退学。&lt;/p&gt;
&lt;p&gt;当我离开 Cornell 之后，有一位国内的学生给我发 email 套磁（从系里主页上找到我的地址），问我 Cornell 情况如何。我告诉他我都已经走人了，并且告诉了他我的感觉，一天到晚抄笔记赶作业之类的。然后又问我一个刚毕业的 PhD 的情况，我说他水平不咋的，博士论文我看过了，很扯淡，解决一个根本不存在的问题。他对我说的话有点惊讶，但还是将信将疑。为了确保万无一失，他在 visiting day 的时候专程去 Cornell 考察了一下。回去又给我 email，说见到好多牛人啊，大开眼界，哪里像你说的那么不堪。还说跟那位 PhD 的导师谈过话，真是世界级的牛人那，他的博士论文也是世界一流的。我就无话可说了，仁者见仁，智者见智，随他去吧，哎。&lt;/p&gt;
&lt;p&gt;结果两年之后，我又收到这位同学的 email，说他在 Cornell 还没找到导师，走投无路了，问我有没有办法转学。&lt;/p&gt;
&lt;h3 id=&quot;图灵奖&quot;&gt;&lt;a href=&quot;#图灵奖&quot; class=&quot;headerlink&quot; title=&quot;图灵奖&quot;&gt;&lt;/a&gt;图灵奖&lt;/h3&gt;&lt;p&gt;说到这里应该有人会问这个问题，我是不是也属于那种没找到导师走投无路的人。答案是，对的，我确实没有在 Cornell 找到可以做我导师的人。然后我就猜到有人会说，就知道王垠水平不行嘛，没搞定导师，被迫退学，哈哈！可是事情其实没他们想象的那么简单。作为一个 PhD 学生，不仅必须精通学术，而且要懂得政治和行情。哦错了，其实不精通学术也行的，但是一定要懂得政治和行情！可是由于学生之间的窝里斗，他们之间的信息互通程度，是没法和教授之间的信息互通程度相比的。这就造成了“学生阶级”在这场信息战上的劣势，总是被动的被教授挑选，而不能有效地挑选适合自己的教授。&lt;/p&gt;
&lt;p&gt;进入 Cornell 之后我上了一门程序语言的课，就开始对这些东西入迷。可是由于“与时俱进”，Cornell 的研究方向并不是那么平衡的发展的，其实是很畸形的发展。程序语言领域的专家们早已因为受到忽视而转移阵地，剩下一群用纸和笔做扯淡理论的。说实话，在历史上程序语言方向曾经是 Cornell 的强项，出现了一些很厉害的成果。可是当我在 Cornell 的时候，只剩下两个名不见经传的教员，一个助理教授，一个副教授。其实 Robert Constable 也在那里，可惜的是他做了 dean 之后已经没空理学生了，以至于我两年之后都不知道这个人的存在。我当时也不知道 Cornell 有过这段历史，看不到它的研究重心的移动趋势。&lt;/p&gt;
&lt;p&gt;我不喜欢那个副教授搞的项目，大部分是在 Java 上面加上一些函数式语言早就有的功能。可是人家做的是热门语言，所以拉得到资金，备受系里亲睐，他的学生们也比较趾高气昂。初次见面的时候，我跟他的一个学生说了我的一个想法，他说：“你那也能叫研究吗？待会儿我给你看看什么是真正的研究！” 其实那只是我的一个微不足道的想法，我也没说那是研究啊。只是随便聊一下而已就这么激动 -_- 何况你们那些 Java 的东西能算是研究？我是不可能跟那样的人合作的，所以我就跟那个助理教授做了一点静态分析的项目。当然我们分析的也不是什么好东西，是用 Fortran 写的 MPI 程序。不过说实话，那个助理教授其实挺有点真知灼见，他有几句话现在仍然在指引我，防止我误入歧途。其中一句话是针对我对 π-calculus 的盲目崇拜 说的：“那些理论其实不管用的。最好是针对自己的问题，自己动脑筋想。” 他也是很谦虚很善良的人，可是好人不一定有好报的。后来他没有拿到 tenure 职位，不得不离开 Cornell 加入了工业界，而我就失去了最后一个有可能在程序语言方向做我的导师的人。&lt;/p&gt;
&lt;p&gt;没办法，我就开始探索其它相关领域的教授，比如做数据库的，做系统的，看他们对相关的语言设计是否感兴趣。可惜他们都不感兴趣，而且告诉我程序语言领域太狭窄了。我当时还将信将疑，甚至附和他们的说法，可是现在我断定他们都是一知半解胡说八道。如果这些人虚心向程序语言专家请教，现在数据库和操作系统的设计也不会那么垃圾，关系式，SQL，NoSQL，…… 一个比一个扯淡。没有办法，我就开始探索其他的方向，开始了解图形学和数值分析等东西，进展很不错。可是终究我还是发现，我不喜欢图形学和数值分析所用的语言。我想制造出更好的程序语言来解决这些问题。可是跟教授们谈这些想法的时候就感觉是在对牛弹琴，他们完全不能理解。后来我发现，教授们貌似不喜欢有自己想法的学生，他们更希望找到愿意“打下手”的学生，帮助实现他们自己的想法。&lt;/p&gt;
&lt;p&gt;这就让我走到了跟那位向我打听 Cornell 情况的同学差不多的局面，真是心里有许多的苦却没有人可以理解。这时候我想到了系里的一些德高望重的教授，比如得过图灵奖的人，也许这些顶级的大牛会给我指出方向。于是我就联系到一位图灵奖得主，说想找他聊聊。我说我感兴趣的东西 Cornell 貌似并不重视和发展。Cornell 的校训是“any person, any study”，而我想 study 的东西却得不到支持。最后我谈了一下我对 Cornell 的总体感受。我说我觉得大家上课死记硬背，不是很 intellectual，我不是很确定学术界是否还保留有它原来的对智慧和真知的向往。&lt;/p&gt;
&lt;p&gt;我很诚恳的告诉了他这些，只是希望得到一些建议。结果他不但没有理解任何一点，而且立马开始用质问的语气问我，你成绩怎么样？考试都通过了没有？哎，说白了就是想搞清楚你是不是成绩不好没人要。怎么就跟高中教导主任一样。于是乎那次谈话就这样不了了之。可是没有想到，这次谈话就造成了我最后的离别。在学生们互相之间勾心斗角，不通信息的同时，系里的教授们其实背后都是“通气”的。他们根本不懂得如何教学，就知道拿作业和考试往学生头上砸，幸存下来的就各自挑去做徒弟，挨不住的就打发掉。这算盘打得真是妙啊。我也不知道他们是什么机制，每个学生对哪些教授感兴趣，表现如何，他们貌似都了如指掌，貌似背后有个什么情报网。然后系里的教授们不知道怎么的，仿佛就都知道有这样一个不知趣的学生，居然敢说学术界的坏话！&lt;/p&gt;
&lt;p&gt;大地震前夕的天空总是异常的美。我竟然在过道里看到那位图灵奖教授对我点头致意并且微笑，以前做 TA 时把我呼来唤去还横竖不满意的教授也对我笑脸相迎。我仿佛觉得那一席话打动了那位德高望重的教授，再加上在图形学和数值计算的扎实进展，也许我的学术生涯有了转机。可是，我那一次真正的领悟了什么叫做所谓的“笑里藏刀”。&lt;/p&gt;
&lt;p&gt;由于那个学期上的图形学还有矩阵计算的课成绩都不错，我心想应该能找这两门课的授课教授的其中一个做导师吧。再加上那些貌似友好的笑容…… 所以没想很多，居然过了一个非常快乐的寒假。没有任何前兆，没有任何直接的通知（email，电话），一封纸信不知道是什么时候默默地进到了我在系里的“信箱”—一个我基本上从来不看的，系里用来塞广告信息的信夹子里，直到下一个学期开始的时候（2月份）我才发现。信是系主任写的，大概就是说，由于你的表现，我们觉得 Cornell 不是适合你的地方……&lt;/p&gt;
&lt;p&gt;说得对，我也觉得 Cornell 不适合我。我本来就有想走的意思，可我一般呆在一个地方就懒得动。如果你们早一点告诉我这个，比如12月以前，我还可以申请转学到其它学校。可是都 2 月份了才收到这样的东西，Cornell 啊 Cornell，你让我现在怎么办？我想我可以说你不仁不义吧？&lt;/p&gt;
&lt;p&gt;在这个万分窘迫的时候，我想起了曾经关心过我却又很失望的 Hofstadter。我告诉他我在 Cornell 很不开心，我很想研究程序语言，可是 Cornell 不理解也不在乎这个领域。他回信说，没有关系，你能找到自己喜欢的东西就应该去追寻它。Indiana 的 Dan Friedman 正好是做程序语言的，你可以联系他，就说是我介绍你去的。&lt;/p&gt;
&lt;p&gt;于是给 Friedman 发了 email，很快得到了回信说：“Yin，两年前我们都看过你的材料，我们觉得你是非常出众的学生，可惜你最后没有选择我们。你要明白，人生最重要的事情不是名利，而是找到你愿意合作的人。你的材料都还在我们这里。现在招生已经快结束了，但是我会把你的材料提交给招生委员会，让他们破例再次考虑你的申请。” 我和 &lt;a href=&quot;http://www.yinwang.org/blog-cn/2012/07/04/dan-friedman&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dan Friedman 的故事&lt;/a&gt;就从这里开始了。&lt;/p&gt;
&lt;p&gt;我在 Cornell 的遭遇貌似不可告人的耻辱和秘密，然而我今天却可以把它公之于世，因为 Cornell 不再有任何资格来评价我。依靠自己的努力和 Indiana 的老师们的培养，我的水平已经超越了 Cornell 计算机系的大部分教授。现在我觉得自己就像那个到 Cornell 学“游泳精髓”人，本来就是会游泳的，可是每到岸边 Cornell 就搬起大石头来砸我，还说我不会游。于是我钻到水底下钻了一个洞，把水放干。&lt;/p&gt;
&lt;p&gt;由于曾经与多位图灵奖得主发生不大愉快的遭遇，再加上在自己的研究中多次受到其它图灵奖得主的理论的误导，而且许多位图灵奖得主最主要的贡献仍然在给软件行业带来混乱，图灵奖这个被许多计算机学生膜拜的神物，其实在我心里已经没有任何效力了。很多人可能对此难以想象，可是对图灵奖是这种态度的不只我一个人。我认识的几乎所有程序语言专家几乎都不拿图灵奖当回事，而且其中很多人甚至不拿图灵本人当回事，觉得他设计了一些非常丑陋的东西。虽然我现在觉得图灵的研究成果确实有一定价值，但由于上面的原因，拿图灵奖来开玩笑还是成为了我的家常便饭。我甚至觉得 ACM 应该停发这个奖，因为它是一种非常虚幻和政治的东西。每当人们谈起这些“大奖”煞有介事的时候，就让我看到了他们的愚昧。&lt;/p&gt;
&lt;h3 id=&quot;常青藤联盟和“世界一流大学”&quot;&gt;&lt;a href=&quot;#常青藤联盟和“世界一流大学”&quot; class=&quot;headerlink&quot; title=&quot;常青藤联盟和“世界一流大学”&quot;&gt;&lt;/a&gt;常青藤联盟和“世界一流大学”&lt;/h3&gt;&lt;p&gt;我在 Cornell 的经历应该不是偶然，不是因为我比较特殊。跟我同时进入 Cornell 的博士生有好几个没有拿学位就离开了。其中有一个是非常聪明的少年班，18岁就读 PhD 了，我根本听不懂的理论课他还能拿A。可是四年后他退学去了 Facebook，说真是太难毕业了，神马都是扯淡。有些本科生也告诉我类似的经历，说被一个叫做“笑面虎”的教授“整了”。Cornell 的自杀率居美国大学前列。离开以后的有一天，忽然看到&lt;a href=&quot;http://www.nytimes.com/2010/03/17/education/17cornell.html?_r=0&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;新闻报道&lt;/a&gt;说一周之内有三个 Cornell 学生从瀑布旁边的那座桥跳下去，结果派了警察在桥上日夜巡逻。我觉得自己在 Cornell 所感受到的压力确实超乎想象，是有可能把人逼上绝路的。现在回想起来真是可笑，因为下意识里在乎权威和名气，我给予了一群根本没有资格来教育我的人莫大的权力，让他们可以向我施加无端的压力。&lt;/p&gt;
&lt;p&gt;应该指出，这种现象应该不是 Cornell 所特有的。我对清华，还有 Princeton，Harvard，MIT，Stanford，Berkeley，CMU 等学校的学生都有了解。这些所谓的“世界一流大学”或者“世界一流大学 wannabee”差不多都是类似的气氛。你冲着它们的名气和“关系网”挤破了头皮进去，然后就每天有人在你耳边对其它人感叹：哇，他好牛啊！发了好多 paper，还得了XX奖。跟参加传销大会似的，让你怀疑这些人还有没有自尊。然后就是填鸭式的教育，无止境的作业和考试，让你感觉他们不是在“教育”你，而是在“筛选”你。这种筛选总是筛掉最差的，但也筛掉最好的。因为最好的学生能意识到你在干什么，他们不给你筛选他们的机会。一旦发现其实没学到东西，中途就辍学出去创业了。所以剩下来的就是最一般的，循规蹈矩听话的。在这样的环境里，你感觉不到真正的智慧和真知的存在。GRE 考试所鼓吹的什么“批判性思维”（critical thinking ）在美国大学里其实是相当缺乏的。学生们只不过是在被培训成为某些其他人的工具，他们具有固定的思维定势，像是一个模子倒出来的。他们不是真正的创造者和开拓者。&lt;/p&gt;
&lt;p&gt;人们在这些大学里的时候都是差不多感受的，可是一旦他们出来了，就会对此绝口不提。自己身上挂着这些学校的镀金牌子，怎么能砸了自己的品牌，长别人的威风？所以每当我批判 Cornell 就有些以前的同学一脸的着急相，好像自己没有吃过那苦头一样。&lt;/p&gt;
&lt;h3 id=&quot;程序语言专家&quot;&gt;&lt;a href=&quot;#程序语言专家&quot; class=&quot;headerlink&quot; title=&quot;程序语言专家&quot;&gt;&lt;/a&gt;程序语言专家&lt;/h3&gt;&lt;p&gt;虽然我在 Indiana 得到了思想的自由，但这种自由其实是以孤独为代价的。我并不是一个自高自大不合群的人，但是我不喜欢跟一群像追星族一样的人在一起。应该说在 Indiana 的日子里，权威主义的影子也是经常出现的。Indiana 学生们的权威比较特殊一点，不然就是 Dan Friedman，不然就是 Kent Dybvig。Friedman 的身边总是围绕着一群自认为是天才的本科生，喜欢拍他的马屁，喜欢在人面前炫耀。博士生们开始时貌似还比较酷，可是后来发现其实也有很多类似现象，急于表现自己，越是研究能力弱的人越是爱表现。所以你就发现有人开头为了混进这个圈子拍你的马屁，过了两年就开始自高自大，而且经常想这样来压倒你：“Kent 说过……”我很尊敬 Dan 和 Kent，但我其实在很多方面已经超越了他们。我看到他们的一些思维方式并不是那么的正确，我也从来不引用他们的话作为理论依据。对权威的崇拜其实显示了一个人心理的弱小。如果你对自己有信心，有自己的想法和判断力，又何必抬出个名人来压制别人呢？&lt;/p&gt;
&lt;p&gt;在我自己心里毫无疑问的是，我是 Indiana 最厉害的程序语言（PL）学生。由于我不断地动手尝试新的想法，所以几乎没有任何其他人的研究逃脱过我的探索。我从来不记录自己的半成品和失败（因为太多了），而且我对自己的标准异常的高，所以我经常看到有人做演讲或者写论文，里面其实是我很久以前尝试过又抛弃了的想法。有时候我去听别人的演讲，就会立即看出破绽，问一些演讲者答不出来的问题。其实很多时候我只是怀疑自己，我试图给那些想法再一次的机会来证明它们的价值，而且问得相当委婉，但那样的问题仍然是不受欢迎的，所以同学们甚至一些助理教授看到我在场都是心惊胆战的。吃饭的时候我也不喜欢旁边的人讨论问题，因为他们经常显示出对理论提出者的膜拜心理，而且煞有介事，可惜那些经常是我早就知道不管用的理论。他们有时候其实也知道那些是扯淡的，但却又怕我捅破这窗户纸，所以就像鸵鸟一样把头埋在沙子下面。&lt;/p&gt;
&lt;p&gt;我也想合群一点，但是屡试不爽，所以后来我就基本是孤立的做自己的研究了。最开头是不得已，但后来就越来越喜欢独自一人。这是不可避免的，因为创造力和孤独几乎是双胞胎。因为免去了跟人讨论的时间，我有了大把的时间来做自己的探索。然后我才发现当年期望的那种 common room 其实没什么用，因为那里根本不会有人理解你在说什么。现在即使有这样的地方我也不会去了。&lt;/p&gt;
&lt;p&gt;我从一开始进入 Indiana 就没想过要拿博士学位，我只是在玩弄这个系统以达到我求知的目的。所以除非危及到我的存在，我把学校对学位的各种要求都抛到了九霄云外。给教授做 RA 几乎总是被要求研究各种毫无前途的东西，与我自己的思考相冲突，所以我后来干脆都做 TA 了。虽然累点，但不怎么费脑力。其结果是，在短短的一两年时间之内，我利用自己抠出来的时间，独自摸索出了这个领域大部分的理论。我经常不看书不看论文，在一个星期之内解决别人十多年才完成的研究。让人惊讶的应该不是我有多么聪明，而是这些研究者们十年来到底在干什么。我从来不认为自己比别人聪明，我只是觉得很多人的脑子被禁锢了而已。我有非常简单的头脑，我看不懂复杂的公式，听不懂高深的术语。可正是因为这一点，让我脱离了已有理论的困扰。&lt;/p&gt;
&lt;p&gt;可以说，这个领域在过去一个多世纪的研究，很少有逃脱过我的洞察力和直觉的。这些研究最早可以追溯到 1870 年代。我一般很少看论文，因为自己想清楚一个问题其实花不了那么多时间的。看别人的论文一般都枯燥乏味，所以与其花那么多时间读论文还不如自己思考。当我看论文的时候，一般是想搞清楚自己琢磨出来的问题有没有人已经研究过了，所以很多论文只需要扫一下就够了。我看到一个东西一般很快就会知道它到底会不会管用。我经常发现一些被认为很艰深的理论其实是在解决根本不存在的问题，甚至是在制造问题，而真正的问题却没有得到有效的解决。很多问题其实是权威的阴影造成的，它让人们不敢否认这些大牛思想的价值，不敢揭穿它们，抛弃它们，甚至想让自己寄生在它们上面，所以很多的时间花在了解决一些历史遗留问题，而不是真正的问题。这就是为什么我的英文 blog 标题叫做“&lt;a href=&quot;http://yinwang0.wordpress.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Surely I Am Joking&lt;/a&gt;”，因为它记录了一些我认为根本不存在，或者是人为造成的问题。&lt;/p&gt;
&lt;h3 id=&quot;逻辑学家&quot;&gt;&lt;a href=&quot;#逻辑学家&quot; class=&quot;headerlink&quot; title=&quot;逻辑学家&quot;&gt;&lt;/a&gt;逻辑学家&lt;/h3&gt;&lt;p&gt;批评 PL 领域的问题并不意味着其它领域就好一些。恰恰相反，我认为做系统和数据库的领域有更大的权威崇拜和扯淡的成分。有时候程序语言专家看起来很明显的问题，做数据库和操作系统的人却看不到，扯来扯去扯不清楚，还自以为是的认为 PL 的东西他们都懂。&lt;/p&gt;
&lt;p&gt;程序语言的理论是计算机科学的精髓所在，可是程序语言专家有他们自己的问题：他们膜拜逻辑学家。几乎每一篇 PL 领域的论文，至少有一页纸里面排列着天罡北斗阵一样的稀奇古怪的逻辑符号，而它们表示的其实不过是一些可以用程序语言轻松做出来的解释器和数据结构。有人（比如 Kent Dybivg）早就发现了这个规律，所以写了一些工具，可以把程序语言自动转换成 LaTeX 格式的逻辑公式，用以对付论文的写作。&lt;/p&gt;
&lt;p&gt;有人觉得那些公式有“数学的美感”，可是它们其实是挺有毛病的设计。如果你看看现代逻辑学鼻祖 Gottlob Frege 的原著，就会发现其实最早的时候逻辑学不是用公式表示的。Frege 那篇开创性的论文 Begriffsschrift 里面全都是像电路图一样的图片，只有 20 多页，而且非常容易读懂。不知道是哪一个后辈把电路图改成了一些稀奇古怪的符号。其实他的目的是用符号来表示那些电路图，结果到后来徒孙们以为那些符号就是祖传秘籍的精髓，忘记了那些符号背后的电路图，所以导致了今天的混乱局面。看完了 Frege 的论文，我再一次领悟到了之前那句话：跟真正的大师学习，而不是跟他们的徒弟。&lt;/p&gt;
&lt;p&gt;ACM SIGPLAN 的主席 Philip Wadler 有一次写了一篇论文介绍 &lt;a href=&quot;http://en.wikipedia.org/wiki/Curry%E2%80%93Howard_correspondence&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Curry-Howard corresponce&lt;/a&gt;，里面提到，好的点子逻辑学家总是比我们先想到。可是他却没有发现，其实程序语言的能力已经大大超越了数理逻辑，数理逻辑那些公式里面的 bug 其实不少。因为逻辑学家们不用机器帮助进行推理，有些问题搞了一百多年都搞不清楚是怎么回事，然后就弄出一些特殊情况和补丁来。有了一堆逻辑“定理”，却又不能确信它们是正确的，而且存在悖论一类无厘头的东西，所以又掰出一些 model theory 之类的东西来验证它们的正确性。逻辑学家们折腾了一百多年都是在折腾类似的事情，却没怀疑过老祖宗的设计。我之前提到的 &lt;a href=&quot;http://yinwang0.wordpress.com/2012/10/19/type-inference&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hindley-Milner 系统&lt;/a&gt;的问题，很大部分原因就在于它所使用的逻辑里面其实有一个根本性的误解。简言之，就是把全称量词 ∀ 随意乱放，导致输入与输出关系混乱。这也就是我为什么不喜欢 Haskell 和 OCaml 的最主要原因。&lt;/p&gt;
&lt;p&gt;现在最热门的逻辑学家莫过于 &lt;a href=&quot;http://en.wikipedia.org/wiki/Per_Martin-L%C3%B6f&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Per Martin-Löf&lt;/a&gt;。他的类型理论 Martin-Löf Type Theory 被很多 PL 人奉为神圣。我一直没有搞清楚这个类型理论有什么特别，直到有一天我把 Martin-Löf 1980 年的那篇论文（其实是演讲稿）拿出来看了一遍。然后我发现他通篇本质上就是在讲一个 partial evaluator 要怎么写，而我早就自己写过 partial evaluator。其实并不是特别神奇的东西，只需要在普通解释器里面改一两行代码就行，可是有人（比如 Neil Jones）却为此写出了 &lt;a href=&quot;http://www.itu.dk/~sestoft/pebook/pebook.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;400 多页的书&lt;/a&gt;和大量的论文。&lt;/p&gt;
&lt;p&gt;之前提到的 Curry-Howard corresponce 也被很多人奉为神圣，它来自数学家 Haskell Curry 和逻辑学家 W.A. Howard 的一些早期发现。他们发现有些程序和定理的证明之间有对应的关系。然后就有 PL 专家开始走火入魔，说“程序就是证明，程序的类型就是定理”。可是他们却没有发现这个说法没法解释操作系统这种程序，因为它被设计为永远不停地运行，所以不能满足一个证明所具有的基本特征。而且很多程序被设计出来根本就不是要证明什么定理，它们是被设计来帮人做事情的。所以我觉得“程序就是证明”是很牵强附会的说法，你不能因为有的程序可以用来证明数学定理，就认为所有的程序都是某个定理的证明啊！把那句话反过来，说成“证明就是程序”还差不多。&lt;/p&gt;
&lt;p&gt;但从以上的发现，我很高兴的看到了自己作为一个程序员的价值。很多人瞧不起程序员，把他们蔑称为“码农”，可是程序如果写好了，其实比起那些高深的逻辑学家和哲学家还要强，因为程序语言其实比数理逻辑还要强。有一位数学家说得好：为了真正深入的理解一个东西，你应该把它写成程序。还有人说，编程只是一门失传的艺术的别名，这门艺术叫做“思考”。我觉得很在理。&lt;/p&gt;
&lt;h3 id=&quot;再见了，权威们&quot;&gt;&lt;a href=&quot;#再见了，权威们&quot; class=&quot;headerlink&quot; title=&quot;再见了，权威们&quot;&gt;&lt;/a&gt;再见了，权威们&lt;/h3&gt;&lt;p&gt;几经颠簸的求学生涯，让我获得了异常强大的力量。我的力量不仅来自于老师们的教诲，而且在于我自己不懈的追求，因为机会只亲睐有准备的头脑。&lt;/p&gt;
&lt;p&gt;曾经 Knuth 是我心中唯一的权威，后来我又屈服于 Cornell 和常青藤联盟的权威和名气。在一而再再而三的上当受骗之后，我终于把所有的权威们从我的脑子里轰了下去。也许有时候轰得太猛烈了一些，但总的说来是有好处的。不再是我心目中的权威并不等于我鄙视他们或者不尊敬他们。我只是获得了不用膜拜他们，不用跟一群人瞎起哄的自由。我不尊敬的人都是一些自视过高的人或者他们的跟屁虫。一般来说，权威们在我的脑子里失去的只是他们在很多其他人脑子里的那种被膜拜的地位，那种你可以用“XX人说过……”来压倒理性分析的地位。现在他们在我心目中是一群普通的，由蛋白质形成的生物，有好心肠或者坏心眼的，高傲，谦虚或者虚伪的人。我不会自讨苦吃，他们的想法如果真的好，我当然要拿来用，但是没有任何人的东西我是不加批判全盘接受的。我深深地知道接受错误想法的危害性，所以我也希望大家都具有批判的思维，不要盲目的接受我说的话。我不喜欢“大神”或者“牛人”这种称呼，我也反感那种自称膜拜我的人，因为正是这种人让权威主义现在横行于世。&lt;/p&gt;
&lt;p&gt;美国的权威主义胜于欧洲，但也不是每个人都那么的崇拜权威，而中国才是权威主义的重灾区。像“图灵奖得主XX”这样的称呼，恐怕只有在中国才见得到。所以我希望国内的同学们，不要盲目的崇拜国外的所谓“大师”，“牛校”或者“牛公司”。祝你们早日消灭掉心里的各种权威以及对他们的畏惧心理，认识到自己的价值和力量。&lt;/p&gt;
&lt;h3 id=&quot;后记（关于-IU）&quot;&gt;&lt;a href=&quot;#后记（关于-IU）&quot; class=&quot;headerlink&quot; title=&quot;后记（关于 IU）&quot;&gt;&lt;/a&gt;后记（关于 IU）&lt;/h3&gt;&lt;p&gt;有些人看了我的文章介绍在 IU 的经历，告诉我他们申请了 IU。我觉得有必要免责声明一下：我没想到，也不希望有人因为我的文章而去 IU，&lt;a href=&quot;http://en.wiktionary.org/wiki/your_mileage_may_vary&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;YMMV&lt;/a&gt; (your mileage may vary)。由于我有所准备，所以对于 Friedman 的教学如鱼得水。很多同学也说学到很多，可是有一些其他人告诉我他们觉得 Friedman 的课他们听起来很吃力，只能说是勉强过关。而且我只介绍了 IU 好的方面，却把不大好的地方一笔带过了。我在 IU 也有很艰难的时候。现在的情况是 Kent Dybvig 已经离开了 IU，加入了 Cisco。他的公司 Cadence Research Systems 和 Chez Scheme 也并入了 Cisco。Dan Friedman 由于年纪原因说不准还带不带学生。最近引进了一些貌似不错的助理教授，但是我跟他们都不熟。我的经验是助理教授一般都会为了研究资金，为了升为正教授而做一些身不由己的事情。其他的 CS 方向我都说不准 IU 是什么水平，所以还请同学们自己斟酌。我可以毫无疑问的一点是，IU 有非常美丽的校园，大大的超过清华，北大，Cornell，Stanford，MIT。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;每个人小时候心里都是没有权威的，就像每个人小时候也都不相信广告一样。可是权威就像广告，它埋伏在你的潜意识里。听一遍不信，听两遍不信，……，直到一千遍的时候，它忽然开始起作用了，而且这作用越来越强。&lt;/p&gt;
    
    </summary>
    
    
      <category term="权威" scheme="http://yoursite.com/tags/%E6%9D%83%E5%A8%81/"/>
    
  </entry>
  
  <entry>
    <title>PySonar2 开源了</title>
    <link href="http://yoursite.com/2016/03/17/PySonar2%20%E5%BC%80%E6%BA%90%E4%BA%86/"/>
    <id>http://yoursite.com/2016/03/17/PySonar2 开源了/</id>
    <published>2016-03-17T15:13:00.000Z</published>
    <updated>2016-03-17T15:14:52.906Z</updated>
    
    <content type="html">&lt;p&gt;经过 Google 的许可，我现在将 &lt;a href=&quot;http://yinwang0.wordpress.com/2010/09/12/pysonar&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PySonar&lt;/a&gt; 第二版本开源，就叫 PySonar2 吧。代码可以在我的 GitHub 下载：&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/yinwang0/pysonar2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/yinwang0/pysonar2&lt;/a&gt;&lt;br&gt;经过一阵子考察之后，我发现 PySonar2 仍然是当今最先进的 Python 静态分析器。其分析的深度和准确程度其实超过了所有的 Python IDE （包括 PyCharm 3.0 在内）。PySonar2 做的是跨过程，具有精确控制流的分析，而现在最好的 Python IDE 仍然是局部过程分析。&lt;/p&gt;
&lt;p&gt;PySonar2 的工作原理却极其简单，说白了就是：写一个 Python 解释器，然后想办法让它“停机”。实际上这个简单的方法超过了一些程序语言研究者花几十年做出来的“艰深理论”。比如 Olin Shivers 及其学生们的 control-flow analysis 系列 20 多年来的成果，当我看他们的论文的时候，发现他们其实在解决一个自己（不小心）造出来的问题。我一开头什么都不知道，全凭自己感觉出发，所以就没有走上那条不归路 ;-)&lt;/p&gt;
&lt;p&gt;另外，其实给 Google 的代码里有一个很“严重”的 bug，导致算法成为指数时间复杂度，所以他们其实仍然在用第一版的代码 ;-) &lt;a href=&quot;http://www.sourcegraph.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Sourcegraph.com&lt;/a&gt; 使用的也是第一版的代码。在 Coverity 的时候，我从他们的代码里面也发现同样的问题，对某些 benchmark 运行时间太长。最后被我两行代码修好了（虽然找到这两行代码花了好几天）。&lt;/p&gt;
&lt;p&gt;最近重新燃起了对 PySonar 代码的兴趣。经过修改两行代码之后，这个性质与 Coverity 完全一样的 bug 被消灭掉了。然后又发现一些逻辑细节和数据结构性能上的问题，也逐渐修补了。现在它能够处理整个 Python 2.5, 2.6, 2.7 的标准库和类似 Django 的项目，只需要3分钟的样子。我惊喜的发现能够检索到的名字比第一版多很多。界面还算比较友好吧，但是有待提高。欢迎喜欢美工的人士参与合作。&lt;/p&gt;
&lt;p&gt;因为 Python 语言的复杂性，而且由于我其实不是 Python 程序员，我相信 PySonar2 里面肯定还有一些细节没有照顾到（虽然最主要的部分是没问题的）。如果发现问题，请开启 GitHub 的 issue。&lt;br&gt;另外，同样的原理其实可以应用到所有的语言分析里面。在将来我希望开发出通用的代码分析器，能够处理多种语言。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;经过 Google 的许可，我现在将 &lt;a href=&quot;http://yinwang0.wordpress.com/2010/09/12/pysonar&quot;&gt;PySonar&lt;/a&gt; 第二版本开源，就叫 PySonar2 吧。代码可以在我的 GitHub 下载：&lt;/p&gt;
    
    </summary>
    
    
      <category term="转摘" scheme="http://yoursite.com/tags/%E8%BD%AC%E6%91%98/"/>
    
      <category term="pysonar2" scheme="http://yoursite.com/tags/pysonar2/"/>
    
  </entry>
  
  <entry>
    <title>丘奇和图灵</title>
    <link href="http://yoursite.com/2016/03/17/%E4%B8%98%E5%A5%87%E5%92%8C%E5%9B%BE%E7%81%B5/"/>
    <id>http://yoursite.com/2016/03/17/丘奇和图灵/</id>
    <published>2016-03-17T11:09:59.000Z</published>
    <updated>2016-03-17T12:58:07.462Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/images/Alonzo_Church.jpg&quot; alt=&quot;&quot;&gt; &lt;img src=&quot;http://www.yinwang.org/images/Alan_Turing.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;丘奇（Alonzo Church）和图灵（Alan Turing）是两位对计算机科学具有最大影响力的人物，然而他们却具有非常对立的观点和相差很多的名气。在我长达16年的计算机科学生涯中，总是感觉到自己的思想反反复复的徘徊于这两个“阵营”之间。丘奇代表了“逻辑”和“语言”，而图灵代表着“物理”和“机器”。在前面的8年中，我对丘奇一无所知，而在后面的8年中，我却很少再听到图灵的名字。他们的观点谁对谁错，是一个无法回答的问题。完全投靠丘奇，或者完全投靠图灵，貌似都是错误的做法。这是一种非常难说清楚的，矛盾的感觉，但是今天我试图把自己的感悟简要的介绍一下。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;丘奇与图灵之争&quot;&gt;&lt;a href=&quot;#丘奇与图灵之争&quot; class=&quot;headerlink&quot; title=&quot;丘奇与图灵之争&quot;&gt;&lt;/a&gt;丘奇与图灵之争&lt;/h3&gt;&lt;p&gt;想必世界上所有的计算机学生都知道图灵的大名和事迹，因为美国计算机器学会（ACM）每年都会颁发“图灵奖”，它被誉为计算机科学的最高荣誉。大部分的计算机学生都会在某门课程（比如“计算理论”）学习“图灵机”的原理。然而，有多少人知道丘奇是什么人，他做出了什么贡献，他与图灵是什么样的关系呢？我想恐怕不到一半的人吧。&lt;/p&gt;
&lt;p&gt;如果你查一下&lt;a href=&quot;http://www.genealogy.math.ndsu.nodak.edu/id.php?id=8014&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;数学家谱图&lt;/a&gt;，就会发现丘奇其实是图灵的博士导师。然而从 Andrew Hodges 所著的《&lt;a href=&quot;http://www.turing.org.uk/bio/part3.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;图灵传&lt;/a&gt;》，你却可以看到图灵的心目中仿佛并没有这个导师，仿佛自己的“全新发明”应得的名气，被丘奇抢走了一样（注意作者的用词：robbed）。事实到底是怎样的，恐怕谁也说不清楚。我只能说，貌似计算机科学从诞生之日开始就充满了各种“宗教斗争”。&lt;/p&gt;
&lt;p&gt;虽然现在图灵更加有名，然而在现实的程序设计中，却是丘奇的理论在起着绝大部分的作用。据我的经验，丘奇的理论让很多事情变得简单，而图灵的机器却过度的复杂。丘奇所发明的 lambda calculus 以及后续的工作，是几乎一切程序语言的理论基础。而根据老一辈的计算机工程师们的描述，最早的计算机构架也没有受到图灵的启发，那是一些电机工程师完全独立的工作。然而有趣的是，继承了丘奇衣钵的计算机科学家们拿到的那个大奖，仍然被叫做“图灵奖”。我粗略的算了一下，在迄今所有的图灵奖之中，程序语言的研究者占了近三分之一。&lt;/p&gt;
&lt;h3 id=&quot;从图灵机到-lambda-calculus&quot;&gt;&lt;a href=&quot;#从图灵机到-lambda-calculus&quot; class=&quot;headerlink&quot; title=&quot;从图灵机到 lambda calculus&quot;&gt;&lt;/a&gt;从图灵机到 lambda calculus&lt;/h3&gt;&lt;p&gt;图灵机永远的停留在了理论的领域，绝大多数被用在“计算理论”（Theory of Computation）中。计算理论其实包括两个主要概念：“可计算性理论”（computability）和“复杂度理论”(complexity）。这两个概念在通常的计算理论书籍（比如 Sipser 的经典教材）里，都是用图灵机来叙述的。在学习计算理论的时候，绝大多数的计算机学生恐怕都会为图灵机头痛好一阵子。&lt;/p&gt;
&lt;p&gt;然而在做了研究生“计算理论”课程一个学期的 TA 之后我却发现，其实几乎所有计算理论的原理，都可以用 lambda calculus，或者程序语言和解释器的原理来描述。所谓“通用图灵机”（Universal Turing Machine），其实就是一个可以解释自己的解释器，叫做“元解释器”（meta-circular interpreter）。在 Dan Friedman 的 B621 程序语言理论课程中，我最后的项目就是一个 &lt;a href=&quot;https://github.com/yinwang0/old-toys/blob/master/meta-interp.ss&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;meta-circular interpreter&lt;/a&gt;。这个解释器能够完全的解释它自己，而且可以任意的嵌套（也就是说用它自己来解释它自己，再来解释它自己……）。然而我的“元解释器”却是基于 lambda calculus 的，所以我后来发现了一种方法，可以完全的用 lambda calculus 来解释计算理论里面几乎所有的定理。&lt;/p&gt;
&lt;p&gt;我为这个发现写了两篇博文：《&lt;a href=&quot;http://yinwang0.wordpress.com/2012/03/22/reducibility&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;A Reformulation of Reducibility&lt;/a&gt;》和《&lt;a href=&quot;http://yinwang0.wordpress.com/2012/10/25/halting&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Undecidability Proof of Halting Problem without Diagonalization&lt;/a&gt;》。我把 Sipser 的&lt;a href=&quot;http://www.amazon.com/dp/113318779X&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;计算理论课本&lt;/a&gt;里面的几乎整个一章的证明都用我自己的这种方式改写了一遍，然后讲给上课的学生。因为这种表示方法比起通常的“图灵机+自然语言”的方式简单和精确，所以收到了相当好的效果，好些学生对我说有一种恍然大悟的感觉。&lt;/p&gt;
&lt;p&gt;我把这一发现告诉了我当时的导师 Amr Sabry。他笑了，说这个他早就知道了。他推荐我去看一本书，叫做《&lt;a href=&quot;http://www.diku.dk/~neil/Comp2book.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Computability and Complexity from a Programming Perspective&lt;/a&gt;》，作者是大名鼎鼎的 Neil Jones (他也是“&lt;a href=&quot;http://www.itu.dk/~sestoft/pebook/pebook.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Partial Evaluation&lt;/a&gt;”这一重要概念的提出者）。这本书不是用图灵机，而是一种近似于 Pascal，却又带有 lambda calculus 的一些特征的语言（叫做 “WHILE 语言”）来描述计算理论。用这种语言，Jones 不但轻松的证明了所有经典的计算理论定理，而且能够证明一些使用图灵机不能证明的定理。&lt;br&gt;我曾经一直不明白，为什么可以如此简单的解释清楚的事情，计算理论需要使用图灵机，而且叙述也非常的繁复和含糊。由于这些证明都出于资深的计算理论家们之手，让我不得不怀疑自己的想法里面是不是缺了点什么。可是在看到了 Jones 教授的这本书之后，我倍感欣慰。原来一切本来就是这么的简单！&lt;/p&gt;
&lt;p&gt;后来从 CMU 的教授 Robert Harper 的一篇博文《&lt;a href=&quot;http://existentialtype.wordpress.com/2011/03/16/languages-and-machines&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Languages and Machines&lt;/a&gt;》中，我也发现 Harper 跟我具有类似的观点，甚至更加极端一些。他强烈的支持使用 lambda calculus，反对图灵机和其他一切机器作为计算理论的基础。&lt;/p&gt;
&lt;h3 id=&quot;从-lambda-calculus-到电子线路&quot;&gt;&lt;a href=&quot;#从-lambda-calculus-到电子线路&quot; class=&quot;headerlink&quot; title=&quot;从 lambda calculus 到电子线路&quot;&gt;&lt;/a&gt;从 lambda calculus 到电子线路&lt;/h3&gt;&lt;p&gt;当我在 2012 年的 POPL 第一次见到 Neil Jones 的时候，他跟我解释了许多的问题。当我问到他这本书的时候，他对我说：“我不推荐我的书给你，因为大部分的人都觉得 lambda calculus 难以理解。”Lambda calculus 难以理解？我怎么不觉得呢？我觉得图灵机麻烦多了。然后我才发现，由于经过了这么多年的研究之后，自己对 lambda calculus 的理解程度已经到了深入骨髓的地步，所以我已经全然不知新手对它是什么样的感觉。原来“简单”这个词，在具有不同经历的人头脑里，有着完全不同的含义。&lt;/p&gt;
&lt;p&gt;所以其实 Jones 教授说的没错，lambda calculus 也许对于大部分人来说不合适，因为对于它没有一个好的入门指南。Lambda calculus 出自逻辑学家之手，而逻辑学家们最在行的，就是把很简单的“程序”用天书一样的公式表示出来。这难怪老一辈的逻辑学家们，因为他们创造那些概念的时候，计算机还不存在。但是如果现在还用那一堆符号，恐怕就有点落伍了。大部分人在看到 beta-reduction, alpha-conversion, eta-conversion, … 这大堆的公式的时候，就已经头痛难忍了，怎么还有可能利用它来理解计算理论呢？&lt;/p&gt;
&lt;p&gt;其实那一堆符号所表示的东西，终究超越不了现实里的物体和变化，最多不过再幻想一下“多种未来”或者“时间机器”。有了计算机之后，这些符号公式，其实都可以用数据结构和程序语言来表示。所以 lambda calculus 在我的头脑里真的很简单。每一个 lambda 其实就像是一个电路模块。它从电线端子得到输入，然后输出一个结果。你把那些电线叫什么名字根本不重要，重要的是同一根电线的名字必须“一致”，这就是所谓的“alpha-conversion”的原理…… 不在这里多说了，如果你想深入的了解我心目中的 lambda calculus，也许可以看看我的另一篇博文《&lt;a href=&quot;http://www.yinwang.org/blog-cn/2012/08/01/interpreter&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;怎样写一个解释器&lt;/a&gt;》，看看这个关于类型推导的&lt;a href=&quot;http://www.tudou.com/programs/view/GU9GtDuWSMk&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;幻灯片&lt;/a&gt;的开头，或者进一步，看看如何推导出 &lt;a href=&quot;http://yinwang0.wordpress.com/2012/04/09/reinvent-y&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Y combinator&lt;/a&gt;，或者看看《&lt;a href=&quot;http://yinwang0.wordpress.com/2012/09/16/what-is-a-program&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;What is a program?&lt;/a&gt;》。你也可以看看 Matthias Felleisen 和 Matthew Flatt 的《&lt;a href=&quot;http://www.cs.utah.edu/~mflatt/past-courses/cs7520/public_html/s06/notes.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Programming Languages and Lambda Calculi&lt;/a&gt;》。&lt;/p&gt;
&lt;p&gt;所以，也许你看到了在我的头脑里面并存着丘奇和图灵的影子。我觉得丘奇的 lambda calculus 是比图灵机简单而强大的描述工具，然而我却又感染到了图灵对于“物理”和“机器”的执着。我觉得逻辑学家们对 lambda calculus 的解释过于复杂，而通过把它理解为物理的“电路元件”，让我对 lambda calculus 做出了更加简单的解释，把它与“现实世界”联系在了一起。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/images/lambda-inside.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;所以到最后，丘奇和图灵这两种看似矛盾的思想，在我的脑海里得到了和谐的统一。这些精髓的思想帮助我解决了许多的问题。感谢你们，计算机科学的两位鼻祖。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/images/Alonzo_Church.jpg&quot; alt=&quot;&quot;&gt; &lt;img src=&quot;http://www.yinwang.org/images/Alan_Turing.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;丘奇（Alonzo Church）和图灵（Alan Turing）是两位对计算机科学具有最大影响力的人物，然而他们却具有非常对立的观点和相差很多的名气。在我长达16年的计算机科学生涯中，总是感觉到自己的思想反反复复的徘徊于这两个“阵营”之间。丘奇代表了“逻辑”和“语言”，而图灵代表着“物理”和“机器”。在前面的8年中，我对丘奇一无所知，而在后面的8年中，我却很少再听到图灵的名字。他们的观点谁对谁错，是一个无法回答的问题。完全投靠丘奇，或者完全投靠图灵，貌似都是错误的做法。这是一种非常难说清楚的，矛盾的感觉，但是今天我试图把自己的感悟简要的介绍一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="转摘" scheme="http://yoursite.com/tags/%E8%BD%AC%E6%91%98/"/>
    
  </entry>
  
  <entry>
    <title>PyDiff - Python 结构化程序比较工具</title>
    <link href="http://yoursite.com/2016/03/17/PyDiff%20-%20Python%20%E7%BB%93%E6%9E%84%E5%8C%96%E7%A8%8B%E5%BA%8F%E6%AF%94%E8%BE%83%E5%B7%A5%E5%85%B7/"/>
    <id>http://yoursite.com/2016/03/17/PyDiff - Python 结构化程序比较工具/</id>
    <published>2016-03-17T11:04:36.000Z</published>
    <updated>2016-03-17T12:59:28.633Z</updated>
    
    <content type="html">&lt;p&gt;在之前的一篇博文里，我介绍了 &lt;a href=&quot;http://www.yinwang.org/blog-cn/2013/04/21/ydiff-%E7%BB%93%E6%9E%84%E5%8C%96%E7%9A%84%E7%A8%8B%E5%BA%8F%E6%AF%94%E8%BE%83/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ydiff&lt;/a&gt;，一个通用的结构化程序比较工具。其实在设计 ydiff 之前，这个工具是用 Python 实现的，并且只处理 Python 程序。在设计了 ydiff 之后，我发现其实我不想费很多精力来写 Python 的 parser，所以对 Python 的支持就日渐疏忽了。后来我把那块代码放在了 ydiff 的 repo 里面（叫做 pydiff.py），然而几乎没有人注意到它。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;现在我发现 Python 其实是一个挺重要而且有趣的语言。说它重要是因为它简单而且在某种程度上是优雅的，所以有很多人用它。说它有趣是因为它的一些设计其实比起很多更加“严谨”的语言要来得合理。语言的设计不只要有逻辑的严谨和效率，而且需要有“易用性”（usability）。Python 在易用性上面是做的比较好的。最近仔细看了一下 &lt;a href=&quot;http://www.python.org/dev/peps/pep-0008/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PEP 8&lt;/a&gt; (Python 的 “Style Guide”），发现它有很多地方比起 Java, Scheme, Haskell 都有让程序更加“易读”的特点。&lt;/p&gt;
&lt;p&gt;所以，现在我为这个 Python 的结构化比较程序重新建立了它自己的 GitHub 项目。你可以在这里得到它的代码： &lt;a href=&quot;http://github.com/yinwang0/pydiff&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/yinwang0/pydiff&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;对比大型文件的时候可能速度会成一定的问题。不过我打算以后对算法做一个比较大的改进。如果发现 bug 请在 GitHub 中向我报告。谢谢。&lt;/p&gt;
&lt;h3 id=&quot;Demo&quot;&gt;&lt;a href=&quot;#Demo&quot; class=&quot;headerlink&quot; title=&quot;Demo&quot;&gt;&lt;/a&gt;Demo&lt;/h3&gt;&lt;p&gt;你可以在下面的窗口中看到 PyDiff 的输出结果，是 PyDiff 对比它自己的代码（我最近两天对它的修改）。&lt;/p&gt;
&lt;p&gt;&lt;iframe width=&quot;100%&quot; height=&quot;540&quot; src=&quot;http://www.yinwang.org/resources/pydiff1-pydiff2.html&quot;&gt;&lt;/iframe&gt;&lt;br&gt;(&lt;a href=&quot;http://www.yinwang.org/resources/pydiff1-pydiff2.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;单独浏览&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;上面的界面有如下特点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;红色表示“删除”，绿色表示“插入”，白色表示“移动”或者没有变化，蓝色表示有小幅度“修改”。&lt;/li&gt;
&lt;li&gt;左右窗口同步滚动。&lt;/li&gt;
&lt;li&gt;点击白色方框，就可以依据框里的变量进行对齐。&lt;/li&gt;
&lt;li&gt;点击之后，左右窗口根据对齐的变量重新“耦合”，同步滚动。&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在之前的一篇博文里，我介绍了 &lt;a href=&quot;http://www.yinwang.org/blog-cn/2013/04/21/ydiff-%E7%BB%93%E6%9E%84%E5%8C%96%E7%9A%84%E7%A8%8B%E5%BA%8F%E6%AF%94%E8%BE%83/&quot;&gt;ydiff&lt;/a&gt;，一个通用的结构化程序比较工具。其实在设计 ydiff 之前，这个工具是用 Python 实现的，并且只处理 Python 程序。在设计了 ydiff 之后，我发现其实我不想费很多精力来写 Python 的 parser，所以对 Python 的支持就日渐疏忽了。后来我把那块代码放在了 ydiff 的 repo 里面（叫做 pydiff.py），然而几乎没有人注意到它。&lt;/p&gt;
    
    </summary>
    
    
      <category term="转摘, ydiff" scheme="http://yoursite.com/tags/%E8%BD%AC%E6%91%98-ydiff/"/>
    
  </entry>
  
  <entry>
    <title>原因与证明</title>
    <link href="http://yoursite.com/2016/03/17/%E5%8E%9F%E5%9B%A0%E4%B8%8E%E8%AF%81%E6%98%8E/"/>
    <id>http://yoursite.com/2016/03/17/原因与证明/</id>
    <published>2016-03-17T11:02:10.000Z</published>
    <updated>2016-03-17T12:59:52.802Z</updated>
    
    <content type="html">&lt;h3 id=&quot;证明&quot;&gt;&lt;a href=&quot;#证明&quot; class=&quot;headerlink&quot; title=&quot;证明&quot;&gt;&lt;/a&gt;证明&lt;/h3&gt;&lt;p&gt;我在 Cornell 的时候经常遇到这样的问题，那就是教授们一上课就在黑板上写长篇的“定理证明”，全体同学认认真真在下面抄笔记，就连只有十来个人的小课也是那样。有些写字速度慢的人就不得不带上小型录音机，把教授的课全都录下来，要不就是之后去借别人的笔记来抄。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;有一次某知名教授照着讲义，背对着学生，在黑板上写了大半节课，写下好几板的证明，证明的是 simply typed lambda calculus （STLC）的 strong normalization 特性（SN）。刚写完就到下课时间了，他回过头来喘了一口气，说：“Any questions？”没有人啃声，于是他说：“很好！下课！”&lt;/p&gt;
&lt;p&gt;几天后我问他，你证明了 STLC 有这个特性，然而你却没有告诉我它“为什么”有这个特性。他神气的看了我一眼：“你不懂吗？”我说：“你的证明我看懂了大部分，可是一个东西具有如此的性质，并不是因为你证明了它。这性质是它天生就有的，不管你是否能证明它。我想知道的是什么让 STLC 具有这个性质，而不只是证明它。”他说：“你问这样的问题有什么意义吗？你需要非常聪明，并且需要经过大量的努力才能想出这样的证明。”&lt;/p&gt;
&lt;h3 id=&quot;原因&quot;&gt;&lt;a href=&quot;#原因&quot; class=&quot;headerlink&quot; title=&quot;原因&quot;&gt;&lt;/a&gt;原因&lt;/h3&gt;&lt;p&gt;两年之后，我在 Indiana 上了另外一堂程序语言理论课。教授是我之前的导师 Amr Sabry。他上课从来不带讲义，貌似也没有准备，漫不经心的，却每次都能讲清楚问题的关键。于是有一天他也开始讲 STLC 的 SN 特性。他说，我不想写下这个证明让你们抄，我只告诉你们大概怎么去想。SN 的意思就是程序肯定会“终止”。所有会终止的程序，都会有一个“特征值”会随着程序的运行而减小。你需要做的就是找到 STLC 的“特征值”是什么。接着他就开始在黑板上画一个图……&lt;/p&gt;
&lt;p&gt;过了一段时间，我不仅学会了这个“证明”，而且知道了 STLC 具有如此特性的“原因”。&lt;/p&gt;
&lt;h3 id=&quot;证明与原因的区别&quot;&gt;&lt;a href=&quot;#证明与原因的区别&quot; class=&quot;headerlink&quot; title=&quot;证明与原因的区别&quot;&gt;&lt;/a&gt;证明与原因的区别&lt;/h3&gt;&lt;p&gt;从以上的故事，以及你的亲身经历中，你也许注意到了大部分的教育过分的重视了“证明”，却忽略了比证明更重要的东西——“原因”。&lt;/p&gt;
&lt;p&gt;原因往往比证明来得更加简单，更加深刻，但却更难发现。对于一个事实往往有多种多样的证明，然而导致这个事实的原因却往往只有一个。如果你只知道证明却不知道原因，那你往往就被囚禁于别人制造的理论里面，无法自拔。你能证明一个事物具有某种特性，然而你却没有能力改变它。你无法对它加入新的，好的特性，也无法去掉一个不好的特性。你也无法发明新的理论。有能力发明新的事物和理论的人，他们往往不仅知道“证明”，而且知道“原因”。&lt;/p&gt;
&lt;p&gt;打个比方。证明与原因的区别，就像是犯罪的证据与它的原因的区别。证据并不是导致犯罪的原因。有了证据可以帮助你把罪犯绳之以法，可是如果你找不到他犯罪的原因，你就没法防止同样的犯罪现象再次发生。&lt;/p&gt;
&lt;p&gt;古人说的“知其然”与“知其所以然”的区别，也就是同样的道理吧。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;证明&quot;&gt;&lt;a href=&quot;#证明&quot; class=&quot;headerlink&quot; title=&quot;证明&quot;&gt;&lt;/a&gt;证明&lt;/h3&gt;&lt;p&gt;我在 Cornell 的时候经常遇到这样的问题，那就是教授们一上课就在黑板上写长篇的“定理证明”，全体同学认认真真在下面抄笔记，就连只有十来个人的小课也是那样。有些写字速度慢的人就不得不带上小型录音机，把教授的课全都录下来，要不就是之后去借别人的笔记来抄。&lt;/p&gt;
    
    </summary>
    
    
      <category term="转摘" scheme="http://yoursite.com/tags/%E8%BD%AC%E6%91%98/"/>
    
  </entry>
  
  <entry>
    <title>ydiff - 结构化的程序比较</title>
    <link href="http://yoursite.com/2016/03/17/ydiff%20-%20%E7%BB%93%E6%9E%84%E5%8C%96%E7%9A%84%E7%A8%8B%E5%BA%8F%E6%AF%94%E8%BE%83/"/>
    <id>http://yoursite.com/2016/03/17/ydiff - 结构化的程序比较/</id>
    <published>2016-03-17T09:41:40.000Z</published>
    <updated>2016-03-17T13:00:07.713Z</updated>
    
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/yinwang0/ydiff&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ydiff&lt;/a&gt; 是我的一个开源项目，用以探索一种全新的程序比较以及版本控制系统。&lt;/p&gt;
&lt;p&gt;也许我根本不应该给它起名叫“ydiff”，让人感觉它只不过是对 diff 的微小改进。然而，ydiff 跟 diff 是有本质区别的。它们的区别在于，diff 只是对程序进行基于“文本”的对比，它根本不对程序进行 parse。而 ydiff 含有完整的针对程序语言的 parser，在得到了 AST 之后，才对 AST 进行“结构化的比较”。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;这种结构化的程序比较，不但可以避免文件里的“空白字符”引起的肤浅区别，而且可以根据程序的结构，进行更加有意义的对比。比如，ydiff 不会认为字符串 “1000” 和数字 1000 的区别只是多了一对引号。ydiff 在比较函数的时候，首先寻找名字相同的函数，而不只是对相同位置的函数进行无谓的对比。&lt;/p&gt;
&lt;p&gt;ydiff 含有 C++, JavaScript 和 Lisp 的 parser。这些 parser，包括用于支持这些 parser 的库代码，都是我自己完成的。ydiff 不含有任何第三方代码。ydiff 的 parser 技术不依赖于任何第三方工具（比如 ANTLR 或者 YACC）。&lt;/p&gt;
&lt;h3 id=&quot;界面&quot;&gt;&lt;a href=&quot;#界面&quot; class=&quot;headerlink&quot; title=&quot;界面&quot;&gt;&lt;/a&gt;界面&lt;/h3&gt;&lt;p&gt;跟普通 diff 程序的输出不一样，ydiff 生成美观的含有 JavaScript 的 HTML 文件，可以直接使用浏览器浏览，并且可以嵌入其它网页，比如像下面这样：&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;540&quot; src=&quot;http://www.yinwang.org/resources/mk1-mk2.html&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href=&quot;http://www.yinwang.org/resources/mk1-mk2.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;单独浏览&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上面的界面有如下特点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;红色表示“删除”，绿色表示“插入”，白色表示“移动”或者没有变化&lt;/li&gt;
&lt;li&gt;左右窗口同步滚动&lt;/li&gt;
&lt;li&gt;点击白色方框，就可以依据框里的变量进行对齐&lt;/li&gt;
&lt;li&gt;点击之后，左右窗口根据对齐的变量重新“耦合”，同步滚动&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;技术&quot;&gt;&lt;a href=&quot;#技术&quot; class=&quot;headerlink&quot; title=&quot;技术&quot;&gt;&lt;/a&gt;技术&lt;/h3&gt;&lt;p&gt;ydiff 里面含有一些比较独特的技术。&lt;/p&gt;
&lt;h3 id=&quot;强大而简单的-parser-combinator-library&quot;&gt;&lt;a href=&quot;#强大而简单的-parser-combinator-library&quot; class=&quot;headerlink&quot; title=&quot;强大而简单的 parser combinator library&quot;&gt;&lt;/a&gt;强大而简单的 parser combinator library&lt;/h3&gt;&lt;p&gt;一般编译器的 parser 都使用像 YACC 和 ANTLR 一样的 parser generator。这种方法虽然可行，但是它有一个很大的问题，就是你需要使用另外一种语言和另外一个工具，这样就多了一层“语义”。当你的 parser 出了问题的时候，你不能使用已有的编程工具进行调试，而只能依靠这种 parser 工具所提供的信息。这就是为什么人们都觉得 parser 很难写。有一家叫 EDG 的公司，专门销售 C++ 的 parser 代码。你可以由此看出 parser 的技术是多么的复杂和混乱。&lt;/p&gt;
&lt;p&gt;由于这个原因，很多人的 parser 都是自己手写的。可是手写 parser 相当的费事，而且不模块化。所以函数式语言的社区就出现了 Parsec 这样的“parser combinator library”。它的原理是，每一个 parser 都是一个函数，它接受一个字符串，输出一种特定的 AST 结构。比如你可以写出一个很简单的 parser，它只能从字符串里提取一个变量，或者一个数字。由于函数式语言可以把函数作为数据，这种小的 parser 可以被一些叫做 parser combinator 的“高阶函数”作为输入，然后把它们“组合”在一起，形成更大的 parser。当所有这些 parser 组合在一起，它们就可以拥有分析整个程序文本的威力，就像“组合金刚大力神”一样。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/images/devastator_tf2.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;我的 parser 库就是受到了 Parsec 的启发。然而我的库在某种程度上比 parsec 还好用。它不但更加简单灵活，而且能够检测并且报告“左递归”的位置。这是 Parsec 没有的功能。另外，我的 parser 库里面含有很方便的宏，使得写 parser 就像写 BNF 范式一样简单，但却又不需要使用像 YACC 一样的麻烦的工具。&lt;/p&gt;
&lt;p&gt;比如，C++ 函数的 parser 是这样定义的：&lt;br&gt;&lt;figure class=&quot;highlight scheme&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;::=&lt;/span&gt; $function-definition &lt;span class=&quot;symbol&quot;&gt;&#39;function&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     (&lt;span class=&quot;name&quot;&gt;@or&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;@...&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;@?&lt;/span&gt; $modifiers) $type&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                (&lt;span class=&quot;name&quot;&gt;@=&lt;/span&gt; &lt;span class=&quot;symbol&quot;&gt;&#39;name&lt;/span&gt; $identifier ) $formal-parameter-list)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          (&lt;span class=&quot;name&quot;&gt;@...&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;@=&lt;/span&gt; &lt;span class=&quot;symbol&quot;&gt;&#39;name&lt;/span&gt; $identifier ) $formal-parameter-list))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     (&lt;span class=&quot;name&quot;&gt;@?&lt;/span&gt; $initializer)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     $function-body)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在创造了这个库之后，我在一天之内写出了一个 JavaScript 的 parser。两天之后，在这个 JS parser 基础上，又写出了一个 C++ 的 parser。两天之内写出 C++ 的 parser 对于很多人来说都是不可思议的事情，但我没有感觉这有什么难度。大部分的人只不过高估了问题的难度，不然就是把问题复杂化了。&lt;/p&gt;
&lt;p&gt;最后的 C++ parser 只有 600 行代码（不包括空行），而 JS 的 parser 只有 470 行代码。最令人惊奇的事情是，Lisp (S-expression) 的 parser 只有 11 行代码，以至于我可以把它完整的贴在这里：&lt;/p&gt;
&lt;figure class=&quot;highlight scheme&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;::&lt;/span&gt; $open&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     (&lt;span class=&quot;name&quot;&gt;@or&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;@~&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;(&quot;&lt;/span&gt;) (&lt;span class=&quot;name&quot;&gt;@~&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;[&quot;&lt;/span&gt;)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;::&lt;/span&gt; $close&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     (&lt;span class=&quot;name&quot;&gt;@or&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;@~&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;)&quot;&lt;/span&gt;) (&lt;span class=&quot;name&quot;&gt;@~&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;]&quot;&lt;/span&gt;)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;::&lt;/span&gt; $non-parens&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     (&lt;span class=&quot;name&quot;&gt;@and&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;@!&lt;/span&gt; $open) (&lt;span class=&quot;name&quot;&gt;@!&lt;/span&gt; $close)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;::=&lt;/span&gt; $parens &lt;span class=&quot;symbol&quot;&gt;&#39;sexp&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     (&lt;span class=&quot;name&quot;&gt;@seq&lt;/span&gt; $open (&lt;span class=&quot;name&quot;&gt;@*&lt;/span&gt; $sexp) $close))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;::&lt;/span&gt; $sexp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (&lt;span class=&quot;name&quot;&gt;@+&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;@or&lt;/span&gt; $parens $non-parens)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;::&lt;/span&gt; $program $sexp)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;精确的探测“代码移动”&quot;&gt;&lt;a href=&quot;#精确的探测“代码移动”&quot; class=&quot;headerlink&quot; title=&quot;精确的探测“代码移动”&quot;&gt;&lt;/a&gt;精确的探测“代码移动”&lt;/h3&gt;&lt;p&gt;不管你在任何位置剪切了一段代码到另外一个地方，ydiff 都能准确的探测到这个动作。比如在上面的代码里面，你也许发现了函数 unify 的主体被移动到了另一个叫做 unify-good 的函数里面。ydiff 能够精确地显示出这个事实：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/images/unify-ydiff.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;这种对于代码移动的检测，可以让人找到很长时间段内对代码的一切修改。为此我做了一个实验，我用 ydiff 对比了 V8 编译器的一个文件相距两年的变化，得到了直观可读的结果。如果你用普通的 diff 来对比它们，恐怕不会看出很多有用的信息，因为这个文件里的有些函数被切分成了好几个小的“帮助函数”。ydiff 能够准确的找到这些被切分的代码所在的位置。 比如我轻而易举的看到，Shell::Initialize 这个函数被切分成了如下一些函数：&lt;/p&gt;
&lt;figure class=&quot;highlight autohotkey&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;Shell::&lt;/span&gt;Initialize&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;Shell::&lt;/span&gt;CreateGlobalTemplate&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;Shell::&lt;/span&gt;RenewEvaluationContext&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;Shell::&lt;/span&gt;InstallUtilityScript&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你可以在以下的 ydiff 输出中直观的看到这个事实（搜索 Shell::Initialize 然后就可以点击每一行，看它们到什么地方去了）：&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;540&quot; src=&quot;http://www.yinwang.org/resources/d8-3404-d8-8424.html&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;(&lt;a href=&quot;http://www.yinwang.org/resources/d8-3404-d8-8424.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;单独浏览&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;这里有一个可能的改进之处，就是让这种代码移动的现象被更加直接的显示出来，而不需要用户挨个的点击这些代码。&lt;/p&gt;
&lt;h3 id=&quot;未来&quot;&gt;&lt;a href=&quot;#未来&quot; class=&quot;headerlink&quot; title=&quot;未来&quot;&gt;&lt;/a&gt;未来&lt;/h3&gt;&lt;p&gt;ydiff 只是一个开端，我希望由它的启发，形成出一种全新的“版本控制系统”。这种系统将从本质上超越现有的基于文本的版本控制系统。关于这系统的细节，我已经在一篇英文博文中有基本的描述。&lt;/p&gt;
&lt;h3 id=&quot;源代码&quot;&gt;&lt;a href=&quot;#源代码&quot; class=&quot;headerlink&quot; title=&quot;源代码&quot;&gt;&lt;/a&gt;源代码&lt;/h3&gt;&lt;p&gt;ydiff 是完全开源的项目，它可以从我的 GitHub 免费获得。&lt;br&gt;&lt;a href=&quot;https://github.com/yinwang0/ydiff&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/yinwang0/ydiff&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/yinwang0/ydiff&quot;&gt;ydiff&lt;/a&gt; 是我的一个开源项目，用以探索一种全新的程序比较以及版本控制系统。&lt;/p&gt;
&lt;p&gt;也许我根本不应该给它起名叫“ydiff”，让人感觉它只不过是对 diff 的微小改进。然而，ydiff 跟 diff 是有本质区别的。它们的区别在于，diff 只是对程序进行基于“文本”的对比，它根本不对程序进行 parse。而 ydiff 含有完整的针对程序语言的 parser，在得到了 AST 之后，才对 AST 进行“结构化的比较”。&lt;/p&gt;
    
    </summary>
    
      <category term="ydiff" scheme="http://yoursite.com/categories/ydiff/"/>
    
    
      <category term="转摘" scheme="http://yoursite.com/tags/%E8%BD%AC%E6%91%98/"/>
    
  </entry>
  
  <entry>
    <title>混合开发笔记</title>
    <link href="http://yoursite.com/2016/03/17/%E6%B7%B7%E5%90%88%E5%BC%80%E5%8F%91/"/>
    <id>http://yoursite.com/2016/03/17/混合开发/</id>
    <published>2016-03-17T02:59:03.000Z</published>
    <updated>2016-03-17T12:55:27.114Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;/images/mixed.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;h5和android的混合开发（前端代码）：&quot;&gt;&lt;a href=&quot;#h5和android的混合开发（前端代码）：&quot; class=&quot;headerlink&quot; title=&quot;h5和android的混合开发（前端代码）：&quot;&gt;&lt;/a&gt;h5和android的混合开发（前端代码）：&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;script type=&lt;span class=&quot;string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  console.log(&quot;我是token：&quot;+req.session.accessToken)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//	var accessToken=&quot;15242ed7d2a359547fb286f5b5cb44274470060b6c694399b023893cb6cbb762d11ca0c3ccfb49f4b03e857389b40da7d333fa48d7f3b8cbc6afee53d707220d&quot;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; jsonObject=&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;userInfo&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;9&quot;&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;accessToken&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;15242ed7d2a359547fb286f5b5cb44274470060b6c694399b023893cb6cbb762d11ca0c3ccfb49f4b03e857389b40da7d333fa48d7f3b8cbc6afee53d707220d&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;syncLogin&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;jsonObject&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/*app native未登录，H5端登录后同步userInfo到native实现自动登录 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		 &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;JsBridge&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//		 	JsBridge.toast(&#39;测试一下而已&#39;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			JsBridge.syncLogin(jsonObject);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		 &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	syncLogin(jsonObject);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;checkNativeLogin&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		JsBridge.checkNativeLogin();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//		var userInfo=JSON.parse(JsBridge.checkNativeLogin());&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; userInfo=JsBridge.checkNativeLogin();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//		JsBridge.toast(userInfo.userInfo.userId);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//		JsBridge.toast(userInfo.userInfo.userId);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	checkNativeLogin();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;h5和object-c的混合开发（前端代码）：&quot;&gt;&lt;a href=&quot;#h5和object-c的混合开发（前端代码）：&quot; class=&quot;headerlink&quot; title=&quot;h5和object-c的混合开发（前端代码）：&quot;&gt;&lt;/a&gt;h5和object-c的混合开发（前端代码）：&lt;/h3&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;http-equiv&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;content-type&quot;&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;content=&quot;text&lt;/span&gt;/&lt;span class=&quot;attr&quot;&gt;html&lt;/span&gt;;&lt;span class=&quot;attr&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;utf-8&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;js调用oc&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text/javaScript&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;/* 调用本地带参数的方法 */&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;testFunction1&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;cmd,parameter1&lt;/span&gt;)&lt;/span&gt;&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.location=&lt;span class=&quot;string&quot;&gt;&quot;objc://&quot;&lt;/span&gt;+cmd+&lt;span class=&quot;string&quot;&gt;&quot;:/&quot;&lt;/span&gt;+parameter1; &lt;span class=&quot;comment&quot;&gt;//cmd代表objective-c中的的方法名，parameter1自然就是参数了  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;/* 调用本地不带参数的方法 */&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;testFunction2&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;cmd&lt;/span&gt;)&lt;/span&gt;&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.location=&lt;span class=&quot;string&quot;&gt;&quot;objc://&quot;&lt;/span&gt;+cmd; &lt;span class=&quot;comment&quot;&gt;//cmd代表objective-c中的的方法名  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text1&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;点击这里1&quot;&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;onclick=&quot;testFunction1(&#39;printLog:&#39;,&#39;str&#39;)&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;调用本地带参数的方法&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text2&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;点击这里2&quot;&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;onclick=&quot;testFunction2(&#39;testFunc&#39;)&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;调用本地不带参数的方法&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/mixed.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="混合开发" scheme="http://yoursite.com/tags/%E6%B7%B7%E5%90%88%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>思念的极致·其四</title>
    <link href="http://yoursite.com/2016/03/16/%E6%80%9D%E5%BF%B5%E7%9A%84%E6%9E%81%E8%87%B4%C2%B7%E5%85%B6%E5%9B%9B/"/>
    <id>http://yoursite.com/2016/03/16/思念的极致·其四/</id>
    <published>2016-03-16T13:10:48.000Z</published>
    <updated>2016-03-17T13:00:24.425Z</updated>
    
    <content type="html">&lt;p&gt;有人说，陪伴，是最长情的告白。&lt;/p&gt;
&lt;p&gt;那么我觉得，等待，或许就是最极致的思念了吧。&lt;/p&gt;
&lt;p&gt;前几天我看了部关于思念与等待的动画短片，虽然故事简单，却感人肺腑。看到这题，觉得与主题十分契合，我就来跟大家聊聊这部动画吧。&lt;/p&gt;
&lt;p&gt;片名《父与女》，豆瓣得分9.2分，并获得了第73届奥斯卡金像奖最佳动画短片奖。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;img src=&quot;https://pic3.zhimg.com/5c53ffb338300d348b6748a4d7fb8ae6_b.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;故事的开头，是一对父女于秋日的傍晚，在林间小路骑着单车。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-5f639aec2abff3fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;他们来到了岸边，父亲将要渡河。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-acec02c3a779a2c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-aa689a1848bcbc1b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;br&gt;似乎预感到了什么，父亲又折了回来，抱起了自己的小女儿。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-a876104527890d8e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;最后，父亲还是乘着小船离开了，只剩女儿呆呆地望着他远去的身影。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-349cec47a237c933.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-02a6b3e51420f094.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;没想到，这一望，就是一辈子。&lt;/p&gt;
&lt;p&gt;父亲再也没有回来。可是女孩依旧每天来到岸边，等待着她的父亲。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-0ce6655e9e3126cb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-99e5eb771c537e9a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;小女孩长大了，成了婷婷而立的少女。她依旧每天来到岸边，父亲的自行车也依旧停靠在树下，就像刚离开时的那样。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-21d667af284a39f6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-991bb578a4d5a28f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;不知道过了多久，父亲的自行车已经消失不见，女孩也长大成了青年。她依旧像小时候那样，每天来到岸边，等待着她的父亲。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-27f4469cdf22d3ea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-20a94aa80ffd47f3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;就算与闺蜜出游，路过的时候，也依旧会驻足。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-804a455435bdcbc5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-4ee11c1afabe6a39.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;不知过了多久，女孩终于找到了心上人。她不再自己一个人骑车，而是由她的男友骑车带着她。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-b154978927f5f2a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;女孩并没有告诉男友关于她父亲的事，他们经过岸边的时候，没有停下来，但她依然会转头瞭望。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-781c5274db830951.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;她结了婚，有了一双儿女。这次，他们一家四口骑车来到河岸边游玩。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-9ff23459efbe6d68.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;丈夫望着河面百无聊赖，儿女在河边嬉戏。而她却伫立在岸上，眺望着远方，就像小时候那样。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-1e2f43d1e7334ce9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-44f09746a2fc2512.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;时光飞梭，女孩再也不年轻了，但却依然会每天来岸边等待父亲。虽然，她知道永远等不到了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-31992e557f986b3c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;也许是时间太久了，她发现，不知道什么时候，河流已经干涸，化为了滩涂。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-6a16dd51f3d28cd5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-2c4c626c058fce82.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;又过了很多年，女孩已经垂垂老矣，老到都骑不了车了。于是她推着自行车，像往常一样，来到岸边。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-29ca5cfe0b3063ca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;她想把自行车停在岸边，可是自行车也老了，甚至都立不起来。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-f0ebdbb4120357b5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-bf9cfe923c3e2259.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;沧海桑田。当初的河流，如今已成了草原。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-7ab50d8deda70516.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;于是，她决定穿过草丛去寻找父亲。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-b3d0bdf69b22d6ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在草丛的中央，她发现了一艘沉船。那正是她父亲的小船。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-f78496c76c44108f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-509e5e81355e4263.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;她缓缓地走过去，抚摸着小船，轻轻地躺在小船里，就像当初躺在父亲的臂弯中一样。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-be5f8656dea9f451.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在生命的最后时刻，她似乎听见了自己父亲的呼唤。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-25f1c256bef0e1b4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;她起身向那前方奔去。她欢快地跑着，越变越年轻，越变越小。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-92d47153616c3350.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-77242f266af9e8b7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-a0b96a5a8c5f7dcf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;终于，她见到了自己的父亲。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-41d99c51dd5232a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;这个等待了一辈子的女孩，终于等到了那个久违的，温暖的怀抱。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-d32c677651cd227a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;影片结束了，但我的心情却久久不能平复。&lt;/p&gt;
&lt;p&gt;虽然很残酷，但我们都知道，女孩最后所见，只是她垂死之时的幻觉。她父亲早在最初就已沉船身亡，她此后一生的等待都是徒劳无功的。&lt;/p&gt;
&lt;p&gt;也许，女孩也深知这一点。但她却选择相信父亲还活着，终有一天会回来。并日复一日，年复一年地去岸边守望。&lt;/p&gt;
&lt;p&gt;影片打动我们的，也正是这种思念的力量。之所以这种力量能够打动我们，是因为我们每个人，一定都有一个一直思念的人。&lt;/p&gt;
&lt;p&gt;此刻远在大洋彼岸求学的我，又何尝不思念父母呢。&lt;/p&gt;
&lt;p&gt;最后，摘录豆瓣的一句精彩短评：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-17c83da7eb7a9c5e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;这，大概就是思念的极致了吧。&lt;/p&gt;
&lt;p&gt;作者：Pein融&lt;br&gt;链接：&lt;a href=&quot;https://www.zhihu.com/question/31914864/answer/88492843&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.zhihu.com/question/31914864/answer/88492843&lt;/a&gt;&lt;br&gt;来源：知乎&lt;br&gt;著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;有人说，陪伴，是最长情的告白。&lt;/p&gt;
&lt;p&gt;那么我觉得，等待，或许就是最极致的思念了吧。&lt;/p&gt;
&lt;p&gt;前几天我看了部关于思念与等待的动画短片，虽然故事简单，却感人肺腑。看到这题，觉得与主题十分契合，我就来跟大家聊聊这部动画吧。&lt;/p&gt;
&lt;p&gt;片名《父与女》，豆瓣得分9.2分，并获得了第73届奥斯卡金像奖最佳动画短片奖。&lt;/p&gt;
    
    </summary>
    
      <category term="情感" scheme="http://yoursite.com/categories/%E6%83%85%E6%84%9F/"/>
    
    
      <category term="情感" scheme="http://yoursite.com/tags/%E6%83%85%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>思念的极致·其三</title>
    <link href="http://yoursite.com/2016/03/16/%E6%80%9D%E5%BF%B5%E7%9A%84%E6%9E%81%E8%87%B4%C2%B7%E5%85%B6%E4%B8%89/"/>
    <id>http://yoursite.com/2016/03/16/思念的极致·其三/</id>
    <published>2016-03-16T13:10:15.000Z</published>
    <updated>2016-03-17T13:00:34.882Z</updated>
    
    <content type="html">&lt;p&gt;包子是部门新来的实习生。&lt;/p&gt;
&lt;p&gt;他是个奇怪的人。&lt;/p&gt;
&lt;p&gt;他有两部手机，一部是像模像样的智能机，另一部是过时到收废品的人也不会正眼瞧一眼的板砖诺基亚，样子与下面这张图片很像：&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-7d2c5241b94c868b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;工作实习上的电话来往，包子都会用那个正常的智能机。但这部满身划痕的诺基亚，他一直都放在办公桌上，也不见落灰，想必是天天都会拿起来用吧。&lt;/p&gt;
&lt;p&gt;包子和我的工位是紧挨着的，虽然不在同一个项目组，我们还算熟识。&lt;/p&gt;
&lt;p&gt;我从未见过他用这部破手机打过电话，但他似乎对这手机十分爱惜。有一次午休，保洁阿姨进屋打扫，清理到包子的工位时，看到了这部诺基亚，也许是怕被别人顺手牵羊，便把这手机塞到了座位侧边的抽屉里。&lt;/p&gt;
&lt;p&gt;包子吃完午饭回来，只扫了一眼桌面，便发现手机不见了踪影。他顿时急得不知所措，把桌面上堆放整齐的文件扔得到处都是。我指了指抽屉，他猛地拉开，见到手机还在，便长出了一口气，随后抱歉地朝我笑笑。&lt;/p&gt;
&lt;p&gt;说实话，面对一群牛气冲天的客户们介绍自家公司产品时，包子都没这么紧张过。他这样失态，我还是头一次见。&lt;/p&gt;
&lt;p&gt;这手机对他来说，一定意义非凡吧。我这样猜测着。&lt;/p&gt;
&lt;p&gt;一个月之后的某天周五，部门聚餐，有几个人喝得烂醉，还嚷嚷着要去KTV，我们也只好顺着他们。&lt;/p&gt;
&lt;p&gt;我和包子也喝了些酒，在别人鬼哭狼嚎的歌声中，我和他有一搭没一搭地聊着天。&lt;/p&gt;
&lt;p&gt;时间过得很快，已经将近半夜12点了。包子突然想起了什么，从背包中翻出了那部满是划痕的诺基亚，打开短信，熟练地输入一串手机号码，并在短信正文中写上“生日快乐”四个字，点了发送，便把手机紧紧攥住。&lt;/p&gt;
&lt;p&gt;“你女朋友？”我试探性地问道。&lt;/p&gt;
&lt;p&gt;“嗨，别提了，我的初恋，早就分手了。”包子满不在乎地摆摆手，眼睛却时不时瞟向这部残破的手机，似乎期待着回应。&lt;/p&gt;
&lt;p&gt;“你这手机可真是有些年头了啊。”我还不死心，想继续套他的话。&lt;/p&gt;
&lt;p&gt;“可不是嘛，到今天为止，整整8年，一天不多，一天不少，这是她过生日那天我送她的礼物，分手时她还给了我。”他继续攥着那部手机。&lt;/p&gt;
&lt;p&gt;“那你也真够痴情的，都8年了，还放不下。”我由衷佩服他。&lt;/p&gt;
&lt;p&gt;包子挠挠头，很不好意思地笑了笑：“分手时，我和她说，我的手机号永远都不会变，每年我都只在她过生日时给她发条祝福短信。除此之外，我绝不会打扰她的正常生活。”&lt;/p&gt;
&lt;p&gt;我暗地了朝他竖起了大拇指：有分寸，不纠缠，是个好样的。&lt;/p&gt;
&lt;p&gt;“那她有联系过你吗？”&lt;/p&gt;
&lt;p&gt;“从来没有过。”&lt;/p&gt;
&lt;p&gt;说这话时，包子的眼神黯淡了一下，随后又努力装作满不在乎的样子：“也许她连手机号都换了吧，我也只是留个念想，无所谓啦。”&lt;/p&gt;
&lt;p&gt;我一时不知该说些什么好，他轻描淡写的背后，不知隐藏了多少单相思的苦楚。&lt;/p&gt;
&lt;p&gt;我眼前浮现出很多画面，冰雪聪明、温柔淑婉、八面玲珑，抑或是出尘脱俗。总之，以他的形像和气质，能让他魂牵梦绕了8年的人，一定不会是凡夫俗子。&lt;/p&gt;
&lt;p&gt;我知道这样有些失礼，但还是忍不住问了他——&lt;/p&gt;
&lt;p&gt;“那女生一定很漂亮吧？”&lt;/p&gt;
&lt;p&gt;包子盯着手机，一动不动，像一尊石像。&lt;/p&gt;
&lt;p&gt;“我已经记不清她的样子了。”&lt;/p&gt;
&lt;p&gt;即便遗忘了一切，却仍然记得当初的那份执念。也许，这便是思念的极致吧。&lt;/p&gt;
&lt;p&gt;作者：ho Ec&lt;br&gt;链接：&lt;a href=&quot;https://www.zhihu.com/question/31914864/answer/88137759&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.zhihu.com/question/31914864/answer/88137759&lt;/a&gt;&lt;br&gt;来源：知乎&lt;br&gt;著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;包子是部门新来的实习生。&lt;/p&gt;
&lt;p&gt;他是个奇怪的人。&lt;/p&gt;
&lt;p&gt;他有两部手机，一部是像模像样的智能机，另一部是过时到收废品的人也不会正眼瞧一眼的板砖诺基亚，样子与下面这张图片很像：&lt;/p&gt;
    
    </summary>
    
      <category term="情感" scheme="http://yoursite.com/categories/%E6%83%85%E6%84%9F/"/>
    
    
      <category term="情感" scheme="http://yoursite.com/tags/%E6%83%85%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>思念的极致·其二</title>
    <link href="http://yoursite.com/2016/03/16/%E6%80%9D%E5%BF%B5%E7%9A%84%E6%9E%81%E8%87%B4%C2%B7%E5%85%B6%E4%BA%8C/"/>
    <id>http://yoursite.com/2016/03/16/思念的极致·其二/</id>
    <published>2016-03-16T13:09:26.000Z</published>
    <updated>2016-03-17T13:00:48.242Z</updated>
    
    <content type="html">&lt;p&gt;近日，论坛中一位网友的发帖引来了无数人泪奔感动。帖子中写到该网友无意中点进了已故5年多的高中同学的QQ空间，却发现自2010年同学不幸离世至今5年多的时间里，同学母亲一直坚持不断地在儿子的QQ空间留言板上留言。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;看着留言板上的字字句句，发帖网友感触颇深，他说简直不敢想象这位母亲是如何度过这5年的日日夜夜。尽管QQ空间的主人已不在，但他的至亲还在深深的思念着他。楼主并没有提供该QQ空间地址，仅仅贴出了几张留言板的截图，众网友看完都心酸不已。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-33f33701bf945a79.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;母亲5年来坚持在已故孩子QQ空间留言 网友泪崩&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-14f6a5f19614cf33.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;母亲5年来坚持在已故孩子QQ空间留言 网友泪崩&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/201324-77510b3a4e3d412d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;母亲5年来坚持在已故孩子QQ空间留言 网友泪崩&quot;&gt;&lt;/p&gt;
&lt;p&gt;从这些或长或短的留言中，母亲貌似坚强地与儿子闲话家常，却又有着忍不住的浓重思念喷薄而出。不少细心的网友发现，该母亲在QQ空间的留言很多都在凌晨时分，不禁心酸泪下，夜深人静的时刻这份伤痛和思念更加明显了吧。网友们感动于伟大的母爱，纷纷跟帖，深深的希望这位坚强的母亲好好保重身体。&lt;/p&gt;
&lt;p&gt;母爱的伟大勾起了很多人心底的思念，另一网友也说起高中同学意外去世后，逝者的姐姐也在帮弟弟维护着他的QQ空间，更新着搜集的照片。直到半年后也许是再也没了新的照片和动态，才以姐姐的口吻发出了最后一条说说：“谢谢大家这么久以来的关心，对不起，我要帮他关闭空间了。”旧日朋友再次泪奔。&lt;/p&gt;
&lt;p&gt;“大家一定要注意身体健康，让亲人放心。”更多为人子女的网友反思着提醒自己，也纷纷下决心说：“回家一定要多陪陪父母，对他们好点。”可怜天下父母心，祝愿天下所有的父母和亲人都平安健康，也希望所有人能珍惜我们生活的每一天。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://news.qq.com/a/20160227/028749.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;来源：→→&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;近日，论坛中一位网友的发帖引来了无数人泪奔感动。帖子中写到该网友无意中点进了已故5年多的高中同学的QQ空间，却发现自2010年同学不幸离世至今5年多的时间里，同学母亲一直坚持不断地在儿子的QQ空间留言板上留言。&lt;/p&gt;
    
    </summary>
    
      <category term="情感" scheme="http://yoursite.com/categories/%E6%83%85%E6%84%9F/"/>
    
    
      <category term="情感" scheme="http://yoursite.com/tags/%E6%83%85%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>思念的极致·其一</title>
    <link href="http://yoursite.com/2016/03/16/%E6%80%9D%E5%BF%B5%E7%9A%84%E6%9E%81%E8%87%B4%C2%B7%E5%85%B6%E4%B8%80/"/>
    <id>http://yoursite.com/2016/03/16/思念的极致·其一/</id>
    <published>2016-03-16T13:08:15.000Z</published>
    <updated>2016-03-17T13:01:05.673Z</updated>
    
    <content type="html">&lt;p&gt;我和朋友昨晚去喝酒，我的朋友腰缠万贯，开着豪车，日入斗金，身边美女不断，却在喝醉了之后蹲在路边的小树下哭的像个傻逼，他哭着说他想他妈，我想把他拉走，他却死死的抱着那棵树不放手，不停的喃喃自语：&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;小时候我缠着我妈买玩具，一把玩具手枪要三块钱，我妈没有那么多钱，就哄着我说下次再来买，我不听拿着那把枪大哭大闹不肯走，我妈没办法，只能掏钱把玩具买了。我拿着玩具在前面欢天喜地的走着，从来没想过那是我家买菜种子的钱，我爸回去后问我妈怎么没把种子买回来，我妈就说钱不小心掉了，我爸就把我妈按在地上打了一顿。&lt;/p&gt;
&lt;p&gt;第二天，我看到我妈额头青肿，问我妈是怎么回事，我妈抱着我笑着说：没事儿，妈妈不小心撞到门了。&lt;/p&gt;
&lt;p&gt;我爸是个混蛋，一喝醉就喜欢打人，每次一看到我爸喝醉酒，我妈就连忙把我抱到房里锁上门，然后就听到我爸不停的踹着门，轰轰隆隆，成了我小时候挥之不去的噩梦，我发誓一定要出人头地，带我妈离开这个家。&lt;/p&gt;
&lt;p&gt;我妈没文化，长的也不好看，却是我心目中最好的妈妈，那时候别人都有电视机看，我们家穷买不起，我妈就陪我在外面看星星，给我讲一些小故事，我妈喜欢逗我开心，夏天的时候我妈就拿着竹扇给我驱赶蚊子，我问：为什么人家都有电视看我们没有？&lt;/p&gt;
&lt;p&gt;我妈说：电视机没什么稀奇的，我们没有电视，但整片星空都是我们的啊。&lt;/p&gt;
&lt;p&gt;我抬头一看，漫天星辰都在向我们眨眼睛。&lt;/p&gt;
&lt;p&gt;初中的时候去镇上读书，因为坐不起车，我妈就陪我走到镇上，从早上五点钟一直要走到七点半，冬天的时候又黑又冷，妈妈就紧紧的牵着我，我问：妈妈，你怕不怕？&lt;/p&gt;
&lt;p&gt;妈妈帮我把帽子戴好，笑着说：不怕，妈妈在陪你冒险。&lt;/p&gt;
&lt;p&gt;初二的时候我爸在外面欠了一屁股债，外面的人追债追到家里，我爸跑的不知所踪，所有债主都把矛头指向我妈，男人们倒还有分寸，只是质问我爸去哪了，几个女人怒气冲冲的扯着我妈的头发，不停的打着我妈的脸，我无比愤怒的拿着刀冲出去护着我妈，我浑身发抖的说：&lt;br&gt;别难为我妈，你们要钱就去找我爸，跟我妈没关系。&lt;/p&gt;
&lt;p&gt;一个胖女人说：你家欠钱还有理了？&lt;/p&gt;
&lt;p&gt;说完又要扯我妈的衣服，我吼了一声一刀劈过去，那胖女人一声惨叫，手臂被划出一道口子，她吓得脸色发白，估计没想到我这个小孩真的敢动手，几个男人夺下我的刀，然后搬了家里为数不多的几件家具后就走了。&lt;/p&gt;
&lt;p&gt;他们走后，房间空荡荡的，我们睡觉的床都被搬走了，我和我妈坐在地板上，我的眼泪就涌出来了，妈妈帮我擦眼泪，拍拍我的脸笑着说：儿子，别怕，还有妈妈呢。&lt;/p&gt;
&lt;p&gt;最绝望的时候，都是妈妈给我勇气。&lt;/p&gt;
&lt;p&gt;暑假的时候，妈妈到处去捡垃圾，我就拿着竹竿去钓龙虾，那时候龙虾到处都是，一个下午就能钓十几斤，吃不完的就拿去卖钱，每次提着一篓子龙虾回家的时候我妈都特自豪，夸我真是太厉害了。那个夏天我和我妈都长胖了，有时候去小卖部买雪糕吃，我伸出雪糕让我妈吃一口，她说她不吃，我却又喂到她口里，她就轻轻咬一口皱着眉头说不好吃，然后让我自己吃。我吃完了舔着雪糕棍的时候，我妈就冲着我笑。&lt;/p&gt;
&lt;p&gt;读高中的时候家里付不起学费，我妈就去娘家找舅舅姨娘借钱，我不知道过程有多艰难，但是每次我妈都能帮我把学费凑齐，开学的时候我妈会帮我把书皮包的整整齐齐，她说：儿子，别为学费发愁，缺钱了就跟妈说。&lt;/p&gt;
&lt;p&gt;我的成绩不错，一直都是年级前十名，奖状发了一大堆，家里墙壁根本贴不下，这是我妈最大的财富，只要家里来客人了我妈就指给客人看，无比的开心自豪。每次放假回家，我妈就在村口等我，回去了就给我做好吃的，家务活从来不让我接手，有一次我把家里的地扫干净了，我妈说：儿子，家里的活不用你干，有妈妈呢。&lt;/p&gt;
&lt;p&gt;我说：反正我回来了也没事，就帮您分担下呗。&lt;/p&gt;
&lt;p&gt;她说：没事就多休息多看书，你跟着妈妈没享什么福，不能再让你吃苦。&lt;/p&gt;
&lt;p&gt;其实吃苦也没什么，我觉得我妈太累了，地里的庄稼活就一大堆，还得出去打零工，高二的时候我爸突然回来了，看到我和我妈过的还行，居然没饿死，就开口找我妈要钱，我妈说没钱钱是留着给我上大学的。我爸又一次把拳头打在我妈身上，不管怎么打，我妈都没有给他一分钱。&lt;/p&gt;
&lt;p&gt;我回来后知道了这事，就当着全村人面和我爸打了一架，我爸已经老了，我把他打倒在地，旁边的一老人说：儿子打老爸，小心被雷劈啊。&lt;/p&gt;
&lt;p&gt;我丝毫不为所动，我对地上的那个混蛋冷冷的说：以后你再敢动我妈一根手指头，我就要你的命，我说到做到。&lt;/p&gt;
&lt;p&gt;后来警察来调解，我爸和我妈终于离了婚，那时候我只觉得一种解脱感，我没有一个好父亲，但是我有一个最好的母亲，我要带我妈过好日子。我努力的准备高考，终于去了一个不错的大学，选了个好就业的工作，每个星期五我妈都会走两个小时，就为了给我打一个五分钟的电话，我妈总是说她过的很好要我不用担心。有一个冬天，因为雪太大，我妈走路摔跤了，但还是坚持着走到电话亭给我打电话，就是因为那次，后来我妈的腿就一直有问题，走起路有点跛，但是那次在电话里我一点都没有听出来，我妈开心的说家里有电视了以后我回家就可以看电视了。&lt;/p&gt;
&lt;p&gt;也许是我太过迟钝，我居然没有从电话里听出一丝痛苦。&lt;/p&gt;
&lt;p&gt;毕业后我参加工作，去了离家千里的广州，因为那里工资会高一点，每个月赚的钱都打给我妈，我也没心情谈恋爱，我妈身体已经很不好了，却从来不告诉我，我给她买了个电话，她每次打电话都嘱咐我好好照顾自己快点找个女孩结婚。&lt;/p&gt;
&lt;p&gt;我说：我现在不考虑结婚，我想在城里给您买个房子。&lt;/p&gt;
&lt;p&gt;我妈呵斥我说：胡说，给我买什么房子，快点去谈恋爱结婚，我还想抱孙子呢。&lt;/p&gt;
&lt;p&gt;我不知道我妈为什么那么急切，几个月后我才得知，我妈那时候已经查出了绝症，但是却没让我知道，有一天晚上我陪客户喝酒，我妈给我打电话，她的声音很低沉，她问我在干嘛，我说：我在陪客户。&lt;/p&gt;
&lt;p&gt;我妈说：儿子，你要快点找个好女孩，让妈妈放心。&lt;/p&gt;
&lt;p&gt;我笑着说：您怎么突然变的这么急了？您以前不这样啊。&lt;/p&gt;
&lt;p&gt;我妈轻轻的说：我怕以后没人照顾你了，你以后要多注意身体，要学会自己照顾自己。&lt;/p&gt;
&lt;p&gt;我心里有股不好的预感，我问：您怎么了，是不是出什么事了？&lt;/p&gt;
&lt;p&gt;我妈在电话那边笑了两声，让我稍微安了下心，她说：没事，你少喝点酒，早点回去睡觉，对了，你从小跟着妈妈吃了那么多苦，心里后悔吗？&lt;/p&gt;
&lt;p&gt;我说：不后悔，我只后悔没早点让您过上好日子。&lt;/p&gt;
&lt;p&gt;我妈笑着说：别把自己活的太累了，妈妈以你为荣。&lt;/p&gt;
&lt;p&gt;我怎么也没能想到，这是我妈最后一次和我讲话，三天后，老家的电话打来，我接完电话就倒在地上，当着所有同事的面就崩溃了，火速坐了飞机回去，我妈走的时候骨瘦如柴，头发没一根黑丝，我抽了自己几个大嘴巴子，痛恨自己的后知后觉。&lt;/p&gt;
&lt;p&gt;我的妈妈虽然不漂亮，没有文化，也没什么能力，却总是在我最绝望的时候给我勇气，在生活的最低谷给我信心，让我能坚强热情的活在这世界上，她从来不要求我回报她什么，也从不会成为我的负担，离开世界之前留给我的最后一句话都是妈妈以你为荣。我现在有了钱，也&lt;br&gt;有了房子有了车，有了自己的公司和人脉，如果老天让我做个选择，拿出我所有的东西让我妈再多活一天，我都毫不犹豫的去换，我一定要抱着我妈笑着说一句：妈妈，你是世界上最好的母亲，我才应该以你为荣。&lt;br&gt;可惜，再也不可能了。&lt;/p&gt;
&lt;p&gt;长街上已经没有人了，他估计也醒酒了，他把自己的眼泪擦干净，摇摇晃晃的站起来。&lt;/p&gt;
&lt;p&gt;我说：没事儿吧，我送你回去吧？&lt;/p&gt;
&lt;p&gt;他笑笑说：没事儿，跟你说了那么多，你是不是挺烦的？&lt;/p&gt;
&lt;p&gt;我摇摇头，他抬起头看看天空，然后神色飞扬的说：你看，整片星空都是我的。&lt;/p&gt;
&lt;p&gt;满天星空在眨眼，那一瞬间，他淡然自若，我的眼眶却炙热了起来。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;来源&lt;a href=&quot;https://www.zhihu.com/question/31914864/answer/88571793&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;知乎（作者：Seasee Youl）&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;我和朋友昨晚去喝酒，我的朋友腰缠万贯，开着豪车，日入斗金，身边美女不断，却在喝醉了之后蹲在路边的小树下哭的像个傻逼，他哭着说他想他妈，我想把他拉走，他却死死的抱着那棵树不放手，不停的喃喃自语：&lt;/p&gt;
    
    </summary>
    
      <category term="情感" scheme="http://yoursite.com/categories/%E6%83%85%E6%84%9F/"/>
    
    
      <category term="情感" scheme="http://yoursite.com/tags/%E6%83%85%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>JS判断客户端是否是iOS或者Android</title>
    <link href="http://yoursite.com/2016/03/16/JS%E5%88%A4%E6%96%AD%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%98%AF%E5%90%A6%E6%98%AFiOS%E6%88%96%E8%80%85Android/"/>
    <id>http://yoursite.com/2016/03/16/JS判断客户端是否是iOS或者Android/</id>
    <published>2016-03-16T11:37:19.000Z</published>
    <updated>2016-03-17T13:01:30.340Z</updated>
    
    <content type="html">&lt;p&gt;通过判断浏览器的userAgent，用正则来判断是否是ios和Android客户端。代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;script type=&lt;span class=&quot;string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; u = navigator.userAgent;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; isAndroid = u.indexOf(&lt;span class=&quot;string&quot;&gt;&#39;Android&#39;&lt;/span&gt;) &amp;gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt; || u.indexOf(&lt;span class=&quot;string&quot;&gt;&#39;Adr&#39;&lt;/span&gt;) &amp;gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//android终端&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; isiOS = !!u.match(&lt;span class=&quot;regexp&quot;&gt;/\(i[^;]+;( U;)? CPU.+Mac OS X/&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//ios终端&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(&lt;span class=&quot;string&quot;&gt;&#39;是否是Android：&#39;&lt;/span&gt;+isAndroid);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(&lt;span class=&quot;string&quot;&gt;&#39;是否是iOS：&#39;&lt;/span&gt;+isiOS);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以打开你的Android手机或者iphone扫描看看&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.caibaojian.com/uploads/2014/08/qrcode-7.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;下面一个比较全面的浏览器检查函数，提供更多的检查内容，你可以检查是否是移动端（Mobile）、ipad、iphone、微信、QQ等。&lt;/p&gt;
&lt;p&gt;第一种：来自HTTP://blog.baiwand.com/?post=176&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;script type=&lt;span class=&quot;string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//判断访问终端&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; browser=&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    versions:&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; u = navigator.userAgent, app = navigator.appVersion;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            trident: u.indexOf(&lt;span class=&quot;string&quot;&gt;&#39;Trident&#39;&lt;/span&gt;) &amp;gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;//IE内核&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            presto: u.indexOf(&lt;span class=&quot;string&quot;&gt;&#39;Presto&#39;&lt;/span&gt;) &amp;gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;//opera内核&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            webKit: u.indexOf(&lt;span class=&quot;string&quot;&gt;&#39;AppleWebKit&#39;&lt;/span&gt;) &amp;gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;//苹果、谷歌内核&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            gecko: u.indexOf(&lt;span class=&quot;string&quot;&gt;&#39;Gecko&#39;&lt;/span&gt;) &amp;gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt; &amp;amp;&amp;amp; u.indexOf(&lt;span class=&quot;string&quot;&gt;&#39;KHTML&#39;&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;,&lt;span class=&quot;comment&quot;&gt;//火狐内核&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mobile: !!u.match(&lt;span class=&quot;regexp&quot;&gt;/AppleWebKit.*Mobile.*/&lt;/span&gt;), &lt;span class=&quot;comment&quot;&gt;//是否为移动终端&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ios: !!u.match(&lt;span class=&quot;regexp&quot;&gt;/\(i[^;]+;( U;)? CPU.+Mac OS X/&lt;/span&gt;), &lt;span class=&quot;comment&quot;&gt;//ios终端&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            android: u.indexOf(&lt;span class=&quot;string&quot;&gt;&#39;Android&#39;&lt;/span&gt;) &amp;gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt; || u.indexOf(&lt;span class=&quot;string&quot;&gt;&#39;Adr&#39;&lt;/span&gt;) &amp;gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;//android终端&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            iPhone: u.indexOf(&lt;span class=&quot;string&quot;&gt;&#39;iPhone&#39;&lt;/span&gt;) &amp;gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt; , &lt;span class=&quot;comment&quot;&gt;//是否为iPhone或者QQHD浏览器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            iPad: u.indexOf(&lt;span class=&quot;string&quot;&gt;&#39;iPad&#39;&lt;/span&gt;) &amp;gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;//是否iPad&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            webApp: u.indexOf(&lt;span class=&quot;string&quot;&gt;&#39;Safari&#39;&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;//是否web应该程序，没有头部与底部&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            weixin: u.indexOf(&lt;span class=&quot;string&quot;&gt;&#39;MicroMessenger&#39;&lt;/span&gt;) &amp;gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;//是否微信 （2015-01-22新增）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            qq: u.match(&lt;span class=&quot;regexp&quot;&gt;/\sQQ/i&lt;/span&gt;) == &lt;span class=&quot;string&quot;&gt;&quot; qq&quot;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;//是否QQ&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    language:(navigator.browserLanguage || navigator.language).toLowerCase()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;&lt;span class=&quot;regexp&quot;&gt;/script&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;使用方法：&quot;&gt;&lt;a href=&quot;#使用方法：&quot; class=&quot;headerlink&quot; title=&quot;使用方法：&quot;&gt;&lt;/a&gt;使用方法：&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//判断是否IE内核&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(browser.versions.trident)&amp;#123; alert(&lt;span class=&quot;string&quot;&gt;&quot;is IE&quot;&lt;/span&gt;); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//判断是否webKit内核&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(browser.versions.webKit)&amp;#123; alert(&lt;span class=&quot;string&quot;&gt;&quot;is webKit&quot;&lt;/span&gt;); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//判断是否移动端&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(browser.versions.mobile||browser.versions.android||browser.versions.ios)&amp;#123; alert(&lt;span class=&quot;string&quot;&gt;&quot;移动端&quot;&lt;/span&gt;); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;检测浏览器语言&quot;&gt;&lt;a href=&quot;#检测浏览器语言&quot; class=&quot;headerlink&quot; title=&quot;检测浏览器语言&quot;&gt;&lt;/a&gt;检测浏览器语言&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;currentLang = navigator.language;   &lt;span class=&quot;comment&quot;&gt;//判断除IE外其他浏览器使用语言&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!currentLang)&amp;#123;&lt;span class=&quot;comment&quot;&gt;//判断IE浏览器使用语言&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    currentLang = navigator.browserLanguage;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(currentLang);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;第二种：来自&lt;a href=&quot;http://www.fufuok.com/JS-iphone-android.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.fufuok.com/JS-iphone-android.html&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;regexp&quot;&gt;/(iPhone|iPad|iPod|iOS)/i&lt;/span&gt;.test(navigator.userAgent)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//alert(navigator.userAgent);  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.location.href =&lt;span class=&quot;string&quot;&gt;&quot;iPhone.html&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;regexp&quot;&gt;/(Android)/i&lt;/span&gt;.test(navigator.userAgent)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//alert(navigator.userAgent); &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.location.href =&lt;span class=&quot;string&quot;&gt;&quot;Android.html&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.location.href =&lt;span class=&quot;string&quot;&gt;&quot;pc.html&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;http://caibaojian.com/browser-ios-or-android.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;转自&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;通过判断浏览器的userAgent，用正则来判断是否是ios和Android客户端。代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;script type=&lt;span class=&quot;string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; u = navigator.userAgent;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; isAndroid = u.indexOf(&lt;span class=&quot;string&quot;&gt;&#39;Android&#39;&lt;/span&gt;) &amp;gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt; || u.indexOf(&lt;span class=&quot;string&quot;&gt;&#39;Adr&#39;&lt;/span&gt;) &amp;gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//android终端&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; isiOS = !!u.match(&lt;span class=&quot;regexp&quot;&gt;/\(i[^;]+;( U;)? CPU.+Mac OS X/&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//ios终端&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(&lt;span class=&quot;string&quot;&gt;&#39;是否是Android：&#39;&lt;/span&gt;+isAndroid);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(&lt;span class=&quot;string&quot;&gt;&#39;是否是iOS：&#39;&lt;/span&gt;+isiOS);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以打开你的Android手机或者iphone扫描看看&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.caibaojian.com/uploads/2014/08/qrcode-7.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;下面一个比较全面的浏览器检查函数，提供更多的检查内容，你可以检查是否是移动端（Mobile）、ipad、iphone、微信、QQ等。&lt;/p&gt;
&lt;p&gt;第一种：来自HTTP://blog.baiwand.com/?post=176&lt;/p&gt;
    
    </summary>
    
    
      <category term="检测终端类" scheme="http://yoursite.com/tags/%E6%A3%80%E6%B5%8B%E7%BB%88%E7%AB%AF%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>前端搜集</title>
    <link href="http://yoursite.com/2016/03/16/%E5%89%8D%E7%AB%AF%E6%90%9C%E9%9B%86/"/>
    <id>http://yoursite.com/2016/03/16/前端搜集/</id>
    <published>2016-03-16T06:53:28.000Z</published>
    <updated>2016-03-17T13:01:59.095Z</updated>
    
    <content type="html">&lt;h1 id=&quot;前端收集&quot;&gt;&lt;a href=&quot;#前端收集&quot; class=&quot;headerlink&quot; title=&quot;前端收集&quot;&gt;&lt;/a&gt;前端收集&lt;/h1&gt;&lt;p&gt;在前端路上摸索前行，在这里分享自己长期关注的前端开发相关的优秀网站、博客、以及活跃开发者。欢迎更新，以下各排名不分先后顺序。&lt;/p&gt;
&lt;p&gt;自己 RSS 长期订阅了一些IT 和技术相关博客，这里是我Feedly 输出的opml，可直接导入一些RSS 阅读器:&lt;br&gt;&lt;a href=&quot;https://github.com/foru17/luolei-dotfiles/blob/master/feedly.opml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/foru17/luolei-dotfiles/blob/master/feedly.opml&lt;/a&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;====&lt;/p&gt;
&lt;h4 id=&quot;前端收集图谱&quot;&gt;&lt;a href=&quot;#前端收集图谱&quot; class=&quot;headerlink&quot; title=&quot;前端收集图谱&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://get-set.cn/front-end-collect/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;前端收集图谱&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;此部分为&lt;a href=&quot;https://github.com/jikeytang&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@jikeytang &lt;/a&gt;贡献&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;clone &lt;a href=&quot;https://github.com/hjzheng/front-end-collect&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/hjzheng/front-end-collect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;cd front-end-collect&lt;/li&gt;
&lt;li&gt;bower install&lt;/li&gt;
&lt;li&gt;放入你喜欢的web容器,访问index.html即可&lt;/li&gt;
&lt;li&gt;你也直接可以访问: &lt;a href=&quot;http://get-set.cn/front-end-collect/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://get-set.cn/front-end-collect/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;支持Chrome, Firefox and IE10&amp;amp;11以上浏览器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/hjzheng/front-end-collect/master/img/front-end-chart.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;聚合-amp-amp-周报订阅&quot;&gt;&lt;a href=&quot;#聚合-amp-amp-周报订阅&quot; class=&quot;headerlink&quot; title=&quot;聚合&amp;amp;&amp;amp;周报订阅&quot;&gt;&lt;/a&gt;聚合&amp;amp;&amp;amp;周报订阅&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;订阅地址&lt;/th&gt;
&lt;th&gt;介绍&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;英文推送&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Html5 Weekly&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://html5weekly.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://html5weekly.com/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Html 技术类&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CSS Weekly&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://css-weekly.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://css-weekly.com/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Javascript Weekly&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://javascriptweekly.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://javascriptweekly.com/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;JS相关，同样有 html,css 和工具相关&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Web Design Weekly&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://web-design-weekly.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://web-design-weekly.com/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;设计、技术、技巧、工具聚合&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;UX Weekly&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://uxwkly.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://uxwkly.com/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;用户体验、网页设计推送&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Web Tools Weekly&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://webtoolsweekly.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://webtoolsweekly.com/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Js，工具推送&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RESPONSIVE DESIGN NEWSLETTER&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://responsivedesignweekly.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://responsivedesignweekly.com/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;每周推送一次响应式设计相关&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Tutorialzine&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://tutorialzine.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://tutorialzine.com/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;精品教程和资源推送&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Sidebar&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://sidebar.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://sidebar.io/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;每天、每半周、每周推送5条设计相关&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;The Hacker News Newsletter&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.hackernewsletter.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.hackernewsletter.com/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;HN 每周精选&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Design News&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://news.layervault.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://news.layervault.com/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;F2类资讯聚合&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Css Animations&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://cssanimation.rocks/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://cssanimation.rocks/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;关于CSS动画的订阅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HACKDESIGN&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://hackdesign.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://hackdesign.org/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;每周发布一个设计类课程&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;中文推送&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;稀土:掘金&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://gold.xitu.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://gold.xitu.io/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;国内十分用心的开发者技术分享、交流平台&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SegmentFault精选&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://segmentfault.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://segmentfault.com/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;国内开发者技术问答社区每周精选问答&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FE Weekly&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.feweekly.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.feweekly.com/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;每周一次，内容主要是英文的，不过有中文导读&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EchoJs_News&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.echojs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.echojs.com/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;每天推送若干好文，都是英文的，JS技术类&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;碼天狗週刊&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weekly.codetengu.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://weekly.codetengu.com/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;台湾的，一份開發者導向的IT 技術週刊，適合所有患有資訊焦慮症、氣血循環不順以及性受挫的軟體工程師們。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;前端资源分享 半月刊&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.hacke2.cn/monthly/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.hacke2.cn/monthly/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;每半月发布最新高质量的前端资源&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&quot;专业博客&quot;&gt;&lt;a href=&quot;#专业博客&quot; class=&quot;headerlink&quot; title=&quot;专业博客&quot;&gt;&lt;/a&gt;专业博客&lt;/h4&gt;&lt;p&gt;注:此处&lt;code&gt;活跃度&lt;/code&gt;为博客更新频率，&lt;code&gt;原创度&lt;/code&gt;指的是作者原创或者翻译的文章所占博文比例。请尊重原创，大量转载其他网站资讯的网站和聚合类网站不做推荐。&lt;/p&gt;
&lt;h6 id=&quot;中文博客&quot;&gt;&lt;a href=&quot;#中文博客&quot; class=&quot;headerlink&quot; title=&quot;中文博客&quot;&gt;&lt;/a&gt;中文博客&lt;/h6&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;活跃度&lt;/th&gt;
&lt;th&gt;原创度&lt;/th&gt;
&lt;th&gt;维护者&lt;/th&gt;
&lt;th&gt;其他&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://www.w3cplus.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;W3Cplus&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;★★★★★&lt;/td&gt;
&lt;td&gt;★★★★★&lt;/td&gt;
&lt;td&gt;携程 @大漠&lt;/td&gt;
&lt;td&gt;国内最优秀的前端博客，原创居多&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://www.w3cfuns.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;W3Cfuns&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;★★★★★&lt;/td&gt;
&lt;td&gt;★★★★☆&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.w3cfuns.com/misc.php?mod=faq&amp;amp;action=faq&amp;amp;id=1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;#&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;专注于web前端开发行业的综合性门户网站&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://www.qianduan.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;前端观察&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;★★★★☆&lt;/td&gt;
&lt;td&gt;★★★★☆&lt;/td&gt;
&lt;td&gt;腾讯 ISUX @神飞&lt;/td&gt;
&lt;td&gt;曾经最优秀，最近更新不频繁了&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://www.alloyteam.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;腾讯web前端 AlloyTeam 团队&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;★★★★&lt;/td&gt;
&lt;td&gt;★★★★&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://t.qq.com/AlloyTeam&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@腾讯AlloyTeam&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;来自于腾讯SNG(社交网络事业群)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://www.zhangxinxu.com/wordpress/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;张鑫旭-鑫空间-鑫生活&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;★★★★☆&lt;/td&gt;
&lt;td&gt;★★★★★&lt;/td&gt;
&lt;td&gt;张鑫旭&lt;/td&gt;
&lt;td&gt;重构很厉害，不少经典文章经验&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://www.36ria.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ria之家&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;★★★★☆&lt;/td&gt;
&lt;td&gt;★★★★☆&lt;/td&gt;
&lt;td&gt;淘宝 @明河&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://www.daqianduan.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;大前端&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;★★★★☆&lt;/td&gt;
&lt;td&gt;★★★★☆&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.cssforest.org/blog/index.php?s=about&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;#&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://www.cssforest.org/blog/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CSS森林&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;★★★★☆&lt;/td&gt;
&lt;td&gt;★★★★☆&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.cssforest.org/blog/index.php?s=about&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;关于&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://www.shejidaren.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;设计达人&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;★★★★☆&lt;/td&gt;
&lt;td&gt;★★★☆☆&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.cssforest.org/blog/index.php?s=about&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;#&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;更新较频繁，但转载也较多&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;阮一峰博客&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;★★★★☆&lt;/td&gt;
&lt;td&gt;★★★☆☆&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.ruanyifeng.com/about.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;#&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;牛人一个&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://beforweb.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Be For Web - 为网而生 - 原创译文博客&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;★★★★☆&lt;/td&gt;
&lt;td&gt;★★★★☆&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/c7210&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@C7210&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;关注移动应用及互联网产品、用户体验设计、前端开发&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h6 id=&quot;国外博客&quot;&gt;&lt;a href=&quot;#国外博客&quot; class=&quot;headerlink&quot; title=&quot;国外博客&quot;&gt;&lt;/a&gt;国外博客&lt;/h6&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;活跃度&lt;/th&gt;
&lt;th&gt;原创度&lt;/th&gt;
&lt;th&gt;维护者&lt;/th&gt;
&lt;th&gt;其他&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://www.smashingmagazine.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Smashing Magazine&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;★★★★★&lt;/td&gt;
&lt;td&gt;★★★★★&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;业界权威，web 设计很赞&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://hub.tutsplus.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Tuts&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;★★★★★&lt;/td&gt;
&lt;td&gt;★★★★★&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;国外知名开发者网站&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://www.developerdrive.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DeveloperDrive&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;★★★★★&lt;/td&gt;
&lt;td&gt;★★★★★&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;优质前端技术信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://css-tricks.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CSS-TRICKS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;★★★★★&lt;/td&gt;
&lt;td&gt;★★★★★&lt;/td&gt;
&lt;td&gt;Chris Coyier&lt;/td&gt;
&lt;td&gt;左边这位是大神&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://webdesignerwall.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Web Designer Wall&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;★★★★★&lt;/td&gt;
&lt;td&gt;★★★★★&lt;/td&gt;
&lt;td&gt;Nick La.&lt;/td&gt;
&lt;td&gt;优质 Html5,CSS3等教程&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://tutorialzine.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Tutorialzine&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;★★★★★&lt;/td&gt;
&lt;td&gt;★★★★★&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;大量 web 教程和资源&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://inspectelement.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Inspect Element&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;★★★★★&lt;/td&gt;
&lt;td&gt;★★★★★&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;CSS,wordpress 相关教程挺多&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://tympanus.net/codrops/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Codrops&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;★★★★★&lt;/td&gt;
&lt;td&gt;★★★★★&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;设计、交互、CSS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://www.onerutter.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Jake Rutter&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;★★★★★&lt;/td&gt;
&lt;td&gt;★★★★★&lt;/td&gt;
&lt;td&gt;Jake Rutter&lt;/td&gt;
&lt;td&gt;Jquery 作者，不解释了&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://www.paulirish.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Paul Irish&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;★★★★★&lt;/td&gt;
&lt;td&gt;★★★★★&lt;/td&gt;
&lt;td&gt;Paul Irish&lt;/td&gt;
&lt;td&gt;大神,Google Chrome团队,Yeoman&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://krasimirtsonev.com/blog&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Krasimir Tsonev&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;★★★★★&lt;/td&gt;
&lt;td&gt;★★★★★&lt;/td&gt;
&lt;td&gt;Krasimir Tsonev&lt;/td&gt;
&lt;td&gt;html5,ccs3,javascript&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://www.nczonline.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NCZOnline&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;★★★★★&lt;/td&gt;
&lt;td&gt;★★★★★&lt;/td&gt;
&lt;td&gt;Nicholas C. Zakas&lt;/td&gt;
&lt;td&gt;html5,ccs3,javascript&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://www.html5rocks.com/en/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HTML5 Rocks&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;★★★★★&lt;/td&gt;
&lt;td&gt;★★★★★&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;html5权威网站&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://alistapart.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;A List Apart&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;★★★★★&lt;/td&gt;
&lt;td&gt;★★★★★&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;可以改变世界的文章&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://hakim.se/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hakim&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;★★★★★&lt;/td&gt;
&lt;td&gt;★★★★★&lt;/td&gt;
&lt;td&gt;HAKIM EL HATTAB&lt;/td&gt;
&lt;td&gt;ccs3,javascript&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://dailyjs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DailyJS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;★★★★★&lt;/td&gt;
&lt;td&gt;★★★★★&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;javascript&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5 id=&quot;活跃微博&quot;&gt;&lt;a href=&quot;#活跃微博&quot; class=&quot;headerlink&quot; title=&quot;活跃微博&quot;&gt;&lt;/a&gt;活跃微博&lt;/h5&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ID&lt;/th&gt;
&lt;th&gt;公司&lt;/th&gt;
&lt;th&gt;简介&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/xitucircle&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@稀土圈&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;强烈推荐，分享一些技术文章和Github项目&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/w3cchina&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@w3c中国&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;万维网联盟中国办事处官方微博&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/javascriptdev&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@TheFrontEnd&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;JavaScript技术资讯、新闻、教程、深度文章。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/fekb&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@前端快爆&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;阿里巴巴&lt;/td&gt;
&lt;td&gt;有HTML5、CSS3、JS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://e.weibo.com/html5cn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@HTML5中国&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;中国www.html5cn.org官方微博&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&quot;开发者博客&quot;&gt;&lt;a href=&quot;#开发者博客&quot; class=&quot;headerlink&quot; title=&quot;开发者博客&quot;&gt;&lt;/a&gt;开发者博客&lt;/h4&gt;&lt;p&gt;微博微信流行后，明显感觉到写博客的人还是越来越少了，下面推荐的这些开发者属于在网上比较活跃的，或者博客积累了大量优质资源的。&lt;/p&gt;
&lt;h6 id=&quot;国内开发者&quot;&gt;&lt;a href=&quot;#国内开发者&quot; class=&quot;headerlink&quot; title=&quot;国内开发者&quot;&gt;&lt;/a&gt;国内开发者&lt;/h6&gt;&lt;p&gt;国内开发者一块欢迎大家 &lt;code&gt;Fork&lt;/code&gt;提交推荐，最好能推荐一些在前端界较活跃的的开发者。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ID&lt;/th&gt;
&lt;th&gt;博客&lt;/th&gt;
&lt;th&gt;微博&lt;/th&gt;
&lt;th&gt;Github&lt;/th&gt;
&lt;th&gt;Twitter&lt;/th&gt;
&lt;th&gt;公司&lt;/th&gt;
&lt;th&gt;关键字&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;阮一峰&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;阮一峰博客&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/ruanyf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@ruanyf&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://twitter.com/ruanyf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@ruanyf&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;上海金融学院国际金融学院&lt;/td&gt;
&lt;td&gt;教师，博客写作人，翻译人，《黑客与画家》的译者&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;老赵&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://blog.zhaojie.me/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.zhaojie.me/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/jeffz&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@老赵&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;&quot;&gt;#&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;摩根大通（香港）&lt;/td&gt;
&lt;td&gt;资深码农&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;玉伯&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://lifesinger.wordpress.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;岁月如歌&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/lifesinger&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@玉伯也叫射雕&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/lifesinger&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@lifesinger&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://twitter.com/lifesinger&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@lifesinger&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;支付宝&lt;/td&gt;
&lt;td&gt;大牛&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;kejun&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://hikejun.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://hikejun.com/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/kejunz&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@kejunz&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/kejun&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@kejunz&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;豆瓣&lt;/td&gt;
&lt;td&gt;前端大神&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;寒冬winter&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://winter-cn.cnblogs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;winter-cn&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/wintercn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@寒冬winter&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;左耳朵耗子&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://coolshell.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;酷壳&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/haoel&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@左耳朵耗子&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://twitter.com/haoel&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@haoel&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;淘宝&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fool2fish&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/fool2fish&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@fool2fish&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;支付宝&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;朴灵&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://html5ify.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Html5fiy&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/shyvo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@朴灵&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/JacksonTian&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JacksonTian&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;阿里巴巴&lt;/td&gt;
&lt;td&gt;《深入浅出Node.js》作者,大牛&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Cat Chen&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://catchen.biz/home.zh-CN.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;陈广琛&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/u/1640352230&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@CatChen&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/CatChen&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@CatChen&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://twitter.com/CatChen&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@CatChen&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Facebook&lt;/td&gt;
&lt;td&gt;大牛&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BYVod&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://www.byvoid.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Beyond the Void&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/byvoid&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@BYVoid&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/BYVoid&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@byvoid&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://twitter.com/byvoid&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@BYVoid&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Facebook 英国&lt;/td&gt;
&lt;td&gt;《Node.js 开发指南》作者,大牛&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;郭宇&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://blog.guoyu.me/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Einmal ist keinmal&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/137601206&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@郭宇&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/turingou&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@turingou&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://twitter.com/turingou&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@turingou&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;糗事百科,原支付宝&lt;/td&gt;
&lt;td&gt;Node.js&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;勾三股四&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/mx006&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@勾三股四&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;淘宝&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cnberg&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://cnberg.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;冰山一角&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/berg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@berg&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;@cnberg&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;&quot;&gt;@cnberg&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;百度&lt;/td&gt;
&lt;td&gt;骑行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;大猫&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://bigc.at&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;意淫笔记&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/daemao&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@daemao&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/Damao&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@Damao&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://twitter.com/13igcat&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@13igcat&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;腾讯&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.zhihu.com/people/13igcat&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;知乎&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hzlzh&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://zlz.im&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;自力博客&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/hzlzh&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@hzlzh&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://github.com/hzlzh&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@hzlzh&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://twitter.com/hzlzh&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@hzlzh&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;腾讯&lt;/td&gt;
&lt;td&gt;前端开发&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C7210&lt;/td&gt;
&lt;td&gt;beforweb.com/&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/c7210&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@C7210&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://twittercom/hzlzh&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@C7210&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://github.com/hzlzh&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@C7210&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;UX、交互设计师、视觉与前端&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;kejun&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://hikejun.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://hikejun.com/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/kejun&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;#&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://twittercom/kejun&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;#&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://github.com/hzlzh&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;#&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;腾讯&lt;/td&gt;
&lt;td&gt;前端开发&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;张鑫旭&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.zhangxinxu.com/wordpress/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;张鑫旭博客&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/zhangxinxu&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@张鑫旭&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/zhangxinxu&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@zhangxinxu&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://twitter.com/zhangxinxu&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@zhangxinxu&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;腾讯 上海 ISUX&lt;/td&gt;
&lt;td&gt;前端开发&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;lucifr&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://lucifr.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://lucifr.com/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/lucifr&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@lucifr&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://twittercom/lucifr&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@lucifr&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://github.com/lucifr&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@lucifr&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;Mac,ios&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;smallni&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.smallni.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.smallni.com/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/hzlzh&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;#&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://twitter.com/smallniding/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@Smallni&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://github.com/hzlzh&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;#&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;腾讯&lt;/td&gt;
&lt;td&gt;前端开发&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TQ&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://targetkiller.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://targetkiller.net/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/targetkiller&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@Piser-TQ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://twitter.com/tqtan/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@tqtan&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/targetkiller&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@targetkiller&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;腾讯 ISUX&lt;/td&gt;
&lt;td&gt;网页重构&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LOO2K&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://loo2k.com/blog/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;LOO2K&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/loo2k&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@LOO2K&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/loo2k&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;LOO2K&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://twitter.com/loo2k/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;LOO2K&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;墨筹网&lt;/td&gt;
&lt;td&gt;少年才俊&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;qiqiboy&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.qiqiboy.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;qiqiboy&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/qiqiboy&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@qiqiboy&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;金山网络 UX&lt;/td&gt;
&lt;td&gt;吐槽清理大师开发者&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;foru17&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://luolei.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;罗磊的独立博客&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/foru17&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@罗罗磊磊&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/foru17&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@foru17&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://twitter.com/foru17&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@foru17&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;打酱油的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;周爱民&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://blog.csdn.net/aimingoo/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;aimingoo专栏&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;支付宝&lt;/td&gt;
&lt;td&gt;JavaScript语言精髓与编程实践作者&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hax&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://hax.iteye.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hax的技术部落格&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;前端大牛&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;三生石上&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.cnblogs.com/sanshi&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;三生石上&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;js秘密花园译者&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;司徒正美&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.cnblogs.com/rubylouvre&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ruby’s Louvre&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;前端开发&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;叶小钗&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.cnblogs.com/yexiaochai&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;叶小钗&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;前端开发&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;聂微东&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.cnblogs.com/Darren_code/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Darren&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;百度移动云&lt;/td&gt;
&lt;td&gt;前端开发&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;当耐特&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.cnblogs.com/iamzhanglei/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iamzhanglei&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;HTML5实验室作者&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;教主&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.cnblogs.com/_franky&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;_frank&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;又一牛&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;typeof&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://typeof.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;typeof&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;又一牛&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Gray Zhang&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.cnblogs.com/GrayZhang&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gray Zhang&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;百度一牛&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;李松峰&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.cn-cuckoo.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;为之漫笔&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;高程2等书的译者&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;小鱼&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://sofish.de/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;sofish&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/sofish&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@sofish&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;饿了么前端Leader&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vilic&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://vilic.info/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;vilic&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;年轻一牛&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;彬Go&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://blog.bingo929.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;彬Go&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;人人网一牛&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PuterJam&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.pjhome.net&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PuterJam’s Blog&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;腾讯一牛&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;css森林&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.cssforest.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;cssforest&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;前端博客&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;99css&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.99css.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;99css&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/ytzong&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@ytzong&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;腾讯一牛&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;秦歌&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://dancewithnet.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Kaven&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://twitter.com/kavenyan&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@kavenyan&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;js语言精粹译者&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;linxz&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.linxz.de/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;linxz&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;css那些事儿的作者&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;米随随&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://s5s5.me/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;米随随&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;腾讯ISUX 一牛&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;飘飘&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://pufen.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;飘飘&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;腾讯一牛&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Along&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://jinlong.github.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Along’s Blog&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/newwave&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@newwave&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;Opera 欧朋一牛&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;安记&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.cssha.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;cssha&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/hanan321&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@hanan321&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/hanan198501&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hanan198501&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;去哪网一牛&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;余弦&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://evilcos.me/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;EVILCOS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/evilcos&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;余弦&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/evilcos&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;evilcos&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.knownsec.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;知道创宇&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;安全（黑客）、架构、团队的各种观点与分享&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://dbanotes.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;冯大辉&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;现在就职于丁香园 (&lt;a href=&quot;http://dxy.cn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://dxy.cn&lt;/a&gt;) ，担任技术团队负责人.&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;汤姆大叔&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.cnblogs.com/TomXu/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;汤姆大叔的博客&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;《深入理解Bootstrap》、《JavaScript启示录》、《JavaScript设计模式》等多本前端书籍翻译作者&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;屈光宇&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://imququ.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Jerry Qu的小站&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/jerryqu&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;屈光宇&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;奇虎360前端，对WEB性能研究很深入&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&quot;一些社区&quot;&gt;&lt;a href=&quot;#一些社区&quot; class=&quot;headerlink&quot; title=&quot;一些社区&quot;&gt;&lt;/a&gt;一些社区&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;地址&lt;/th&gt;
&lt;th&gt;介绍&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;V2EX&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://v2ex.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://v2ex.com/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;小众活跃社区&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;知乎&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.zhihu.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.zhihu.com/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;综合问答社区&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;前端乱炖&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.html-js.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.html-js.com/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;专业的前端知识平台&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;segmentfault&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://segmentfault.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://segmentfault.com/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;综合问答社区&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;果壳问答&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.guokr.com/ask/pending/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.guokr.com/ask/pending/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;综合问答社区&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ruby&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://ruby-china.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://ruby-china.org/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;同 V2EX 氛围类似，不局限于Ruby&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Node.js 中文社区&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://cnodejs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://cnodejs.org/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Node.js 国内最活跃的社区&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Code Wall&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://coderwall.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://coderwall.com/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;国外技术社区&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;前端乱炖&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.html-js.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.html-js.com/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;国内前端技术社区&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DIV.IO&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://div.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://div.io/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;国内前端技术社区&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;w3ctech&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.w3ctech.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.w3ctech.com/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;国内前端技术社区，常有一些线下活动发布&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5 id=&quot;企业官方博客&quot;&gt;&lt;a href=&quot;#企业官方博客&quot; class=&quot;headerlink&quot; title=&quot;企业官方博客&quot;&gt;&lt;/a&gt;企业官方博客&lt;/h5&gt;&lt;p&gt;在开头我的 Feedly 订阅 opml 文件里比较全面。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;公司&lt;/th&gt;
&lt;th&gt;部门&lt;/th&gt;
&lt;th&gt;活跃度&lt;/th&gt;
&lt;th&gt;简介&lt;/th&gt;
&lt;th&gt;微博&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://isux.tencent.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ISUX 社交用户体验设计&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;腾讯&lt;/td&gt;
&lt;td&gt;ISUX&lt;/td&gt;
&lt;td&gt;★★★★☆&lt;/td&gt;
&lt;td&gt;负责腾讯的社交网络相关产品的用户体验设计与研究。&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://cdc.tencent.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;腾讯 CDC&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;腾讯&lt;/td&gt;
&lt;td&gt;CDC&lt;/td&gt;
&lt;td&gt;★★★★☆&lt;/td&gt;
&lt;td&gt;简介&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://www.alloyteam.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;腾讯Web前端 Alloy 团队 Blog&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;腾讯&lt;/td&gt;
&lt;td&gt;SNG&lt;/td&gt;
&lt;td&gt;★★★★☆&lt;/td&gt;
&lt;td&gt;主要负责手机QQ、QQ互联、腾讯Q+、WebQQ项目的团队。&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/alloyteam&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;alloyteam&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://tid.tenpay.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TID-财付通设计中心&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;腾讯&lt;/td&gt;
&lt;td&gt;TID&lt;/td&gt;
&lt;td&gt;★★★★☆&lt;/td&gt;
&lt;td&gt;简介&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://mxd.tencent.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;腾讯MXD移动互联网设计中心&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;腾讯&lt;/td&gt;
&lt;td&gt;MXD&lt;/td&gt;
&lt;td&gt;★★★★☆&lt;/td&gt;
&lt;td&gt;简介&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://e.t.qq.com/tencent_mxd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@腾讯MXD&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://fed.renren.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;人人网FED Team&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;人人网&lt;/td&gt;
&lt;td&gt;FED&lt;/td&gt;
&lt;td&gt;★★★★☆&lt;/td&gt;
&lt;td&gt;简介&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://udc.weibo.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;微博UDC&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;新浪&lt;/td&gt;
&lt;td&gt;UDC&lt;/td&gt;
&lt;td&gt;★★★★☆&lt;/td&gt;
&lt;td&gt;简介&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/sudc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@微博UDC设计中心&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://ued.sina.com.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;新浪UED&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;新浪&lt;/td&gt;
&lt;td&gt;UED&lt;/td&gt;
&lt;td&gt;★★★★☆&lt;/td&gt;
&lt;td&gt;简介&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/sudc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;#&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://uedc.163.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;网易用户体验设计中心&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;网易&lt;/td&gt;
&lt;td&gt;UED&lt;/td&gt;
&lt;td&gt;★★★★☆&lt;/td&gt;
&lt;td&gt;简介&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/sudc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;#&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://www.aliued.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;阿里巴巴（中国站）用户体验设计部博客&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;阿里巴巴&lt;/td&gt;
&lt;td&gt;UED&lt;/td&gt;
&lt;td&gt;★★★★☆&lt;/td&gt;
&lt;td&gt;简介&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/aliued&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@Alibaba-UED&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://ued.ctrip.com/blog/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;携程UED-携程旅行前端开发团队&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;携程网&lt;/td&gt;
&lt;td&gt;UED&lt;/td&gt;
&lt;td&gt;★★★☆☆&lt;/td&gt;
&lt;td&gt;携程UED,携程前端开发团队,UED,Javascript,重构,ux&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://fex.baidu.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;百度FEX&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;百度&lt;/td&gt;
&lt;td&gt;FEX&lt;/td&gt;
&lt;td&gt;★★★★☆&lt;/td&gt;
&lt;td&gt;百度前端团队Blog,关注前端技术，还更重视全端及全栈的能力。&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://ued.taobao.org/blog/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;淘宝UED&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;淘宝网&lt;/td&gt;
&lt;td&gt;UED&lt;/td&gt;
&lt;td&gt;★★★★☆&lt;/td&gt;
&lt;td&gt;用户体验、交互设计、视觉设计、前端技术博客&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://weibo.com/taobaoued&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@淘宝UED&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;书籍&quot;&gt;&lt;a href=&quot;#书籍&quot; class=&quot;headerlink&quot; title=&quot;书籍&quot;&gt;&lt;/a&gt;书籍&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;作者&lt;/th&gt;
&lt;th&gt;价格&lt;/th&gt;
&lt;th&gt;出版社&lt;/th&gt;
&lt;th&gt;简评&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://book.douban.com/subject/3327829/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Web标准设计&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;刘杰（嗷嗷）&lt;/td&gt;
&lt;td&gt;RMB 60.00&lt;/td&gt;
&lt;td&gt;清华大学出版社&lt;/td&gt;
&lt;td&gt;基础入门&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://book.douban.com/subject/4914146/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;大巧不工 : Web前端设计修炼之道&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;赖定清 / 林坚&lt;/td&gt;
&lt;td&gt;RMB 59.00&lt;/td&gt;
&lt;td&gt;机械工业出版社&lt;/td&gt;
&lt;td&gt;适合入门，了解前端全局&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://book.douban.com/subject/3132277/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;高性能网站建设指南:前端工程师技能精髓&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Steve Souders&lt;/td&gt;
&lt;td&gt;RMB 35.00&lt;/td&gt;
&lt;td&gt;电子工业出版社&lt;/td&gt;
&lt;td&gt;能从原理层理解各种方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://book.douban.com/subject/4719162/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;高性能网站建设指南:Web开发者性能优化最佳实践&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Steve Souders&lt;/td&gt;
&lt;td&gt;RMB 49.80&lt;/td&gt;
&lt;td&gt;电子工业出版社&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://book.douban.com/subject/4124141/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Web站点优化 : Web站点优化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;金&lt;/td&gt;
&lt;td&gt;RMB 55.00&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://book.douban.com/subject/10789820/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Node.js开发指南&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;郭家寶&lt;/td&gt;
&lt;td&gt;RMB 45.00&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;作者很牛&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://book.douban.com/subject/10546125/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript高级程序设计&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Nicholas C. Zakas&lt;/td&gt;
&lt;td&gt;RMB 99.00&lt;/td&gt;
&lt;td&gt;人民邮电出版社&lt;/td&gt;
&lt;td&gt;适合没事就翻翻&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://book.douban.com/subject/2228378/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript权威指南&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;弗拉纳根&lt;/td&gt;
&lt;td&gt;RMB 109.00&lt;/td&gt;
&lt;td&gt;机械工业出版社&lt;/td&gt;
&lt;td&gt;犀牛书&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://book.douban.com/subject/3590768/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript语言精粹&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Douglas Crockford&lt;/td&gt;
&lt;td&gt;RMB 35.00&lt;/td&gt;
&lt;td&gt;电子工业出版社&lt;/td&gt;
&lt;td&gt;绝对经典，相信看完后，对Javascript这门语言有了重新认识，原来这个语言是这么的美丽！&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://book.douban.com/subject/25768396/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深入浅出node.js&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;朴灵&lt;/td&gt;
&lt;td&gt;RMB 69.00&lt;/td&gt;
&lt;td&gt;人民邮电出版社&lt;/td&gt;
&lt;td&gt;一本从前端通往全端的好书&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://book.douban.com/subject/3137282/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CSS开发王&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;张亚飞&lt;/td&gt;
&lt;td&gt;RMB 49.00&lt;/td&gt;
&lt;td&gt;电子工业出版社&lt;/td&gt;
&lt;td&gt;适合有一定基础后CSS进阶用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://book.douban.com/subject/6038371/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript DOM编程艺术&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Jeremy Keith /Jeffrey Sambells&lt;/td&gt;
&lt;td&gt;RMB 49.00&lt;/td&gt;
&lt;td&gt;人民邮电出版社&lt;/td&gt;
&lt;td&gt;适合Javascript入门看&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;=======&lt;/p&gt;
&lt;h4 id=&quot;线上的一些翻译版好书&quot;&gt;&lt;a href=&quot;#线上的一些翻译版好书&quot; class=&quot;headerlink&quot; title=&quot;线上的一些翻译版好书&quot;&gt;&lt;/a&gt;线上的一些翻译版好书&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;书名&lt;/th&gt;
&lt;th&gt;地址&lt;/th&gt;
&lt;th&gt;作者&lt;/th&gt;
&lt;th&gt;译者&lt;/th&gt;
&lt;th&gt;介绍&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;JavaScript秘密花园&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://bonsaiden.github.io/JavaScript-Garden/zh/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://bonsaiden.github.io/JavaScript-Garden/zh/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;伊沃·韦特泽尔&amp;amp;张易江&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://sanshi.me/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;三生石上&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;完整书籍，界面美观，有详细demo&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Material Design 中文版&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://design.1sters.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://design.1sters.com/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Google设计手册&lt;/td&gt;
&lt;td&gt;协同翻译&lt;/td&gt;
&lt;td&gt;Google I/O 2014 发布的 Material Design 官方手册的中文翻译&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;关于&quot;&gt;&lt;a href=&quot;#关于&quot; class=&quot;headerlink&quot; title=&quot;关于&quot;&gt;&lt;/a&gt;关于&lt;/h2&gt;&lt;p&gt;======&lt;/p&gt;
&lt;p&gt;本 repo 会 不断更新，感谢推荐和分享新资源的朋友。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前端收集&quot;&gt;&lt;a href=&quot;#前端收集&quot; class=&quot;headerlink&quot; title=&quot;前端收集&quot;&gt;&lt;/a&gt;前端收集&lt;/h1&gt;&lt;p&gt;在前端路上摸索前行，在这里分享自己长期关注的前端开发相关的优秀网站、博客、以及活跃开发者。欢迎更新，以下各排名不分先后顺序。&lt;/p&gt;
&lt;p&gt;自己 RSS 长期订阅了一些IT 和技术相关博客，这里是我Feedly 输出的opml，可直接导入一些RSS 阅读器:&lt;br&gt;&lt;a href=&quot;https://github.com/foru17/luolei-dotfiles/blob/master/feedly.opml&quot;&gt;https://github.com/foru17/luolei-dotfiles/blob/master/feedly.opml&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端搜集" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E6%90%9C%E9%9B%86/"/>
    
    
      <category term="前端搜集" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E6%90%9C%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>前端开发知识结构</title>
    <link href="http://yoursite.com/2016/03/16/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86%E7%BB%93%E6%9E%84/"/>
    <id>http://yoursite.com/2016/03/16/前端开发知识结构/</id>
    <published>2016-03-16T03:42:12.000Z</published>
    <updated>2016-03-17T13:02:09.679Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Frontend-Knowledge-Structure&quot;&gt;&lt;a href=&quot;#Frontend-Knowledge-Structure&quot; class=&quot;headerlink&quot; title=&quot;Frontend Knowledge Structure&quot;&gt;&lt;/a&gt;Frontend Knowledge Structure&lt;/h1&gt;&lt;h2 id=&quot;项目起源&quot;&gt;&lt;a href=&quot;#项目起源&quot; class=&quot;headerlink&quot; title=&quot;项目起源&quot;&gt;&lt;/a&gt;项目起源&lt;/h2&gt;&lt;p&gt;还记得@jayli 的这幅前端知识结构图么。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.github.com/JacksonTian/fks/master/figures/fks.jpg&quot; alt=&quot;前端知识结构&quot;&gt;&lt;/p&gt;
&lt;p&gt;图片的形式具有诸多的不便。缺失源图的我们，无法为此图贡献些什么，随着时间的迁移，或许有些技术点会发生改变，所以有了这个GitHub项目。我们可以通过协作的方式来共同维护这个项目。Git的历史记录也可以见证前端行业的一些变迁。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;a href=&quot;http://html5ify.com/fks/fks_chart/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;可视化效果&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;前端开发知识结构&quot;&gt;&lt;a href=&quot;#前端开发知识结构&quot; class=&quot;headerlink&quot; title=&quot;前端开发知识结构&quot;&gt;&lt;/a&gt;前端开发知识结构&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;前端工程师&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;浏览器&lt;ul&gt;
&lt;li&gt;IE6/&lt;a href=&quot;http://www.microsoft.com/en-us/download/internet-explorer-7-details.aspx&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;7&lt;/a&gt;/&lt;a href=&quot;http://windows.microsoft.com/en-US/internet-explorer/downloads/ie-8&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;8&lt;/a&gt;/&lt;a href=&quot;http://windows.microsoft.com/en-US/internet-explorer/downloads/ie-9/worldwide-languages&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;9&lt;/a&gt;/&lt;a href=&quot;http://windows.microsoft.com/en-US/internet-explorer/ie-10-worldwide-languages&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;10&lt;/a&gt;/&lt;a href=&quot;http://windows.microsoft.com/en-US/internet-explorer/ie-11-worldwide-languages&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;11&lt;/a&gt; (Trident)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.mozilla.org/en-US/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Firefox&lt;/a&gt; (Gecko)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.google.com/chrome&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Chrome&lt;/a&gt;/&lt;a href=&quot;http://www.chromium.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Chromium&lt;/a&gt; (Blink)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.apple.com/safari/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Safari&lt;/a&gt; (WebKit)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.opera.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Opera&lt;/a&gt; (Blink)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;编程语言&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/JavaScript&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript&lt;/a&gt;/&lt;a href=&quot;http://nodejs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Node.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://coffeescript.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CoffeeScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.typescriptlang.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TypeScript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;切页面&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.w3.org/html/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HTML&lt;/a&gt;/&lt;a href=&quot;http://www.w3.org/TR/html5/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HTML5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.w3.org/Style/CSS/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CSS/CSS3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://sass-lang.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Sass&lt;/a&gt;/&lt;a href=&quot;http://lesscss.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;LESS&lt;/a&gt;/&lt;a href=&quot;http://learnboost.github.io/stylus/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Stylus&lt;/a&gt;/&lt;a href=&quot;https://github.com/postcss/postcss&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;postCSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.photoshop.com/products/photoshop&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PhotoShop&lt;/a&gt;/&lt;a href=&quot;http://www.getpaint.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Paint.net&lt;/a&gt;/&lt;a href=&quot;http://www.adobe.com/cn/products/fireworks.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Fireworks&lt;/a&gt;/&lt;a href=&quot;http://www.gimp.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GIMP&lt;/a&gt;/&lt;a href=&quot;http://bohemiancoding.com/sketch/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Sketch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;开发工具&lt;ul&gt;
&lt;li&gt;编辑器和IDE&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.vim.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;VIM&lt;/a&gt;/&lt;a href=&quot;http://www.sublimetext.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Sublime Text2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://notepad-plus-plus.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Notepad++&lt;/a&gt;/&lt;a href=&quot;http://www.editplus.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;EditPlus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jetbrains.com/webstorm/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WebStorm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.gnu.org/software/emacs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Emacs&lt;/a&gt;  &lt;a href=&quot;http://emacswiki.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;EmacsWiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://brackets.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Brackets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://atom.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Atom&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://limetext.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Lime Text&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://lighttable.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Light Table&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.codebox.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Codebox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://macromates.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TextMate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://neovim.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Neovim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.activestate.com/komodo-edit&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Komodo IDE / Edit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.eclipse.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Eclipse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.visualstudio.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Visual Studio&lt;/a&gt;/&lt;a href=&quot;https://code.visualstudio.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Visual Studio Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://netbeans.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NetBeans&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://c9.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cloud9 IDE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.dcloud.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HBuilder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://nuclide.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Nuclide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;调试工具&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://getfirebug.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Firebug&lt;/a&gt;/&lt;a href=&quot;https://addons.mozilla.org/en-US/firefox/addon/firecookie/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Firecookie&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://developer.yahoo.com/yslow/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;YSlow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.microsoft.com/en-us/download/details.aspx?id=18359&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;IEDeveloperToolbar&lt;/a&gt;/&lt;a href=&quot;http://www.my-debugbar.com/wiki/IETester/HomePage&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;IETester&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.fiddler2.com/fiddler2/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Fiddler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.chrome.com/devtools&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Chrome Dev Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.opera.com/dragonfly/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dragonfly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.debugbar.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DebugBar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Venkman&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Venkman&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;版本管理&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://git-scm.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Git&lt;/a&gt;/&lt;a href=&quot;http://subversion.apache.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SVN&lt;/a&gt;/&lt;a href=&quot;http://mercurial.selenic.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mercurial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Github&lt;/a&gt;/&lt;a href=&quot;https://about.gitlab.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitLab&lt;/a&gt;/&lt;a href=&quot;https://bitbucket.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bitbucket&lt;/a&gt;/&lt;a href=&quot;https://gitorious.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gitorious&lt;/a&gt;/&lt;a href=&quot;http://savannah.gnu.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GNU Savannah&lt;/a&gt;/&lt;a href=&quot;https://launchpad.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Launchpad&lt;/a&gt;/&lt;a href=&quot;http://sourceforge.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SourceForge&lt;/a&gt;/&lt;a href=&quot;http://www.collab.net/products/teamforge&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TeamForge&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;代码质量&lt;ul&gt;
&lt;li&gt;Coding style&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jslint.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JSLint&lt;/a&gt;/&lt;a href=&quot;http://www.jshint.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JSHint&lt;/a&gt;/&lt;a href=&quot;https://github.com/mdevils/node-jscs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jscs&lt;/a&gt;/&lt;a href=&quot;https://github.com/eslint/eslint&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ESLint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://csslint.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CSSLint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://validator.w3.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Markup Validation Service&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://validator.whatwg.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HTML Validators&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;单元测试&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://qunitjs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;QUnit&lt;/a&gt;/&lt;a href=&quot;http://jasmine.github.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Jasmine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://mochajs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mocha&lt;/a&gt;/&lt;a href=&quot;https://github.com/visionmedia/should.js/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Should&lt;/a&gt;/&lt;a href=&quot;http://chaijs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Chai&lt;/a&gt;/&lt;a href=&quot;https://github.com/LearnBoost/expect.js/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Expect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://unitjs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Unit JS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;自动化测试&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.seleniumhq.org/docs/03_webdriver.jsp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WebDriver&lt;/a&gt;/&lt;a href=&quot;https://github.com/angular/protractor&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Protractor&lt;/a&gt;/&lt;a href=&quot;https://github.com/karma-runner/karma&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Karma Runner&lt;/a&gt;/&lt;a href=&quot;http://sahi.co.in/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Sahi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://phantomjs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;phantomjs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://saucelabs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SourceLabs&lt;/a&gt;/&lt;a href=&quot;http://www.browserstack.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;BrowserStack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;前端库/框架&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://jquery.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jQuery&lt;/a&gt;/&lt;a href=&quot;http://underscorejs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Underscore&lt;/a&gt;/&lt;a href=&quot;http://mootools.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mootools&lt;/a&gt;/&lt;a href=&quot;http://www.prototypejs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Prototype.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://yuilibrary.com/projects/yui3/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;YUI3&lt;/a&gt;/&lt;a href=&quot;http://dojotoolkit.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dojo&lt;/a&gt;/&lt;a href=&quot;http://www.sencha.com/products/extjs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ExtJS&lt;/a&gt;/&lt;a href=&quot;http://docs.kissyui.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;KISSY&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://backbonejs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Backbone&lt;/a&gt;/&lt;a href=&quot;http://knockoutjs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;KnockoutJS&lt;/a&gt;/&lt;a href=&quot;http://emberjs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Emberjs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://angularjs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AngularJS&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/angularjs-batarang/ighdmehidhipcmcojjgiloacoafjmpfk&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Batarang&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://getbootstrap.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bootstrap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.semantic-ui.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Semantic UI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://juiceui.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Juice UI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://webatomsjs.neurospeech.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Web Atoms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.polymerchina.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Polymer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://dhtmlx.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dhtmlx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://qooxdoo.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;qooxdoo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://facebook.github.io/react/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://mozbrick.github.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Brick&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://cn.vuejs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;vue.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;前端标准/规范&lt;ul&gt;
&lt;li&gt;HTTP/1.1: RFCs 7230-7235&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://http2.github.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HTTP/2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ecma-international.org/publications/standards/Ecma-262.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ECMAScript3/5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ECMAScript6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.w3.org/TR/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;W3C: DOM/BOM/XHTML/XML/JSON/JSONP/…&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://wiki.commonjs.org/wiki/Modules/1.0&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CommonJS Modules&lt;/a&gt;/&lt;a href=&quot;https://github.com/amdjs/amdjs-api/wiki/AMD&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AMD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.w3.org/html/wg/drafts/html/master/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HTML5&lt;/a&gt;/&lt;a href=&quot;http://www.w3.org/Style/CSS/specs.en.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CSS3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://semanticweb.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Semantic Web&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://schema.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MicroData&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.w3.org/TR/rdfa-core/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RDFa&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.w3.org/WAI/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Web Accessibility&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.w3.org/TR/WAI-WEBCONTENT/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WCAG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.w3.org/TR/role-attribute/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Role Attribute&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.w3.org/TR/wai-aria/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WAI-ARIA&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;性能&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://jsperf.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JSPerf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://developer.yahoo.com/performance/rules.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;YSlow 35 rules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developers.google.com/speed/pagespeed/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PageSpeed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.httpwatch.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HTTPWatch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.compuware.com/application-performance-management/dynatrace-ajax-download.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DynaTrace’s Ajax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/5362856/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;高性能JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SEO&lt;/li&gt;
&lt;li&gt;编程知识储备&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;数据结构&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;OOP/AOP&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://net.tutsplus.com/tutorials/javascript-ajax/prototypes-in-javascript-what-you-need-to-know/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原型链&lt;/a&gt;/作用域链&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jibbering.com/faq/notes/closures/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;闭包&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://zh.wikipedia.org/wiki/%E7%BC%96%E7%A8%8B%E8%8C%83%E5%9E%8B&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;编程范型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://addyosmani.com/resources/essentialjsdesignpatterns/book/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;设计模式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://sanshi.me/articles/JavaScript-Garden-CN/html/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Javascript Tips&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;部署流程&lt;ul&gt;
&lt;li&gt;压缩合并&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://developer.yahoo.com/yui/compressor/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;YUI Compressor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developers.google.com/closure/compiler/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Google Clousure Complier&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mishoo/UglifyJS&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;UglifyJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/GoalSmashers/clean-css&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CleanCSS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;文档输出&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jsdoc3/jsdoc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JSDoc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/visionmedia/dox&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dox&lt;/a&gt;/&lt;a href=&quot;https://github.com/JacksonTian/doxmate&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Doxmate&lt;/a&gt;/&lt;a href=&quot;https://github.com/luozhihua/grunt-doxmate&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Grunt-Doxmate&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;项目构建工具&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.gnu.org/software/make/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;make&lt;/a&gt;/&lt;a href=&quot;http://ant.apache.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://code.google.com/p/gyp/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GYP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://gruntjs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Grunt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://gulpjs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gulp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://yeoman.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Yeoman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://fis.baidu.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FIS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/modulejs/modjs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mod&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;代码组织&lt;ul&gt;
&lt;li&gt;类库模块化&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.commonjs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CommonJS&lt;/a&gt;/AMD&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://yuilibrary.com/projects/yui3/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;YUI3模块&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://webpack.github.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;webpack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;业务逻辑模块化&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/twitter/bower&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;bower&lt;/a&gt;/&lt;a href=&quot;https://github.com/component/component&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;component&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;文件加载&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://labjs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;LABjs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://seajs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SeaJS&lt;/a&gt;/&lt;a href=&quot;http://requirejs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Require.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;模块化预处理器&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/substack/node-browserify&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Browserify&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;安全&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Cross-site_request_forgery&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CSRF&lt;/a&gt;/&lt;a href=&quot;http://en.wikipedia.org/wiki/Cross-site_scripting&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;XSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.w3.org/TR/CSP/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CSP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/Security/Same-origin_policy&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Same-origin policy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ADsafe/Caja/Sandbox&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;移动Web&lt;ul&gt;
&lt;li&gt;HTML5/CSS3&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://zh.wikipedia.org/wiki/%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;响应式网页设计&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://zeptojs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Zeptojs&lt;/a&gt;/&lt;a href=&quot;http://cubiq.org/iscroll&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iScroll&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;V5/&lt;a href=&quot;http://www.sencha.com/products/touch&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Sencha Touch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://phonegap.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PhoneGap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jquerymobile.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jQuery Mobile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.w3.org/Mobile/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;W3C Mobile Web Initiative&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://validator.w3.org/mobile/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;W3C mobileOK Checker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://openmobilealliance.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Open Mobile Alliance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://facebook.github.io/react-native/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React Native&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;前沿技术社区/会议&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://d2forum.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;D2&lt;/a&gt;/&lt;a href=&quot;http://www.webrebuild.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WebRebuild&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;NodeParty/&lt;a href=&quot;http://w3ctech.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;W3CTech&lt;/a&gt;/&lt;a href=&quot;http://www.html5dw.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HTML5梦工厂&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jsconf.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JSConf&lt;/a&gt;/&lt;a href=&quot;http://jsconf.cn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;沪JS(JSConf.cn)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;QCon/Velocity/SDCC&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jsconf.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JSConf&lt;/a&gt;/&lt;a href=&quot;http://www.nodeconf.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NodeConf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://cssconf.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CSSConf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;YDN/YUIConf&lt;/li&gt;
&lt;li&gt;HybridApp&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://whatwg.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WHATWG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://codepen.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;codepen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.w3cplus.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;w3cplus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cnodejs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CNode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;计算机知识储备&lt;ul&gt;
&lt;li&gt;编译原理&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;计算机网络&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://zh.wikipedia.org/wiki/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;操作系统&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;算法原理&lt;/li&gt;
&lt;li&gt;软件工程/软件测试原理&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.unicode.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Unicode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;软技能&lt;ul&gt;
&lt;li&gt;知识管理/总结分享&lt;/li&gt;
&lt;li&gt;沟通技巧/团队协作&lt;/li&gt;
&lt;li&gt;需求管理/PM&lt;/li&gt;
&lt;li&gt;交互设计/可用性/可访问性知识&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可视化&lt;ul&gt;
&lt;li&gt;SVG/Canvas/VML&lt;/li&gt;
&lt;li&gt;SVG: &lt;a href=&quot;http://d3js.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;D3&lt;/a&gt;/&lt;a href=&quot;http://raphaeljs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Raphaël&lt;/a&gt;/&lt;a href=&quot;http://snapsvg.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Snap.svg&lt;/a&gt;/&lt;a href=&quot;http://datavlab.org/datavjs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DataV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Canvas: &lt;a href=&quot;http://www.createjs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CreateJS&lt;/a&gt;/&lt;a href=&quot;http://kineticjs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;KineticJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/WebGL&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WebGL&lt;/a&gt;/&lt;a href=&quot;http://threejs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Three.JS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;后端工程师&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编程语言&lt;ul&gt;
&lt;li&gt;C/C++/Java/PHP/Ruby/Python/…&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;网页服务器&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://nginx.org/en/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Nginx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://httpd.apache.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Apache&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.lighttpd.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Lighttpd&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;数据库&lt;ul&gt;
&lt;li&gt;SQL&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.mysql.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MySQL&lt;/a&gt;/&lt;a href=&quot;http://www.postgresql.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PostgreSQL&lt;/a&gt;/&lt;a href=&quot;http://www.oracle.com/us/products/database/overview/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Oracle&lt;/a&gt;/&lt;a href=&quot;http://www-01.ibm.com/software/data/db2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DB2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.mongodb.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MongoDB&lt;/a&gt;/&lt;a href=&quot;http://couchdb.apache.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CouchDB&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;数据缓存&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://redis.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Redis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://memcached.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Memcached&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;文件缓存/代理&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.varnish-cache.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Varnish&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.squid-cache.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Squid&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;操作系统&lt;ul&gt;
&lt;li&gt;Unix/Linux/OS X/Windows&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;数据结构&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;前端书籍推荐&quot;&gt;&lt;a href=&quot;#前端书籍推荐&quot; class=&quot;headerlink&quot; title=&quot;前端书籍推荐&quot;&gt;&lt;/a&gt;前端书籍推荐&lt;/h2&gt;&lt;p&gt;★越少越简单,越适合入门,★多的要么是难度比较高,要么是比较适合在后面看,比如讲性能之类的书.&lt;/p&gt;
&lt;h3 id=&quot;CSS&quot;&gt;&lt;a href=&quot;#CSS&quot; class=&quot;headerlink&quot; title=&quot;CSS&quot;&gt;&lt;/a&gt;CSS&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.amazon.cn/Eric-Meyer-谈-CSS-迈耶/dp/B00170M84I/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Eric Meyer 谈 CSS（卷二）&lt;/a&gt;★★★&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/2308234/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CSS权威指南 （第3版）&lt;/a&gt;★★&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/4736167/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;精通CSS&lt;/a&gt;★★★&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/21338365/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HTML &amp;amp; CSS设计与构建网站&lt;/a&gt;★&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;JavaScript&quot;&gt;&lt;a href=&quot;#JavaScript&quot; class=&quot;headerlink&quot; title=&quot;JavaScript&quot;&gt;&lt;/a&gt;JavaScript&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/26433805/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript &amp;amp; jQuery交互式Web前端开发&lt;/a&gt;★&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/6038371/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript DOM编程艺术 （第2版）&lt;/a&gt;★&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/10546125/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript高级程序设计（第3版）&lt;/a&gt;★★&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/10792216/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;锋利的jQuery&lt;/a&gt;★★&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/5362856/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;高性能JavaScript&lt;/a&gt;★★★&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/3590768/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript语言精粹&lt;/a&gt;★★★&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/10549733/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript权威指南&lt;/a&gt;★★★&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/21792530/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;编写可维护的JavaScript&lt;/a&gt;★★★&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/3012828/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JAVASCRIPT语言精髓与编程实践&lt;/a&gt;★★★&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Effective-JavaScript-Specific-Software-Development/dp/0321812182&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Effective Javascript&lt;/a&gt;★★★&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/3176860/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Secrets of the JavaScript Ninja&lt;/a&gt;★★★&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/11506062/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript模式&lt;/a&gt;★★★&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/3329540/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript设计模式&lt;/a&gt;★★★★&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/10733304/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;基于MVC的JavaScript Web富应用开发&lt;/a&gt;★★★&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;性能实践&quot;&gt;&lt;a href=&quot;#性能实践&quot; class=&quot;headerlink&quot; title=&quot;性能实践&quot;&gt;&lt;/a&gt;性能实践&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/25891125/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Web性能实践日志&lt;/a&gt;★★★&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/25856314/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Web性能权威指南&lt;/a&gt;★★★&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;版本控制工具&quot;&gt;&lt;a href=&quot;#版本控制工具&quot; class=&quot;headerlink&quot; title=&quot;版本控制工具&quot;&gt;&lt;/a&gt;版本控制工具&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/4813786/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;版本控制之道 (git)&lt;/a&gt;★★&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://iissnan.com/progit/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Pro Git&lt;/a&gt;★★★&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/6526452/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Git权威指南&lt;/a&gt;★★★★&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;后端书籍推荐&quot;&gt;&lt;a href=&quot;#后端书籍推荐&quot; class=&quot;headerlink&quot; title=&quot;后端书籍推荐&quot;&gt;&lt;/a&gt;后端书籍推荐&lt;/h2&gt;&lt;h3 id=&quot;Linux管理&quot;&gt;&lt;a href=&quot;#Linux管理&quot; class=&quot;headerlink&quot; title=&quot;Linux管理&quot;&gt;&lt;/a&gt;Linux管理&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/3042029/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Linux 系统管理技术手册&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/4889838/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;鸟哥的 Linux 私房菜&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.thegeekstuff.com/linux-101-hacks-free-ebook-non-english/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Linux 101 Hacks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/3519360/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;UNIX Shell Scripting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/6806862/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Linux Command Line&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://oreilly.com/openbook/linag2/book/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Linux Network Administrator’s Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Linux编程&quot;&gt;&lt;a href=&quot;#Linux编程&quot; class=&quot;headerlink&quot; title=&quot;Linux编程&quot;&gt;&lt;/a&gt;Linux编程&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/4831448/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Linux程序设计&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/3907181/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Linux系统编程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/1788421/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Unix环境高级编程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/1467587/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Unix编程艺术&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/4292217/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Linux Programming Interface&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/3652388/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;程序员的自我修养&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/2287506/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深入理解Linux内核&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/1500149/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Unix网络编程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/1088054/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TCP/IP高级编程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;C-C&quot;&gt;&lt;a href=&quot;#C-C&quot; class=&quot;headerlink&quot; title=&quot;C/C++&quot;&gt;&lt;/a&gt;C/C++&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/4141733/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Linux C编程一站式学习&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/3012360/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;C和指针&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/2778632/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;C陷阱与缺陷&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/2377310/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;C专家编程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/2226913/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;C语言核心技术&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.google.com/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=1&amp;amp;ved=0CDEQFjAA&amp;amp;url=http%3A%2F%2Fblogimg.chinaunix.net%2Fblog%2Fupfile2%2F110210170023.pdf&amp;amp;ei=P95mUfrmNKKriALS04HAAw&amp;amp;usg=AFQjCNEzB88PnpfL0fRgJDkP3O9TlBPswA&amp;amp;sig2=isyd4ktsByNBMa5M9EPhRQ&amp;amp;bvm=bv.45107431,d.cGE&amp;amp;cad=rjt&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;彻底搞定C指针&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/21317828/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;征服C指针&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/1094797/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;C++编程思想&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/2116929/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;高质量程序设计指南—C/C++语言&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/1484262/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Inside the C++ Object Model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.stroustrup.com/Tour.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;A Tour of C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/The_C%2B%2B_Programming_Language&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The C++ Programming Language&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cppstdlib.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The C++ Standard Library - A Tutorial and Reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://webstore.ansi.org/RecordDetail.aspx?sku=INCITS%2fISO%2fIEC+14882-2012&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The C++ Standard (INCITS/ISO/IEC 14882-2011)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.artima.com/shop/overview_of_the_new_cpp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Overview of the New C++&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;前端工作面试&quot;&gt;&lt;a href=&quot;#前端工作面试&quot; class=&quot;headerlink&quot; title=&quot;前端工作面试&quot;&gt;&lt;/a&gt;前端工作面试&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/darcyclarke/Front-end-Developer-Interview-Questions&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;前端工作面试问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/markyun/My-blog/tree/master/Front-end-Developer-Questions/Question&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;前端开发面试题（中文）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;内容贡献者&quot;&gt;&lt;a href=&quot;#内容贡献者&quot; class=&quot;headerlink&quot; title=&quot;内容贡献者&quot;&gt;&lt;/a&gt;内容贡献者&lt;/h2&gt;&lt;p&gt;除了感谢Jayli提供了知识结构图的原本来，还感谢以下的内容贡献者们，结果由&lt;code&gt;git-summary&lt;/code&gt;生成于2014-01-03：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;project&lt;/span&gt;  : &lt;span class=&quot;selector-tag&quot;&gt;fks&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;repo&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;age&lt;/span&gt; : 1 &lt;span class=&quot;selector-tag&quot;&gt;year&lt;/span&gt;, 3 &lt;span class=&quot;selector-tag&quot;&gt;months&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;active&lt;/span&gt;   : 53 &lt;span class=&quot;selector-tag&quot;&gt;days&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;commits&lt;/span&gt;  : 108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;files&lt;/span&gt;    : 4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;authors&lt;/span&gt;  :&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   56  &lt;span class=&quot;selector-tag&quot;&gt;Jackson&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;Tian&lt;/span&gt;            51&lt;span class=&quot;selector-class&quot;&gt;.9&lt;/span&gt;%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    9  吴晓兰               8&lt;span class=&quot;selector-class&quot;&gt;.3&lt;/span&gt;%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    5  &lt;span class=&quot;selector-tag&quot;&gt;liyinkan&lt;/span&gt;                4&lt;span class=&quot;selector-class&quot;&gt;.6&lt;/span&gt;%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    3  &lt;span class=&quot;selector-tag&quot;&gt;chriscai&lt;/span&gt;                2&lt;span class=&quot;selector-class&quot;&gt;.8&lt;/span&gt;%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    3  &lt;span class=&quot;selector-tag&quot;&gt;fengxiaolong&lt;/span&gt;            2&lt;span class=&quot;selector-class&quot;&gt;.8&lt;/span&gt;%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    3  &lt;span class=&quot;selector-tag&quot;&gt;XiNGRZ&lt;/span&gt;                  2&lt;span class=&quot;selector-class&quot;&gt;.8&lt;/span&gt;%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    2  &lt;span class=&quot;selector-tag&quot;&gt;monkadd&lt;/span&gt;                 1&lt;span class=&quot;selector-class&quot;&gt;.9&lt;/span&gt;%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    2  &lt;span class=&quot;selector-tag&quot;&gt;Johnny&lt;/span&gt;                  1&lt;span class=&quot;selector-class&quot;&gt;.9&lt;/span&gt;%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    2  &lt;span class=&quot;selector-tag&quot;&gt;weiwenqing&lt;/span&gt;              1&lt;span class=&quot;selector-class&quot;&gt;.9&lt;/span&gt;%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    2  &lt;span class=&quot;selector-tag&quot;&gt;Yinkan&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;Li&lt;/span&gt;               1&lt;span class=&quot;selector-class&quot;&gt;.9&lt;/span&gt;%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    2  &lt;span class=&quot;selector-tag&quot;&gt;Copypeng&lt;/span&gt;                1&lt;span class=&quot;selector-class&quot;&gt;.9&lt;/span&gt;%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    2  左岸                  1&lt;span class=&quot;selector-class&quot;&gt;.9&lt;/span&gt;%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    2  &lt;span class=&quot;selector-tag&quot;&gt;Jakukyo&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;Friel&lt;/span&gt;           1&lt;span class=&quot;selector-class&quot;&gt;.9&lt;/span&gt;%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    2  &lt;span class=&quot;selector-tag&quot;&gt;Glowin&lt;/span&gt;                  1&lt;span class=&quot;selector-class&quot;&gt;.9&lt;/span&gt;%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    1  李亚川               0&lt;span class=&quot;selector-class&quot;&gt;.9&lt;/span&gt;%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    1  &lt;span class=&quot;selector-tag&quot;&gt;Evan&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;You&lt;/span&gt;                0&lt;span class=&quot;selector-class&quot;&gt;.9&lt;/span&gt;%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    1  &lt;span class=&quot;selector-tag&quot;&gt;Mickey&lt;/span&gt;                  0&lt;span class=&quot;selector-class&quot;&gt;.9&lt;/span&gt;%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    1  &lt;span class=&quot;selector-tag&quot;&gt;Mickey-&lt;/span&gt;                 0&lt;span class=&quot;selector-class&quot;&gt;.9&lt;/span&gt;%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    1  &lt;span class=&quot;selector-tag&quot;&gt;Qi&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;Junyuan&lt;/span&gt;              0&lt;span class=&quot;selector-class&quot;&gt;.9&lt;/span&gt;%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    1  &lt;span class=&quot;selector-tag&quot;&gt;browsnet&lt;/span&gt;                0&lt;span class=&quot;selector-class&quot;&gt;.9&lt;/span&gt;%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    1  &lt;span class=&quot;selector-tag&quot;&gt;doabit&lt;/span&gt;                  0&lt;span class=&quot;selector-class&quot;&gt;.9&lt;/span&gt;%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    1  &lt;span class=&quot;selector-tag&quot;&gt;guoxiangyang&lt;/span&gt;            0&lt;span class=&quot;selector-class&quot;&gt;.9&lt;/span&gt;%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    1  &lt;span class=&quot;selector-tag&quot;&gt;linkgod&lt;/span&gt;                 0&lt;span class=&quot;selector-class&quot;&gt;.9&lt;/span&gt;%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    1  &lt;span class=&quot;selector-tag&quot;&gt;popomore&lt;/span&gt;                0&lt;span class=&quot;selector-class&quot;&gt;.9&lt;/span&gt;%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    1  &lt;span class=&quot;selector-tag&quot;&gt;vipzhicheng&lt;/span&gt;             0&lt;span class=&quot;selector-class&quot;&gt;.9&lt;/span&gt;%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    1  &lt;span class=&quot;selector-tag&quot;&gt;zhaqiang&lt;/span&gt;                0&lt;span class=&quot;selector-class&quot;&gt;.9&lt;/span&gt;%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    1  &lt;span class=&quot;selector-tag&quot;&gt;Colin&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;Luo&lt;/span&gt;               0&lt;span class=&quot;selector-class&quot;&gt;.9&lt;/span&gt;%&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Frontend-Knowledge-Structure&quot;&gt;&lt;a href=&quot;#Frontend-Knowledge-Structure&quot; class=&quot;headerlink&quot; title=&quot;Frontend Knowledge Structure&quot;&gt;&lt;/a&gt;Frontend Knowledge Structure&lt;/h1&gt;&lt;h2 id=&quot;项目起源&quot;&gt;&lt;a href=&quot;#项目起源&quot; class=&quot;headerlink&quot; title=&quot;项目起源&quot;&gt;&lt;/a&gt;项目起源&lt;/h2&gt;&lt;p&gt;还记得@jayli 的这幅前端知识结构图么。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.github.com/JacksonTian/fks/master/figures/fks.jpg&quot; alt=&quot;前端知识结构&quot;&gt;&lt;/p&gt;
&lt;p&gt;图片的形式具有诸多的不便。缺失源图的我们，无法为此图贡献些什么，随着时间的迁移，或许有些技术点会发生改变，所以有了这个GitHub项目。我们可以通过协作的方式来共同维护这个项目。Git的历史记录也可以见证前端行业的一些变迁。&lt;/p&gt;
    
    </summary>
    
      <category term="前端知识结构" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>快速排序（Quicksort）的Javascript实现</title>
    <link href="http://yoursite.com/2016/03/16/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%EF%BC%88Quicksort%EF%BC%89%E7%9A%84Javascript%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2016/03/16/快速排序（Quicksort）的Javascript实现/</id>
    <published>2016-03-15T16:51:02.000Z</published>
    <updated>2016-03-17T13:02:21.624Z</updated>
    
    <content type="html">&lt;p&gt;日本程序员norahiko，写了一个排序算法的&lt;a href=&quot;http://jsdo.it/norahiko/oxIy/fullscreen&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;动画演示&lt;/a&gt;，非常有趣。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Sorting_algorithm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;排序算法&lt;/a&gt;（Sorting algorithm）是计算机科学最古老、最基本的课题之一。要想成为合格的程序员，就必须理解和掌握各种排序算法。&lt;br&gt;目前，最常见的排序算法大概有七八种，其中&lt;a href=&quot;http://en.wikipedia.org/wiki/Quicksort&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;“快速排序”&lt;/a&gt;（Quicksort）使用得最广泛，速度也较快。它是图灵奖得主C. A. R. Hoare（1934–）于1960时提出来的。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;a href=&quot;http://jsdo.it/norahiko/oxIy/fullscreen&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt; &lt;img src=&quot;http://image.beekka.com/blog/201104/bg2011040401_0.png&quot; alt=&quot;&quot;&gt; &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.beekka.com/blog/201104/bg2011040402.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;“快速排序”的思想很简单，整个排序过程只需要三步：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在数据集之中，选择一个元素作为”基准”（pivot）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;所有小于”基准”的元素，都移到”基准”的左边；所有大于”基准”的元素，都移到”基准”的右边。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对”基准”左边和右边的两个子集，不断重复第一步和第二步，直到所有子集只剩下一个元素为止。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;举例来说，现在有一个数据集{85, 24, 63, 45, 17, 31, 96, 50}，怎么对其排序呢？&lt;/p&gt;
&lt;p&gt;第一步，选择中间的元素45作为”基准”。（基准值可以任意选择，但是选择中间的值比较容易理解。）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.beekka.com/blog/201104/bg2011040403.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;第二步，按照顺序，将每个元素与”基准”进行比较，形成两个子集，一个”小于45”，另一个”大于等于45”。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.beekka.com/blog/201104/bg2011040404.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;第三步，对两个子集不断重复第一步和第二步，直到所有子集只剩下一个元素为止。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.beekka.com/blog/201104/bg2011040405.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.beekka.com/blog/201104/bg2011040406.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.beekka.com/blog/201104/bg2011040407.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.beekka.com/blog/201104/bg2011040408.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;下面参照网上的资料（&lt;a href=&quot;http://acatalept.com/blog/2008/10/28/stable-quicksort-in-javascript/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;和&lt;a href=&quot;http://www.stoimen.com/blog/2010/06/11/friday-algorithms-quicksort-difference-between-php-and-javascript/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;），用Javascript语言实现上面的算法。&lt;/p&gt;
&lt;p&gt;首先，定义一个quickSort函数，它的参数是一个数组。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; quickSort = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;arr&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后，检查数组的元素个数，如果小于等于1，就返回。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; quickSort = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;arr&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (arr.length &amp;lt;= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; arr; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接着，选择”基准”（pivot），并将其与原数组分离，再定义两个空数组，用来存放一左一右的两个子集。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; quickSort = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;arr&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (arr.length &amp;lt;= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; arr; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; pivotIndex = &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.floor(arr.length / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) ;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; pivot = arr.splice(pivotIndex, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; left = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; right = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后，开始遍历数组，小于”基准”的元素放入左边的子集，大于基准的元素放入右边的子集。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; quickSort = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;arr&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (arr.length &amp;lt;= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; arr; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; pivotIndex = &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.floor(arr.length / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) ;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; pivot = arr.splice(pivotIndex, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; left = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; right = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; arr.length; i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　　　&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (arr[i] &amp;lt; pivot) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　　　　　left.push(arr[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　　　&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　　　　　right.push(arr[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　　　&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后，使用递归不断重复这个过程，就可以得到排序后的数组。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; quickSort = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;arr&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (arr.length &amp;lt;= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; arr; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; pivotIndex = &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.floor(arr.length / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; pivot = arr.splice(pivotIndex, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; left = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; right = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; arr.length; i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　　　&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (arr[i] &amp;lt; pivot) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　　　　　left.push(arr[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　　　&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　　　　　right.push(arr[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　　　&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; quickSort(left).concat([pivot], quickSort(right));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用的时候，直接调用quickSort()就行了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.beekka.com/blog/201104/bg2011040409.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;（完）&lt;br&gt;END &lt;a href=&quot;http://www.ruanyifeng.com/blog/2011/04/quicksort_in_javascript.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;摘自&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;日本程序员norahiko，写了一个排序算法的&lt;a href=&quot;http://jsdo.it/norahiko/oxIy/fullscreen&quot;&gt;动画演示&lt;/a&gt;，非常有趣。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Sorting_algorithm&quot;&gt;排序算法&lt;/a&gt;（Sorting algorithm）是计算机科学最古老、最基本的课题之一。要想成为合格的程序员，就必须理解和掌握各种排序算法。&lt;br&gt;目前，最常见的排序算法大概有七八种，其中&lt;a href=&quot;http://en.wikipedia.org/wiki/Quicksort&quot;&gt;“快速排序”&lt;/a&gt;（Quicksort）使用得最广泛，速度也较快。它是图灵奖得主C. A. R. Hoare（1934–）于1960时提出来的。&lt;/p&gt;
    
    </summary>
    
      <category term="排序法" scheme="http://yoursite.com/categories/%E6%8E%92%E5%BA%8F%E6%B3%95/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>怎样写一个解释器</title>
    <link href="http://yoursite.com/2016/03/15/%E6%80%8E%E6%A0%B7%E5%86%99%E4%B8%80%E4%B8%AA%E8%A7%A3%E9%87%8A%E5%99%A8/"/>
    <id>http://yoursite.com/2016/03/15/怎样写一个解释器/</id>
    <published>2016-03-15T11:14:30.000Z</published>
    <updated>2016-03-17T13:02:27.641Z</updated>
    
    <content type="html">&lt;h1 id=&quot;怎样写一个解释器&quot;&gt;&lt;a href=&quot;#怎样写一个解释器&quot; class=&quot;headerlink&quot; title=&quot;怎样写一个解释器&quot;&gt;&lt;/a&gt;怎样写一个解释器&lt;/h1&gt;&lt;p&gt;这是一篇解释器的入门教程。虽然我试图从最基本的原理讲起，尽量让这篇文章不依赖于其它知识，但是这篇教程并不是针对编程的入门知识，所以我假设你已经学会了最基本的 Scheme 和函数式编程。我不是很推崇函数式编程，但它里面确实包含了很重要的一些方法。如果你完全不了解这些，可以读一下 SICP 的第一，二章（或者接下去读 The Little Schemer)。当然你也可以继续读这篇文章，有不懂的地方再去查资料。我在这里也会讲递归和模式匹配的原理。如果你已经了解这些东西，这里的内容也许可以加深你的理解。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;解释器是一种简单却又深奥的东西，以至于好多人都不会写，或者自认为会写却又不真正的会写。在这个领域里有一些历史遗留下来的误解，以至于很少有人真正的知道如何写出正确的解释器。很多“语言专家”或者“逻辑学家”的解释器代码里面有各种各样的错误，却又以谬传谬，搞得无比复杂。这误解的渊源之深，真是一言难尽。&lt;/p&gt;
&lt;p&gt;你必须从最简单的语言开始，逐步增加语言的复杂度，才能构造出正确的解释器。这篇文章就是告诉你如何写出一个最简单的语言 (lambda calculus) 的解释器，并且带有基本的的算术功能，可以作为一个高级计算器来使用。&lt;/p&gt;
&lt;p&gt;一般的程序语言课程往往从语法分析(parsing)开始，折腾 lex 和 yacc 等麻烦却不中用的工具，解决一些根本不需要存在的问题。Parsing 的作用其实只是把字符串解码成程序的语法树（AST）结构。麻烦好久得到了 AST 之后，真正的困难才开始！而很多人在写完 parser 之后就已经倒下了。鉴于这个原因，这里我用所谓的“S-expression”来表示程序的语法树（AST）结构。S-expression （加上 Lisp 对它发自“本能”的处理能力）让我们可以直接跳过 parse 的步骤，进入关键的主题：语义(semantics)。&lt;/p&gt;
&lt;p&gt;这里用的 Scheme 实现是 Racket。为了让程序简洁，我使用了 Racket 的模式匹配（pattern matching）。我对 Racket 没有特别的好感。但它安装比较方便，而且是免费的。如果你用其它的 Scheme 实现的话，恐怕要自己做一些调整。&lt;/p&gt;
&lt;h1 id=&quot;解释器是什么&quot;&gt;&lt;a href=&quot;#解释器是什么&quot; class=&quot;headerlink&quot; title=&quot;解释器是什么&quot;&gt;&lt;/a&gt;解释器是什么&lt;/h1&gt;&lt;p&gt;首先我们来谈一下解释器是什么。说白了解释器跟计算器差不多。它们都接受一个“表达式”，输出一个 “结果”。比如，得到 ‘(+ 1 2) 之后就输出 3。不过解释器的表达式要比计算器的表达式复杂一些。解释器接受的表达式叫做“程序”，而不只是简单的算术表达式。从本质上讲，每个程序都是一台机器的“描述”，而解释器就是在“模拟”这台机器的运转，也就是在进行“计算”。所以从某种意义上讲，解释器就是计算的本质。当然，不同的解释器就会带来不同的计算。&lt;/p&gt;
&lt;p&gt;需要注意的是，我们的解释器接受的参数是一个表达式的“数据结构”，而不是一个字符串。这里我们用一种叫“S-expression”的数据结构来表示表达式。比如表达式 ‘(+ 1 2) 里面的内容是三个符号：’+, ‘1 和 ‘2，而不是字符串“(+ 1 2)”。从结构化的数据里面提取信息很方便，而从字符串里提取信息很麻烦，而且容易出错。&lt;/p&gt;
&lt;p&gt;从广义上讲，解释器是一个通用的概念。计算器实际上是解释器的一种形式，只不过它处理的语言比程序的解释器简单很多。也许你会发现，CPU 和人脑，从本质上来讲也是解释器，因为解释器的本质实际上是“任何用于处理语言的机器”。&lt;/p&gt;
&lt;h1 id=&quot;递归定义-recursive-definition&quot;&gt;&lt;a href=&quot;#递归定义-recursive-definition&quot; class=&quot;headerlink&quot; title=&quot;递归定义 (recursive definition)&quot;&gt;&lt;/a&gt;递归定义 (recursive definition)&lt;/h1&gt;&lt;p&gt;解释器一般都是“递归程序”。之所以是递归的原因，在于它处理的数据结构（程序）本身是“递归定义”的结构。算术表达式就是一个这样的结构，比如：’(&lt;em&gt; (+ 1 2) (&lt;/em&gt; (- 9 6) 4))。每一个表达式里面可以含有子表达式，子表达式里面还可以有子表达式，如此无穷无尽的嵌套。看似很复杂，其实它的定义不过是：&lt;/p&gt;
&lt;p&gt;“算术表达式”有两种形式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一个数&lt;/li&gt;
&lt;li&gt;一个 ‘(op e1 e2) 这样的结构（其中 e1 和 e2 是两个“算术表达式”）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;看出来哪里在“递归”了吗？我们本来在定义“算术表达式”这个概念，而它的定义里面用到了“算术表达式”这个概念本身！这就构造了一个“回路”，让我们可以生成任意深度的表达式。&lt;/p&gt;
&lt;p&gt;很多其它的数据，包括自然数，都是可以用递归来定义的。比如常见的对自然数的定义是：&lt;/p&gt;
&lt;p&gt;“自然数”有两种形式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;零&lt;/li&gt;
&lt;li&gt;某个“自然数”的后继&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;看到了吗？“自然数”的定义里面出现了它自己！这就是为什么我们有无穷多个自然数。&lt;/p&gt;
&lt;p&gt;所以可以说递归是无所不在的，甚至有人说递归就是自然界的终极原理。递归的数据总是需要递归的程序来处理。虽然递归有时候表现为另外的形式，比如循环(loop)，但是“递归”这个概念比“循环”更广泛一些。有很多递归程序不能用循环来表达，比如我们今天要写的解释器就是一个递归程序，它就不能用循环来表达。所以写出正确的递归程序，对于设计任何系统都是至关重要的。其实递归的概念不限于程序设计。在数学证明里面有个概念叫“归纳法”(induction)，比如“数学归纳法”(mathematical induction)。其实归纳法跟递归完全是一回事。&lt;/p&gt;
&lt;p&gt;我们今天的解释器就是一个递归程序。它接受一个表达式，递归的调用它自己来处理各个子表达式，然后把各个递归的结果组合在一起，形成最后的结果。这有点像二叉树遍历，只不过我们的数据结构（程序）比二叉树复杂一些。&lt;/p&gt;
&lt;p&gt;#　模式匹配和递归：一个简单的计算器&lt;/p&gt;
&lt;p&gt;既然计算器是一种最简单的解释器，那么我们为何不从计算器开始写？下面就是一个计算器，它可以计算四则运算的表达式。这些表达式可以任意的嵌套，比如 ‘(* (+ 1 2) (+ 3 4))。我想从这个简单的例子来讲一下模式匹配(pattern matching) 和递归 (recursion) 的原理。&lt;/p&gt;
&lt;p&gt;下面就是这个计算器的代码。它接受一个表达式，输出一个数字作为结果，正如上一节所示。&lt;/p&gt;
&lt;figure class=&quot;highlight clojure&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;define&lt;/span&gt; calc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  (&lt;span class=&quot;name&quot;&gt;lambda&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;exp&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (&lt;span class=&quot;name&quot;&gt;match&lt;/span&gt; exp                                &lt;span class=&quot;comment&quot;&gt;; 匹配表达式的两种情况&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      [(&lt;span class=&quot;name&quot;&gt;?&lt;/span&gt; number? x) x]                       &lt;span class=&quot;comment&quot;&gt;; 是数字，直接返回&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      [`(,op ,e1 ,e2)                         &lt;span class=&quot;comment&quot;&gt;; 匹配并且提取出操作符 op 和两个操作数 e1, e2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;let&lt;/span&gt;&lt;/span&gt; ([v1 (&lt;span class=&quot;name&quot;&gt;calc&lt;/span&gt; e1)]                   &lt;span class=&quot;comment&quot;&gt;; 递归调用 calc 自己，得到 e1 的值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             [v2 (&lt;span class=&quot;name&quot;&gt;calc&lt;/span&gt; e2)])                  &lt;span class=&quot;comment&quot;&gt;; 递归调用 calc 自己，得到 e2 的值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         (&lt;span class=&quot;name&quot;&gt;match&lt;/span&gt; op                            &lt;span class=&quot;comment&quot;&gt;; 分支：处理操作符 op 的 4 种情况&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           [&#39;+ (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;+&lt;/span&gt;&lt;/span&gt; v1 v2)]                     &lt;span class=&quot;comment&quot;&gt;; 如果是加号，输出结果为 (+ v1 v2)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           [&#39;- (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;-&lt;/span&gt;&lt;/span&gt; v1 v2)]                     &lt;span class=&quot;comment&quot;&gt;; 如果是减号，乘号，除号，相似的处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           [&#39;* (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;*&lt;/span&gt;&lt;/span&gt; v1 v2)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           [&#39;/ (/ v1 v2)]))])))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里的 match 语句是一个模式匹配。它的形式是这样：&lt;/p&gt;
&lt;figure class=&quot;highlight clojure&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;match&lt;/span&gt; exp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [模式 结果]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [模式 结果]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   ...   ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;它根据表达式 exp 的“结构”来进行“分支”操作。每一个分支由两部分组成，左边的是一个“模式”，右边的是一个结果。左边的模式在匹配之后可能会绑定一些变量，它们可以在右边的表达式里面使用。&lt;/p&gt;
&lt;p&gt;一般说来，数据的“定义”有多少种情况，用来处理它的“模式”就有多少情况。比如算术表达式有两种情况，数字或者 (op e1 e2)。所以用来处理它的 match 语句就有两种模式。“你所有的情况，我都能处理”，这就是“穷举法”。穷举的思想非常重要，你漏掉的任何一种情况，都非常有可能带来麻烦。所谓的“数学归纳法”，就是这种穷举法在自然数的递归定义上面的表现。因为你穷举了所有的自然数可能被构造的两种形式，所以你能确保定理对“任意自然数”成立。&lt;/p&gt;
&lt;p&gt;那么模式是如何工作的呢？比如 ‘(,op ,e1 ,e2) 就是一个模式（pattern），它被用来匹配输入的 exp。模式匹配基本的原理就是匹配与它“结构相同”的数据。比如，如果 exp 是 ‘(+ 1 2)，那么 ‘(,op ,e1 ,e2) 就会把 op 绑定到 ‘+，把 e1 绑定到 ‘1，把 e2 绑定到 ‘2。这是因为它们结构相同：&lt;/p&gt;
&lt;figure class=&quot;highlight scheme&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&#39;(,op ,e1 ,e2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#39;( +   &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;   &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;说白了，模式就是一个可以含有“名字”（像 op, e1 和 e2）的“数据结构”，像 ‘(,op ,e1 ,e2)。我们拿这个带有名字的结构去“匹配”实际的数据（像 ‘(+ 1 2))。当它们一一对应之后，这些名字就自动被绑定到实际数据里相应位置的值。模式里面不但可以含有名字，也可以含有具体的数据。比如你可以构造一个模式 ‘(,op ,e1 42)，用来匹配第二个操作数固定为 42 的那些表达式。&lt;/p&gt;
&lt;p&gt;看见左边的模式，你就像直接“看见”了输入数据的形态，然后对里面的元素进行操作。它可以让我们一次性的“拆散”(destruct) 数据结构，把各个部件（域）的值绑定到多个变量，而不需要使用多个访问函数。所以模式匹配是非常直观的编程方式，值得每种语言借鉴。很多函数式语言里都有类似的功能，比如 ML 和 Haskell。&lt;/p&gt;
&lt;p&gt;注意这里 e1 和 e2 里面的操作数还不是值，它们是表达式。我们递归的调用 interp1 自己，分别得到 e1 和 e2 的值 v1 和 v2。它们应该是数字。&lt;/p&gt;
&lt;p&gt;你注意到我们在什么地方使用了递归吗？如果你再看一下“算术表达式”的定义：&lt;/p&gt;
&lt;p&gt;“算术表达式”有两种形式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一个数&lt;/li&gt;
&lt;li&gt;一个 ‘(op e1 e2) 这样的结构（其中 e1 和 e2 是两个“算术表达式”）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;你就会发现这个定义里面“递归”的地方就是 e1 和 e2，所以 calc 在 e1 和 e2 上面递归的调用自己。如果你在数据定义的每个递归处都进行递归，那么你的递归程序就会穷举所有的情况。&lt;/p&gt;
&lt;p&gt;之后，我们根据操作符 op 的不同，对这两个值 v1 和 v2 分别进行操作。如果 op 是加号 ‘+，我们就调用 Scheme 的加法操作，作用于 v1 和 v2，并且返回运算所得的值。如果是减号，乘号，除号，我们也进行相应的操作，返回它们的值。&lt;/p&gt;
&lt;p&gt;所以你就可以得到如下的测试结果：&lt;/p&gt;
&lt;figure class=&quot;highlight clojure&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;calc&lt;/span&gt; &#39;(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;+&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;; =&amp;gt; 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;calc&lt;/span&gt; &#39;(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;*&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;; =&amp;gt; 6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;calc&lt;/span&gt; &#39;(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;*&lt;/span&gt;&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;+&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;+&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;; =&amp;gt; 21&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;一个计算器就是这么简单。你可以试试这些例子，然后自己再做一些新的例子。&lt;/p&gt;
&lt;h1 id=&quot;什么是-lambda-calculus？&quot;&gt;&lt;a href=&quot;#什么是-lambda-calculus？&quot; class=&quot;headerlink&quot; title=&quot;什么是 lambda calculus？&quot;&gt;&lt;/a&gt;什么是 lambda calculus？&lt;/h1&gt;&lt;p&gt;现在让我们过渡到一种更强大的语言：lambda calculus。它虽然名字看起来很吓人，但是其实非常简单。它的三个元素分别是是：变量，函数，调用。用传统的表达法，它们看起来就是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;变量：x&lt;/li&gt;
&lt;li&gt;函数：λx.t&lt;/li&gt;
&lt;li&gt;调用：t1 t2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每个程序语言里面都有这三个元素，只不过具体的语法不同，所以你其实每天都在使用 lambda calculus。用 Scheme 作为例子，这三个元素看起来就像：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;变量：x&lt;/li&gt;
&lt;li&gt;函数：(lambda (x) e)&lt;/li&gt;
&lt;li&gt;调用：(e1 e2)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一般的程序语言还有很多其它的结构，可是这三个元素却是缺一不可的。所以构建解释器的最关键步骤就是把这三个东西搞清楚。构造任何一个语言的解释器一般都是从这三个元素开始，在确保它们完全正确之后才慢慢加入其它的元素。&lt;/p&gt;
&lt;p&gt;有一个很简单的思维方式可以让你直接看到这三元素的本质。记得我说过，每个程序都是一个“机器的描述”吗？所以每个 lambda calculus 的表达式也是一个机器的描述。这种机器跟电子线路非常相似。lambda calculus 的程序和机器有这样的一一对应关系：一个变量就是一根导线。一个函数就是某种电子器件的“样板”，有它自己的输入和输出端子，自己的逻辑。一个调用都是在设计中插入一个电子器件的“实例”，把它的输入端子连接到某些已有的导线，这些导线被叫做“参数”。所以一个 lambda calculus 的解释器实际上就是一个电子线路的模拟器。所以如果你听说有些芯片公司开始用类似 Haskell 的语言（比如 Bluespec System Verilog）来设计硬件，也就不奇怪了。&lt;/p&gt;
&lt;p&gt;需要注意的是，跟一般语言不同，lambda calculus 的函数只有一个参数。这其实不是一个严重的限制，因为 lambda calculus 的函数可以被作为值传递 (这叫 first-class function)，所以你可以用嵌套的函数定义来表示两个以上参数的函数。比如，(lambda (x) (lambda (y) y)) 就可以表示一个两个参数的函数，它返回第二个参数。不过当它被调用的时候，你需要两层调用，就像这样：&lt;/p&gt;
&lt;figure class=&quot;highlight scheme&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(((&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;lambda&lt;/span&gt;&lt;/span&gt; (x) (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;lambda&lt;/span&gt;&lt;/span&gt; (y) y)) &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;; =&amp;gt; 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;虽然看起来丑一点，但是它让我们的解释器达到终极的简单。简单对于设计程序语言的人是至关重要的。一开头就追求复杂的设计，往往导致一堆纠缠不清的问题。&lt;/p&gt;
&lt;p&gt;lambda calculus 不同于普通语言的另外一个特点就是它没有数字等基本的数据类型，所以你不能直接用 lambda calculus 来计算像 (+ 1 2) 这样的表达式。但是有意思的是，数字却可以被 lambda calculus 的三个基本元素“编码”(encoding) 出来。这种编码可以用来表示自然数，布尔类型，pair，list，以至于所有的数据结构。它还可以表示 if 条件语句等复杂的语法结构。常见的一种这样的编码叫做 Church encoding。所以 lambda calculus 其实可以产生出几乎所有程序语言的功能。中国的古话“三生万物”，也许就是这个意思。&lt;/p&gt;
&lt;h1 id=&quot;求值顺序，call-by-name-call-by-value&quot;&gt;&lt;a href=&quot;#求值顺序，call-by-name-call-by-value&quot; class=&quot;headerlink&quot; title=&quot;求值顺序，call-by-name, call-by-value&quot;&gt;&lt;/a&gt;求值顺序，call-by-name, call-by-value&lt;/h1&gt;&lt;p&gt;当解释一个程序的时候，我们可以有好几种不同的“求值顺序”(evaluation order)。这有点像遍历二叉树有好几种不同的顺序一样（中序，前序，后序）。只不过这里的顺序更加复杂一些。比如下面的程序：&lt;br&gt;&lt;figure class=&quot;highlight scheme&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;((&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;lambda&lt;/span&gt;&lt;/span&gt; (x) (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;*&lt;/span&gt;&lt;/span&gt; x x)) (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;+&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们可以先执行最外层的调用，把 (+ 1 2) 传递进入函数，得到 (* (+ 1 2) (+ 1 2))。所以求值顺序是：&lt;br&gt;&lt;figure class=&quot;highlight lisp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;((&lt;span class=&quot;name&quot;&gt;lambda&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;x&lt;/span&gt;) (&lt;span class=&quot;name&quot;&gt;*&lt;/span&gt; x x)) (&lt;span class=&quot;name&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;=&amp;gt; (&lt;span class=&quot;name&quot;&gt;*&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) (&lt;span class=&quot;name&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;=&amp;gt; (&lt;span class=&quot;name&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;=&amp;gt; (&lt;span class=&quot;name&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;=&amp;gt; &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;但是我们也可以先算出 (+ 1 2) 的结果，然后再把它传进这个函数。所以求值顺序是：&lt;br&gt;&lt;figure class=&quot;highlight lisp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;((&lt;span class=&quot;name&quot;&gt;lambda&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;x&lt;/span&gt;) (&lt;span class=&quot;name&quot;&gt;*&lt;/span&gt; x x)) (&lt;span class=&quot;name&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;=&amp;gt; ((&lt;span class=&quot;name&quot;&gt;lambda&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;x&lt;/span&gt;) (&lt;span class=&quot;name&quot;&gt;*&lt;/span&gt; x x)) &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;=&amp;gt; (&lt;span class=&quot;name&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;=&amp;gt; &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们把第一种方式叫做 call-by-name (CBN)，因为它把参数的“名字”（也就是表达式自己）传进函数。我们把第二种方式叫做 call-by-value (CBV)，因为它先把参数的名字进行解释，得到它们的“值”之后，才把它们传进函数。&lt;/p&gt;
&lt;p&gt;这两种解释方式的效率是不一样的。从上面的例子，你可以看出 CBN 比 CBV 多出了一步。为什么呢？因为函数 (lambda (x) (* x x)) 里面有两个 x，所以 (+ 1 2) 被传进函数的时候被复制了一份。之后我们需要对它的每一拷贝都进行一次解释，所以 (+ 1 2) 被计算了两次！&lt;/p&gt;
&lt;p&gt;鉴于这个原因，几乎所有的程序语言都采用 CBV，而不是 CBN。CBV 常常被叫做“strict”或者“applicative order”。虽然 CBN 效率低下，与它等价的一种顺序 call-by-need 却没有这个问题。call-by-need 的基本原理是对 CBN 中被拷贝的表达式进行“共享”和“记忆”。当一个表达式的一个拷贝被计算过了之后，其它的拷贝自动得到它的值，从而避免重复求值。call-by-need 也叫“lazy evaluation”，它是 Haskell 语言所用的语义。&lt;/p&gt;
&lt;p&gt;求值顺序不只停留于 call-by-name, call-by-value, call-by-need。人们还设计了很多种其它的求值顺序，虽然它们大部分都不能像 call-by-value 和 call-by-need 这么实用。&lt;/p&gt;
&lt;h1 id=&quot;完整的-lambda-calculus-解释器&quot;&gt;&lt;a href=&quot;#完整的-lambda-calculus-解释器&quot; class=&quot;headerlink&quot; title=&quot;完整的 lambda calculus 解释器&quot;&gt;&lt;/a&gt;完整的 lambda calculus 解释器&lt;/h1&gt;&lt;p&gt;下面是我们今天要完成的解释器，它只有39行（不包括空行和注释）。你可以先留意一下各个部分的注释，它们标注各个部件的名称，并且有少许讲解。这个解释器实现的是 CBV 顺序的 lambda calculus，外加基本的算术。加入基本算术的原因是为了可以让初学者写出比较有趣一点的程序，不至于一开头就被迫去学 Church encoding。&lt;br&gt;&lt;figure class=&quot;highlight clojure&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;;; 以下三个定义 env0, ent-env, lookup 是对环境（environment）的基本操作：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;; 空环境&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;define&lt;/span&gt; env0 &#39;())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;; 扩展。对环境 env 进行扩展，把 x 映射到 v，得到一个新的环境&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;define&lt;/span&gt; ext-env&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  (&lt;span class=&quot;name&quot;&gt;lambda&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;x&lt;/span&gt; v env)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;cons&lt;/span&gt;&lt;/span&gt; `(,x . ,v) env)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;; 查找。在环境中 env 中查找 x 的值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;define&lt;/span&gt; lookup&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  (&lt;span class=&quot;name&quot;&gt;lambda&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;x&lt;/span&gt; env)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;let&lt;/span&gt;&lt;/span&gt; ([p (&lt;span class=&quot;name&quot;&gt;assq&lt;/span&gt; x env)])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;cond&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       [(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;not&lt;/span&gt;&lt;/span&gt; p) x]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       [else (&lt;span class=&quot;name&quot;&gt;cdr&lt;/span&gt; p)]))))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;; 闭包的数据结构定义，包含一个函数定义 f 和它定义时所在的环境&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;struct&lt;/span&gt; Closure (&lt;span class=&quot;name&quot;&gt;f&lt;/span&gt; env))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;; 解释器的递归定义（接受两个参数，表达式 exp 和环境 env）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;; 共 5 种情况（变量，函数，调用，数字，算术表达式）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;define&lt;/span&gt; interp1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  (&lt;span class=&quot;name&quot;&gt;lambda&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;exp&lt;/span&gt; env)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (&lt;span class=&quot;name&quot;&gt;match&lt;/span&gt; exp                                          &lt;span class=&quot;comment&quot;&gt;; 模式匹配 exp 的以下情况（分支）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      [(&lt;span class=&quot;name&quot;&gt;?&lt;/span&gt; symbol? x) (&lt;span class=&quot;name&quot;&gt;lookup&lt;/span&gt; x env)]                    &lt;span class=&quot;comment&quot;&gt;; 变量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      [(&lt;span class=&quot;name&quot;&gt;?&lt;/span&gt; number? x) x]                                 &lt;span class=&quot;comment&quot;&gt;; 数字&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      [`(&lt;span class=&quot;name&quot;&gt;lambda&lt;/span&gt; (,x) ,e)                                &lt;span class=&quot;comment&quot;&gt;; 函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       (&lt;span class=&quot;name&quot;&gt;Closure&lt;/span&gt; exp env)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      [`(,e1 ,e2)                                       &lt;span class=&quot;comment&quot;&gt;; 调用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;let&lt;/span&gt;&lt;/span&gt; ([v1 (&lt;span class=&quot;name&quot;&gt;interp1&lt;/span&gt; e1 env)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             [v2 (&lt;span class=&quot;name&quot;&gt;interp1&lt;/span&gt; e2 env)])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         (&lt;span class=&quot;name&quot;&gt;match&lt;/span&gt; v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           [(&lt;span class=&quot;name&quot;&gt;Closure&lt;/span&gt; `(&lt;span class=&quot;name&quot;&gt;lambda&lt;/span&gt; (,x) ,e) env1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            (&lt;span class=&quot;name&quot;&gt;interp1&lt;/span&gt; e (&lt;span class=&quot;name&quot;&gt;ext-env&lt;/span&gt; x v2 env1))]))]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      [`(,op ,e1 ,e2)                                   &lt;span class=&quot;comment&quot;&gt;; 算术表达式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;let&lt;/span&gt;&lt;/span&gt; ([v1 (&lt;span class=&quot;name&quot;&gt;interp1&lt;/span&gt; e1 env)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             [v2 (&lt;span class=&quot;name&quot;&gt;interp1&lt;/span&gt; e2 env)])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         (&lt;span class=&quot;name&quot;&gt;match&lt;/span&gt; op&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           [&#39;+ (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;+&lt;/span&gt;&lt;/span&gt; v1 v2)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           [&#39;- (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;-&lt;/span&gt;&lt;/span&gt; v1 v2)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           [&#39;* (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;*&lt;/span&gt;&lt;/span&gt; v1 v2)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           [&#39;/ (/ v1 v2)]))])))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;; 解释器的“用户界面”函数。它把 interp1 包装起来，掩盖第二个参数，初始值为 env0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;define&lt;/span&gt; interp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  (&lt;span class=&quot;name&quot;&gt;lambda&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;exp&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (&lt;span class=&quot;name&quot;&gt;interp1&lt;/span&gt; exp env0)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;测试例子&quot;&gt;&lt;a href=&quot;#测试例子&quot; class=&quot;headerlink&quot; title=&quot;测试例子&quot;&gt;&lt;/a&gt;测试例子&lt;/h1&gt;&lt;p&gt;这里有一些测试的例子。你最好先玩一下再继续往下看，或者自己写一些新的例子。学习程序的最好办法就是玩弄这个程序，给它一些输入，观察它的行为。有时候这比任何语言的描述都要直观和清晰。&lt;br&gt;&lt;figure class=&quot;highlight clojure&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;interp&lt;/span&gt; &#39;(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;+&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;; =&amp;gt; 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;interp&lt;/span&gt; &#39;(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;*&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;; =&amp;gt; 6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;interp&lt;/span&gt; &#39;(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;*&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;+&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;; =&amp;gt; 14&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;interp&lt;/span&gt; &#39;(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;*&lt;/span&gt;&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;+&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;+&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;; =&amp;gt; 21&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;interp&lt;/span&gt; &#39;(((&lt;span class=&quot;name&quot;&gt;lambda&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;x&lt;/span&gt;) (&lt;span class=&quot;name&quot;&gt;lambda&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;y&lt;/span&gt;) (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;*&lt;/span&gt;&lt;/span&gt; x y))) &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;; =&amp;gt; 6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;interp&lt;/span&gt; &#39;((&lt;span class=&quot;name&quot;&gt;lambda&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;x&lt;/span&gt;) (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;*&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; x)) &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;; =&amp;gt; 6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;interp&lt;/span&gt; &#39;((&lt;span class=&quot;name&quot;&gt;lambda&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;y&lt;/span&gt;) (((&lt;span class=&quot;name&quot;&gt;lambda&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;y&lt;/span&gt;) (&lt;span class=&quot;name&quot;&gt;lambda&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;x&lt;/span&gt;) (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;*&lt;/span&gt;&lt;/span&gt; y &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;))) &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)) &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;; =&amp;gt; 6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;; (interp &#39;(1 2))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;; =&amp;gt; match: no matching clause for 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在接下来的几节，我们来看看这个解释器里主要的分支（match）表达式的各种情况。&lt;/p&gt;
&lt;h1 id=&quot;对基本算术操作的解释&quot;&gt;&lt;a href=&quot;#对基本算术操作的解释&quot; class=&quot;headerlink&quot; title=&quot;对基本算术操作的解释&quot;&gt;&lt;/a&gt;对基本算术操作的解释&lt;/h1&gt;&lt;p&gt;算术操作在解释器里是最简单也是最“基础”的东西，因为它们不能再被细分为更小的元素了。所以在接触函数，调用等复杂的结构之前，我们来看一看对算术操作的处理。以下就是这个解释器里处理基本算术的部分，它是 interp1 的最后一个分支。&lt;br&gt;&lt;figure class=&quot;highlight clojure&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;match&lt;/span&gt; exp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ... ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [`(,op ,e1 ,e2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;let&lt;/span&gt;&lt;/span&gt; ([v1 (&lt;span class=&quot;name&quot;&gt;interp1&lt;/span&gt; e1 env)]            &lt;span class=&quot;comment&quot;&gt;; 递归调用 interp1 自己，得到 e1 的值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         [v2 (&lt;span class=&quot;name&quot;&gt;interp1&lt;/span&gt; e2 env)])           &lt;span class=&quot;comment&quot;&gt;; 递归调用 interp1 自己，得到 e2 的值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     (&lt;span class=&quot;name&quot;&gt;match&lt;/span&gt; op                            &lt;span class=&quot;comment&quot;&gt;; 分支：处理操作符 op 的 4 种情况&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       [&#39;+ (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;+&lt;/span&gt;&lt;/span&gt; v1 v2)]                     &lt;span class=&quot;comment&quot;&gt;; 如果是加号，输出结果为 (+ v1 v2)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       [&#39;- (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;-&lt;/span&gt;&lt;/span&gt; v1 v2)]                     &lt;span class=&quot;comment&quot;&gt;; 如果是减号，乘号，除号，相似的处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       [&#39;* (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;*&lt;/span&gt;&lt;/span&gt; v1 v2)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       [&#39;/ (/ v1 v2)]))])&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;你可以看到它几乎跟刚才写的计算器一模一样，不过现在 interp1 的调用多了一个参数 env 而已。这个 env 是什么，我们下面很快就讲。&lt;/p&gt;
&lt;h1 id=&quot;变量和函数&quot;&gt;&lt;a href=&quot;#变量和函数&quot; class=&quot;headerlink&quot; title=&quot;变量和函数&quot;&gt;&lt;/a&gt;变量和函数&lt;/h1&gt;&lt;p&gt;我想用两个小节来简单介绍一下变量，函数和环境。稍后的几节我们再来看它们是如何实现的。&lt;/p&gt;
&lt;p&gt;变量(variable)的产生是数学史上的最大突破之一。因为变量可以被绑定到不同的值，从而使得函数的实现成为可能。比如数学函数 f(x) = x&lt;em&gt;2，其中 x 是一个变量，它把输入的值传递到函数的主体 x&lt;/em&gt;2里面。如果没有变量，函数就不可能实现。&lt;/p&gt;
&lt;p&gt;对变量的最基本的操作是对它的“绑定”（binding）和“取值”（evaluate）。什么是绑定呢？拿上面的函数 f(x) 作为例子吧。当 x 等于 1 的时候，f(x) 的值是 2，而当 x 等于 2 的时候，f(x) 的值是 4。在上面的句子里，我们对 x 进行了两次绑定。第一次 x 被绑定到了 1，第二次被绑定到了 2。你可以把“绑定”理解成这样一个动作，就像当你把插头插进电源插座的那一瞬间。插头的插脚就是 f(x) 里面的那个 x，而 x*2 里面的 x，则是电线的另外一端。所以当你把插头插进插座，电流就通过这根电线到达另外一端。如果电线导电性能良好，两头的电压应该几乎相等。有点跑题了…… 反正只要记住一点：绑定就是插进插座的那个“动作”。&lt;/p&gt;
&lt;p&gt;那么“取值”呢？再想一下前面的例子，当我们用伏特表测电线另外一端的电压的时候，我们就是在对这个变量进行取值。有时候这种取值的过程不是那么明显，比如电流如果驱动了风扇的电动机。虽然电线的另外一头没有显示电压，其实电流已经作用于电动机的输入端子，进入线圈。所以你也可以说其实是电动机在对变量进行取值。&lt;/p&gt;
&lt;h1 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h1&gt;&lt;p&gt;我们的解释器是一个挺笨的程序，它只能一步一步的做事情。比如，当它需要求 f(1) 的值的时候，它做以下两步操作：1) 把 x 绑定到 1; 2) 进入 f 的函数体对 x*2 进行求值。这就像一个人做出这两个动作：1)把插头插进插座，2) 走到电线的另外一头测量它的电压，并且把结果乘以 2。在第一步和第二步之间，我们如何记住 x 的值呢？它必须被传递到那个用来处理函数体的递归解释器里面。这就是为什么我们需要“环境”，也就是 interp1 的第二个参数 env。&lt;/p&gt;
&lt;p&gt;环境记录变量的值，并且把它们传递到它们的“可见区域”，用术语说就叫做“作用域”(scope)。通常作用域是整个函数体，但是有一个例外，就是当函数体内有嵌套的函数定义的时候，内部的那个函数如果有同样的参数名，那么外层的参数名就会被“屏蔽”（shadow）掉。这样内部的函数体就看不到外层的参数了，只看到它自己的。比如 (lambda (x) (lambda (x) (* x 2)))，里面的那个 x 看到的就是内层函数的 x，而不是外层的。&lt;/p&gt;
&lt;p&gt;在我们的解释器里，用于处理环境的主要部件如下：&lt;br&gt;&lt;figure class=&quot;highlight scheme&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;; 空环境&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;define&lt;/span&gt;&lt;/span&gt; env0 &#39;())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;; 对环境 env 进行扩展，把 x 映射到 v&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;define&lt;/span&gt;&lt;/span&gt; ext-env&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;lambda&lt;/span&gt;&lt;/span&gt; (x v env)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;cons&lt;/span&gt;&lt;/span&gt; `(,x . ,v) env)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;; 取值。在环境中 env 中查找 x 的值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;define&lt;/span&gt;&lt;/span&gt; lookup&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;lambda&lt;/span&gt;&lt;/span&gt; (x env)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;let&lt;/span&gt;&lt;/span&gt; ([&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;assq&lt;/span&gt;&lt;/span&gt; x env)])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;cond&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       [(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;not&lt;/span&gt;&lt;/span&gt; p) x]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       [&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;else&lt;/span&gt;&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;cdr&lt;/span&gt;&lt;/span&gt; p)]))))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里我们用的是 Scheme 的 association list 来表示环境。Association list 看起来像这个样子：((x . 1) (y . 2) (z . 5))。也就是一个两元组（pair）的链表，左边的元素是 key，右边的元素是 value。写的直观一点就是：&lt;br&gt;&lt;figure class=&quot;highlight clojure&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;((&lt;span class=&quot;name&quot;&gt;x&lt;/span&gt; . &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; (&lt;span class=&quot;name&quot;&gt;y&lt;/span&gt; . &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; (&lt;span class=&quot;name&quot;&gt;z&lt;/span&gt; . &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;查表操作就是从头到尾搜索，如果左边的 key 是要找的变量，就返回整个 pair。简单吧？&lt;/p&gt;
&lt;p&gt;ext-env 扩展一个环境。比如，如果原来的环境是 ((y . 2) (z . 5)) 那么 (ext-env x 1 ((y . 2) (z . 5)))，就会得到 ((x . 1) (y . 2) (z . 5))。也就是把 (x . 1) 放到最前面去。值得注意的一点是，环境被扩展以后其实是形成了一个新的环境，原来的环境并没有被“改变”。比如上面红色的部分就是原来的数据结构，只不过它被放到另一个更大的结构里面了。这叫做“函数式数据结构”。这个性质在我们的解释器里是至关重要的，因为当我们扩展了一个环境之后，其它部分的代码仍然可以原封不动的访问扩展前的那个旧的环境。当我们讲到调用的时候也许你就会发现这个性质的用处。&lt;/p&gt;
&lt;p&gt;你也可以用另外的，更高效的数据结构（比如 splay tree）来表示环境。你甚至可以用函数来表示环境。唯一的要求就是，它是变量到值的“映射”(map)。你把 x 映射到 1，待会儿查询 x 的值，它应该仍然是 1，而不会消失掉或者别的值。也就是说，这几个函数要满足这样的一种“界面约定”：如果 e 是 (ext-env ‘x 1 env) 返回的环境，那么 (lookup ‘x e) 应该返回 1。只要满足这样的界面约定的函数都可以被叫做 ext-env 和 lookup，以至于可以它们用来完全替代这里的函数而不会导致其它代码的修改。这叫做“抽象”，也就是“面向对象语言”的精髓所在。&lt;/p&gt;
&lt;h1 id=&quot;对变量的解释&quot;&gt;&lt;a href=&quot;#对变量的解释&quot; class=&quot;headerlink&quot; title=&quot;对变量的解释&quot;&gt;&lt;/a&gt;对变量的解释&lt;/h1&gt;&lt;p&gt;了解了变量，函数和环境，让我们来看看解释器对变量的操作，也就是 interp1 的 match 的第一种情况。它非常简单，就是在环境中查找变量的值。这里的 (? symbol? x) 是一个特殊的模式，它使用 Scheme 函数 symbol? 来判断输入是否匹配，如果是的就把它绑定到 x，查找它的值，然后返回这个值。&lt;/p&gt;
&lt;figure class=&quot;highlight clojure&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[(&lt;span class=&quot;name&quot;&gt;?&lt;/span&gt; symbol? x) (&lt;span class=&quot;name&quot;&gt;lookup&lt;/span&gt; x env)]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意由于我们的解释器是递归的，所以这个值也许会被返回到更高层的表达式，比如 (* x 2)。&lt;/p&gt;
&lt;h1 id=&quot;对数字的解释&quot;&gt;&lt;a href=&quot;#对数字的解释&quot; class=&quot;headerlink&quot; title=&quot;对数字的解释&quot;&gt;&lt;/a&gt;对数字的解释&lt;/h1&gt;&lt;p&gt;对数字的解释也很简单。由于在 Scheme 里面名字 ‘2 就是数字 2（我认为这是 Scheme 设计上的一个小错误），所以我们不需要对数字的名字做特殊的处理，把它们原封不动的返回。&lt;br&gt;&lt;figure class=&quot;highlight clojure&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[(&lt;span class=&quot;name&quot;&gt;?&lt;/span&gt; number? x) x]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;对函数的解释&quot;&gt;&lt;a href=&quot;#对函数的解释&quot; class=&quot;headerlink&quot; title=&quot;对函数的解释&quot;&gt;&lt;/a&gt;对函数的解释&lt;/h1&gt;&lt;p&gt;对函数的解释是一个比较难说清楚的问题。由于函数体内也许会含有外层函数的参数，比如 (lambda (y) (lambda (x) (&lt;em&gt; y 2))) 里面的 y 是外层函数的参数，却出现在内层函数定义中。如果内层函数被作为值返回，那么 (&lt;/em&gt; y 2) 就会跑到 y 的作用域以外。所以我们必须把函数做成“闭包”(closure)。闭包是一种特殊的数据结构，它由两个元素组成：函数的定义和当前的环境。所以我们对 (lambda (x) e) 这样一个函数的解释就是这样：&lt;/p&gt;
&lt;figure class=&quot;highlight scheme&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[`(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;lambda&lt;/span&gt;&lt;/span&gt; (,x) ,e)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  (&lt;span class=&quot;name&quot;&gt;Closure&lt;/span&gt; exp env)]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意这里的 exp 就是 `(lambda (,x) ,e) 自己。我们只是把它包装了一下，把它与当前的环境一起放到一个数据结构(闭包)里，并不进行任何复杂的运算。这里我们的闭包用的是一个 Racket 的 struct 结构，也就是一个记录类型(record)。你也可以用其它形式来表示闭包，比如有些解释器教程提倡用函数来表示闭包。其实用什么形式都无所谓，只要能存储 exp 和 env 的值。我比较喜欢使用 struct，因为它的界面简单清晰。&lt;/p&gt;
&lt;p&gt;为什么需要保存当前的环境呢？因为当这个函数被作为一个值返回的时候，我们必须记住里面的外层函数的参数的绑定。比如，(lambda (y) (lambda (x) (&lt;em&gt; y 2)))。当它被作用于 1 之后，我们会得到内层的函数 (lambda (x) (&lt;/em&gt; y 2))。当这个函数被经过一阵周折之后再被调用的时候，y 应该等于几呢？正确的做法应该是等于1。这种把外层参数的值记录在内层函数的闭包里的做法，叫做“lexical scoping”或者“static scoping”。&lt;/p&gt;
&lt;p&gt;如果你不做闭包，而是把函数体直接返回，那么在 (lambda (x) (* y 2)) 被调用的位置，你可能会另外找到一个 y，从而使用它的值。在调用的时候“动态”解析变量的做法，叫做“dynamic scoping”。事实证明 dynamic scoping 的做法是严重错误的，它导致了早期语言里面出现的各种很难发现的bug。很多早期的语言是 dynamic scoping，就是因为它们只保存了函数的代码，而没有保存它定义处的环境。这样要简单一些，但是带来太多的麻烦。早期的 Lisp，现在的 Emacs Lisp 和 TeX 就是使用 dynamic scoping 的语言。&lt;/p&gt;
&lt;p&gt;为了演示 lexical scoping 和 dynamic scoping 的区别。你可以在我们的解释器里执行以下代码：&lt;br&gt;&lt;figure class=&quot;highlight clojure&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;interp&lt;/span&gt; &#39;((&lt;span class=&quot;name&quot;&gt;lambda&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;y&lt;/span&gt;) (((&lt;span class=&quot;name&quot;&gt;lambda&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;y&lt;/span&gt;) (&lt;span class=&quot;name&quot;&gt;lambda&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;x&lt;/span&gt;) (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;*&lt;/span&gt;&lt;/span&gt; y &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;))) &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)) &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中红色的部分就是上面提到的例子。在这里，(&lt;em&gt; y 2) 里的 y，其实是最里面的那个 (lambda (y) …) 里的。当红色部分被作用于 3 之后。 (lambda (x) (&lt;/em&gt; y 2)) 被作为一个值返回。然后它被作用于 0（x 被绑定到 0，被忽略），所以 (* y 2) 应该等于 6。但是如果我们的解释器是 dynamic scoping，那么最后的结果就会等于 8。这是因为最外层的 y 开头被绑定到了 4，而 dynamic scoping 没有记住内层的 y 的值，所以使用了外层那个 y 的值。&lt;/p&gt;
&lt;p&gt;为什么 Lexical scoping 更好呢？你可以从很简单的直觉来理解。当你构造一个“内部函数”的时候，如果它引用了外面的变量，比如这个例子里的 y，那么从外层的 y 到这个函数的内部，出现了一条“信道”（channel）。你可以把这个内部函数想象成一个电路元件，它的内部有一个节点 y 连接到一根从外部来的电线 y。当这个元件被返回，就像这个元件被挖出来送到别的地方去用。但是在它被使用的地方（调用），这个 y 节点应该从哪里得到输入呢？显然你不应该使用调用处的某个 y，因为这个 y 和之前的那个 y，虽然都叫 y，却不是“同一个 y”，也就是同名异义。它们甚至可以代表不同的类型的东西。所以这个 y 应该仍然连接原来的那根 y 电线。当这个内部元件移动的时候，就像这跟电线被无限的延长，但是它始终连接到原来的节点。&lt;/p&gt;
&lt;h1 id=&quot;对函数调用的解释&quot;&gt;&lt;a href=&quot;#对函数调用的解释&quot; class=&quot;headerlink&quot; title=&quot;对函数调用的解释&quot;&gt;&lt;/a&gt;对函数调用的解释&lt;/h1&gt;&lt;p&gt;好，我们终于到了最后的关头，函数调用。函数调用都是 (e1 e2) 这样的形式，所以我们需要先分别求出 e1 和 e2 的值。这跟基本运算的时候需要先求出两个操作数的值相似。&lt;/p&gt;
&lt;p&gt;函数调用就像把一个电器的插头插进插座，使它开始运转。比如，当 (lambda (x) (&lt;em&gt; x 2)) 被作用于 1 时，我们把 x 绑定到 1，然后解释它的函数体 (&lt;/em&gt; x 2)。但是这里有一个问题，如果函数体内有未绑定的变量，它应该取什么值呢？从上面闭包的讨论，你已经知道了，其实操作数 e1 被求值之后应该是一个闭包，所以它的里面应该有未绑定变量的值。所以，我们就把这个闭包中保存的环境(env1)取出来，扩展它，把 x 绑定到 v2，然后用这个扩展后的环境来解释函数体。&lt;/p&gt;
&lt;p&gt;所以函数调用的代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight clojure&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[`(,e1 ,e2)                                            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;let&lt;/span&gt;&lt;/span&gt; ([v1 (&lt;span class=&quot;name&quot;&gt;interp1&lt;/span&gt; e1 env)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       [v2 (&lt;span class=&quot;name&quot;&gt;interp1&lt;/span&gt; e2 env)])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   (&lt;span class=&quot;name&quot;&gt;match&lt;/span&gt; v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     [(&lt;span class=&quot;name&quot;&gt;Closure&lt;/span&gt; `(&lt;span class=&quot;name&quot;&gt;lambda&lt;/span&gt; (,x) ,e) env1)   &lt;span class=&quot;comment&quot;&gt;; 用模式匹配的方式取出闭包里的各个子结构&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      (&lt;span class=&quot;name&quot;&gt;interp1&lt;/span&gt; e (&lt;span class=&quot;name&quot;&gt;ext-env&lt;/span&gt; x v2 env1))]   &lt;span class=&quot;comment&quot;&gt;; 在闭包的环境中把 x 绑定到 v2，解释函数体&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     ))]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你可能会奇怪，那么解释器的环境 env 难道这里就不用了吗？是的。我们通过 env 来计算 e1 和 e2 的值，是因为 e1 和 e2 里面的变量存在于“当前环境”。我们把 e1 里面的环境 env1 取出来用于计算函数体，是因为函数体并不是在当前环境定义的，它的代码在别的地方。如果我们用 env 来解释函数体，那就成了 dynamic scoping。&lt;/p&gt;
&lt;p&gt;实验：你可以把 (interp1 e (ext-env x v2 env1)) 里面的 env1 改成 env，再试试我们之前讨论过的代码，它的输出就会是 8：&lt;/p&gt;
&lt;figure class=&quot;highlight clojure&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;interp&lt;/span&gt; &#39;((&lt;span class=&quot;name&quot;&gt;lambda&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;y&lt;/span&gt;) (((&lt;span class=&quot;name&quot;&gt;lambda&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;y&lt;/span&gt;) (&lt;span class=&quot;name&quot;&gt;lambda&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;x&lt;/span&gt;) (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;*&lt;/span&gt;&lt;/span&gt; y &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;))) &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)) &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;另外在这里我们也看到环境用“函数式数据结构”表示的好处。闭包被调用时它的环境被扩展，但是这并不会影响原来的那个环境，我们得到的是一个新的环境。所以当函数调用返回之后，函数的参数绑定就自动“注销”了。如果你用一个非函数式的数据结构，在绑定参数时不生成新的环境，而是对已有环境进行赋值，那么这个赋值操作就会永久性的改变原来环境的内容。所以你在函数返回之后必须删除参数的绑定。这样不但麻烦，而且在复杂的情况下几乎不可能有效的控制。每一次当我使用赋值操作来修改环境，最后都会出现意想不到的麻烦。所以在写解释器，编译器的时候，我都只使用函数式数据结构来表示环境。&lt;/p&gt;
&lt;h1 id=&quot;下一步&quot;&gt;&lt;a href=&quot;#下一步&quot; class=&quot;headerlink&quot; title=&quot;下一步&quot;&gt;&lt;/a&gt;下一步&lt;/h1&gt;&lt;p&gt;在懂得了这里讲述的基本的解释器构造之后，下一步可以做什么呢？其实从这个基本的解释器原型，你可以进一步发展出很多内容，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在这个解释器里加一些构造，比如递归和状态，你就可以得到一个完整的程序语言的解释器，比如 Scheme 或者 Python。&lt;/li&gt;
&lt;li&gt;对这个解释器进行“抽象”，你就可以对程序进行类型推导。感兴趣的话可以参考我实现的这个 Hindley-Milner系统，或者 Python 类型推导。&lt;/li&gt;
&lt;li&gt;对这个解释器进行一些改变，就可以得到一个非常强大的 online partial evaluator，可以用于编译器优化。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外需要指出的是，学会这个解释器并不等于理解了程序语言的理论。所以在学会了这些之后，还是要看一些语义学的书。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;怎样写一个解释器&quot;&gt;&lt;a href=&quot;#怎样写一个解释器&quot; class=&quot;headerlink&quot; title=&quot;怎样写一个解释器&quot;&gt;&lt;/a&gt;怎样写一个解释器&lt;/h1&gt;&lt;p&gt;这是一篇解释器的入门教程。虽然我试图从最基本的原理讲起，尽量让这篇文章不依赖于其它知识，但是这篇教程并不是针对编程的入门知识，所以我假设你已经学会了最基本的 Scheme 和函数式编程。我不是很推崇函数式编程，但它里面确实包含了很重要的一些方法。如果你完全不了解这些，可以读一下 SICP 的第一，二章（或者接下去读 The Little Schemer)。当然你也可以继续读这篇文章，有不懂的地方再去查资料。我在这里也会讲递归和模式匹配的原理。如果你已经了解这些东西，这里的内容也许可以加深你的理解。&lt;/p&gt;
    
    </summary>
    
      <category term="解释器" scheme="http://yoursite.com/categories/%E8%A7%A3%E9%87%8A%E5%99%A8/"/>
    
    
      <category term="转摘" scheme="http://yoursite.com/tags/%E8%BD%AC%E6%91%98/"/>
    
  </entry>
  
  <entry>
    <title>一种新的操作系统设计</title>
    <link href="http://yoursite.com/2016/03/15/%E4%B8%80%E7%A7%8D%E6%96%B0%E7%9A%84%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/"/>
    <id>http://yoursite.com/2016/03/15/一种新的操作系统设计/</id>
    <published>2016-03-15T11:14:06.000Z</published>
    <updated>2016-03-17T13:02:33.866Z</updated>
    
    <content type="html">&lt;h1 id=&quot;一种新的操作系统设计&quot;&gt;&lt;a href=&quot;#一种新的操作系统设计&quot; class=&quot;headerlink&quot; title=&quot;一种新的操作系统设计&quot;&gt;&lt;/a&gt;一种新的操作系统设计&lt;/h1&gt;&lt;p&gt;我一直在试图利用程序语言的设计原理，设计一种超越“Unix 哲学”的操作系统。这里是我的设想：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这种系统里面的程序间通信不使用无结构的字符串，而是使用带有类型和结构的数据。在这样的系统里面，Unix 和其它类似操作系统（比如 Windows）里的所谓“应用程序”的概念基本上完全消失。系统由一个个很小的“函数”组成，每个函数都可以调用另外一个函数，通过参数传递数据。每个函数都可以手动或者自动并发执行。用现在的系统术语打个比方，这就像是所有代码都是“库”代码，而不存在独立的“可执行文件”。&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;由于参数是数据结构而不是字符串，这避免了程序间通信繁琐的编码和解码过程。使得“进程间通信”变得轻而易举。任何函数都可以调用另一个函数来处理特定类型的数据，这使得像 “OLE 嵌入”这样的机制变得极其简单。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;所有函数由同一种先进的高级程序语言写成，所以函数间的调用完全不需要“翻译”。不存在 SQL injection 之类由于把程序当成字符串而产生的错误。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;由于这种语言不允许应用程序使用“指针运算”，应用程序不可能产生 segfault 一类的错误。为了防止不良用户手动在机器码里面加入指针运算，系统的执行的代码不是完全的机器代码，而必须通过进一步的验证和转换之后才会被硬件执行。这有点像 JVM，但它直接运行在硬件之上，所以必须有一些 JVM 没有的功能，比如把内存里的数据结构自动换出到硬盘上，需要的时候再换进内存。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;由于没有指针运算，系统可以直接使用“实地址”模式进行内存管理，从而不再需要现代处理器提供的内存映射机制以及 TLB。内存的管理粒度是数据结构，而不是页面。这使得内存访问和管理效率大幅提高，而且简化了处理器的设计。据 Kent Dybvig 的经验，这样的系统的内存使用效率要比 Unix 类的系统高一个数量级。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;系统使用与应用程序相同的高级语言写成，至于“系统调用”，不过是调用另外一个函数。由于只有这些“系统驱动函数”才有对设备的“引用”，又因为系统没有指针运算，所以用户函数不可能绕过系统函数而非法访问硬件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;系统没有 Unix 式的“命令行”，它的“shell”其实就是这种高级语言的 REPL。用户可以在终端用可视化的结构编辑方式输入各种函数调用，从而启动进程的运行。所以你不需要像 Unix 一样另外设计一种毛病语言来“粘接”应用程序。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;所有的数据都作为“结构”，保存在一个分布式的数据共享空间。同样的那个系统语言可以被轻松地发送到远程机器，调用远程机器上的库代码，执行任意复杂的查询索引等动作，取回结果。这种方式可以高效的完成数据库的功能，然而却比数据库简单很多。所谓的“查询语言”（比如 SQL，Datalog，Gremlin，Cypher）其实是多此一举，它们远远不如普通的程序语言强大。说是可以让用户“不需要编程，只提出问题”，然而它们所谓的“优化”是非常局限甚至不可能实现的，带来的麻烦远比直接编程还要多。逻辑式编程语言（比如 Prolog）其实跟 SQL 是一样的问题，一旦遇到复杂点的查询就效率低下。所以系统不使用关系式数据库，不需要 SQL，不需要 NoSQL，不需要 Datalog。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;由于数据全都是结构化的，所以没有普通操作系统的无结构“文件系统”。数据结构可能通过路径来访问，然而路径不是一个字符串或者字符串模式。系统不使用正则表达式，而是一种类似 NFA 的数据结构，对它们的拆分和组合操作不会出现像字符串那样的问题，比如把 /a/b/ 和 /c/d 串接在一起就变成错误的 /a/b//c/d。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;所有的数据在合适的时候被自动同步到磁盘，并且进行容错处理，所以即使在机器掉电的情况，绝大部分的数据和进程能够在电源恢复后继续运行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;程序员和用户几乎完全不需要知道“数据库”或者“文件系统”的存在。程序假设自己拥有无穷大的空间，可以任意的构造数据。根据硬件的能力，一些手动的存盘操作也可能是有必要的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;为了减少数据的移动，系统或者用户可以根据数据的位置，选择： 1）迁移数据，或者 2）迁移处理数据的“进程”。程序员不需要使用 MapReduce，Hadoop 等就能进行大规模并行计算，然而表达能力却比它们强大很多，因为它们全都使用同一种程序语言写成。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我曾经以为我是第一个想到这个做法的人。可是调查之后发现，很多人早就已经做出了类似的系统。Lisp Machine 似乎是其中最接近的一个。&lt;a href=&quot;http://www.yinwang.org/blog-cn/2013/03/07/oberon/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Oberon&lt;/a&gt; 是另外一个。IBM System/38 是类似系统里面最老的一个。最近一些年出现的还有微软的 &lt;a href=&quot;http://research.microsoft.com/en-us/projects/Singularity&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Singularity&lt;/a&gt;，另外还有人试图把 JVM 和 Erlang VM 直接放到硬件上执行。&lt;/p&gt;
&lt;p&gt;所以这篇文章的标题其实是错的，这不是一种“新的操作系统设计”。它看起来是新的，只不过因为我们现在用的操作系统忘记了它们本该是什么样子。我也不该说它“超越了 Unix 哲学”，而应该说，所谓的 Unix 哲学其实是历史的倒退。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一种新的操作系统设计&quot;&gt;&lt;a href=&quot;#一种新的操作系统设计&quot; class=&quot;headerlink&quot; title=&quot;一种新的操作系统设计&quot;&gt;&lt;/a&gt;一种新的操作系统设计&lt;/h1&gt;&lt;p&gt;我一直在试图利用程序语言的设计原理，设计一种超越“Unix 哲学”的操作系统。这里是我的设想：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这种系统里面的程序间通信不使用无结构的字符串，而是使用带有类型和结构的数据。在这样的系统里面，Unix 和其它类似操作系统（比如 Windows）里的所谓“应用程序”的概念基本上完全消失。系统由一个个很小的“函数”组成，每个函数都可以调用另外一个函数，通过参数传递数据。每个函数都可以手动或者自动并发执行。用现在的系统术语打个比方，这就像是所有代码都是“库”代码，而不存在独立的“可执行文件”。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="操作系统设计" scheme="http://yoursite.com/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="转摘" scheme="http://yoursite.com/tags/%E8%BD%AC%E6%91%98/"/>
    
  </entry>
  
  <entry>
    <title>我为什么离开 Cornell</title>
    <link href="http://yoursite.com/2016/03/15/%E6%88%91%E4%B8%BA%E4%BB%80%E4%B9%88%E7%A6%BB%E5%BC%80%20Cornell/"/>
    <id>http://yoursite.com/2016/03/15/我为什么离开 Cornell/</id>
    <published>2016-03-15T11:13:49.000Z</published>
    <updated>2016-03-17T13:02:38.889Z</updated>
    
    <content type="html">&lt;h1 id=&quot;我为什么离开-Cornell&quot;&gt;&lt;a href=&quot;#我为什么离开-Cornell&quot; class=&quot;headerlink&quot; title=&quot;我为什么离开 Cornell&quot;&gt;&lt;/a&gt;我为什么离开 Cornell&lt;/h1&gt;&lt;p&gt;很多人都知道，我曾经在 Cornell 博士就读，两年之后转学到了 Indiana 大学。几乎所有人，包括 Indiana 大学的人都感觉奇怪，为什么会有人从 Cornell 这样的“牛校”转学到 Indiana。我曾经在之前的博文里提到 Cornell 的情况，比如学生一上课就忙着抄笔记，作业压得喘不过气，等等。那些都是实际的情况，所以我没什么必要为我的“母校”说好话。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;离开 Cornell 之后，看到有人在 facebook 上成立了一个“Cornell 痛恨者协会”。其中一个人写到：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Cornell 说要教你游泳，就把你推进池塘里，任凭你扑腾挣扎。等你快扑腾到岸边的时候，它忽然拿起一块大石头砸在你头上，然后继续等着你上岸。当你再次接近岸边的时候，它又拿起一个榔头敲在你头上，这样你就可以死了，可是 Cornell 仍然继续等着你游上岸边……”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这就是一个非常形象的，对我在 Cornell 的两年的总结。现在看看我在 Indiana 学到了什么，而 Cornell 教会了我什么，感觉简直一个天上一个地下。Dan Friedman 和 R. Kent Dybvig，他们的教育真的像是爱因斯坦所说的，像是珍贵的礼物，而不是沉重的负担。他们教会我的东西，让我不再在乎任何“牛校”的博士学位甚至教授职位，不管是 Cornell, Stanford, Berkeley, MIT 还是 Harvard, ……&lt;/p&gt;
&lt;p&gt;所谓的“牛校”，恐怕都是这样吧。学生对于它们只是一种成为“牛校”的工具。你拼着命要进来，好我让你进来。但是我不教你，我让你拼死的做作业。如果你做出来了，我就拿最偏最扯淡的试卷来考你。如果你通过了所有这些，那我就给你一个学位。你得到了这样的“荣誉”，自然就会说“我的学校很牛”。你不敢说它不牛，因为那样就是说你也不牛了。所以这样的学校其实什么也不用干，你能学会东西能毕业，全都是靠你自己，到时候你却要把功劳都归到学校头上。天底下就是有这样好的生意。&lt;/p&gt;
&lt;p&gt;曾经有一个 Cornell 的校友跟我是朋友。当我提到 Cornell 的一些事，他总是像个老师一样，上气不接下气地“教育”我，也就是说类似家丑不可外扬的意思吧。“牛校”就是一种传染病，在你还没进去之前就已经埋下病种，当你进去之后它就开始蔓延，等你毕业很多年，它仍然与你同在。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;我为什么离开-Cornell&quot;&gt;&lt;a href=&quot;#我为什么离开-Cornell&quot; class=&quot;headerlink&quot; title=&quot;我为什么离开 Cornell&quot;&gt;&lt;/a&gt;我为什么离开 Cornell&lt;/h1&gt;&lt;p&gt;很多人都知道，我曾经在 Cornell 博士就读，两年之后转学到了 Indiana 大学。几乎所有人，包括 Indiana 大学的人都感觉奇怪，为什么会有人从 Cornell 这样的“牛校”转学到 Indiana。我曾经在之前的博文里提到 Cornell 的情况，比如学生一上课就忙着抄笔记，作业压得喘不过气，等等。那些都是实际的情况，所以我没什么必要为我的“母校”说好话。&lt;/p&gt;
    
    </summary>
    
    
      <category term="转摘" scheme="http://yoursite.com/tags/%E8%BD%AC%E6%91%98/"/>
    
  </entry>
  
</feed>
